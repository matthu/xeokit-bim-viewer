export namespace ifc2x3tc1 {
    namespace classes {
        const Tristate: {};
        namespace Ifc2DCompositeCurve {
            const domain: string;
            const superclasses: string[];
            const fields: {};
        }
        namespace IfcActionRequest {
            const domain_1: string;
            export { domain_1 as domain };
            const superclasses_1: string[];
            export { superclasses_1 as superclasses };
            export namespace fields_1 {
                namespace RequestID {
                    const type: string;
                    const reference: boolean;
                    const many: boolean;
                    const inverse: boolean;
                }
            }
            export { fields_1 as fields };
        }
        namespace IfcActor {
            const domain_2: string;
            export { domain_2 as domain };
            const superclasses_2: string[];
            export { superclasses_2 as superclasses };
            export namespace fields_2 {
                namespace TheActor {
                    const type_1: string;
                    export { type_1 as type };
                    const reference_1: boolean;
                    export { reference_1 as reference };
                    const many_1: boolean;
                    export { many_1 as many };
                    const inverse_1: boolean;
                    export { inverse_1 as inverse };
                }
                namespace IsActingUpon {
                    const type_2: string;
                    export { type_2 as type };
                    const reference_2: boolean;
                    export { reference_2 as reference };
                    const many_2: boolean;
                    export { many_2 as many };
                    const inverse_2: boolean;
                    export { inverse_2 as inverse };
                }
            }
            export { fields_2 as fields };
        }
        namespace IfcActorRole {
            const domain_3: string;
            export { domain_3 as domain };
            const superclasses_3: any[];
            export { superclasses_3 as superclasses };
            export namespace fields_3 {
                namespace Role {
                    const type_3: string;
                    export { type_3 as type };
                    const reference_3: boolean;
                    export { reference_3 as reference };
                    const many_3: boolean;
                    export { many_3 as many };
                    const inverse_3: boolean;
                    export { inverse_3 as inverse };
                }
                namespace UserDefinedRole {
                    const type_4: string;
                    export { type_4 as type };
                    const reference_4: boolean;
                    export { reference_4 as reference };
                    const many_4: boolean;
                    export { many_4 as many };
                    const inverse_4: boolean;
                    export { inverse_4 as inverse };
                }
                namespace Description {
                    const type_5: string;
                    export { type_5 as type };
                    const reference_5: boolean;
                    export { reference_5 as reference };
                    const many_5: boolean;
                    export { many_5 as many };
                    const inverse_5: boolean;
                    export { inverse_5 as inverse };
                }
            }
            export { fields_3 as fields };
        }
        namespace IfcActuatorType {
            const domain_4: string;
            export { domain_4 as domain };
            const superclasses_4: string[];
            export { superclasses_4 as superclasses };
            export namespace fields_4 {
                namespace PredefinedType {
                    const type_6: string;
                    export { type_6 as type };
                    const reference_6: boolean;
                    export { reference_6 as reference };
                    const many_6: boolean;
                    export { many_6 as many };
                    const inverse_6: boolean;
                    export { inverse_6 as inverse };
                }
            }
            export { fields_4 as fields };
        }
        namespace IfcAddress {
            const domain_5: string;
            export { domain_5 as domain };
            const superclasses_5: string[];
            export { superclasses_5 as superclasses };
            export namespace fields_5 {
                export namespace Purpose {
                    const type_7: string;
                    export { type_7 as type };
                    const reference_7: boolean;
                    export { reference_7 as reference };
                    const many_7: boolean;
                    export { many_7 as many };
                    const inverse_7: boolean;
                    export { inverse_7 as inverse };
                }
                export namespace Description_1 {
                    const type_8: string;
                    export { type_8 as type };
                    const reference_8: boolean;
                    export { reference_8 as reference };
                    const many_8: boolean;
                    export { many_8 as many };
                    const inverse_8: boolean;
                    export { inverse_8 as inverse };
                }
                export { Description_1 as Description };
                export namespace UserDefinedPurpose {
                    const type_9: string;
                    export { type_9 as type };
                    const reference_9: boolean;
                    export { reference_9 as reference };
                    const many_9: boolean;
                    export { many_9 as many };
                    const inverse_9: boolean;
                    export { inverse_9 as inverse };
                }
                export namespace OfPerson {
                    const type_10: string;
                    export { type_10 as type };
                    const reference_10: boolean;
                    export { reference_10 as reference };
                    const many_10: boolean;
                    export { many_10 as many };
                    const inverse_10: boolean;
                    export { inverse_10 as inverse };
                }
                export namespace OfOrganization {
                    const type_11: string;
                    export { type_11 as type };
                    const reference_11: boolean;
                    export { reference_11 as reference };
                    const many_11: boolean;
                    export { many_11 as many };
                    const inverse_11: boolean;
                    export { inverse_11 as inverse };
                }
            }
            export { fields_5 as fields };
        }
        namespace IfcAirTerminalBoxType {
            const domain_6: string;
            export { domain_6 as domain };
            const superclasses_6: string[];
            export { superclasses_6 as superclasses };
            export namespace fields_6 {
                export namespace PredefinedType_1 {
                    const type_12: string;
                    export { type_12 as type };
                    const reference_12: boolean;
                    export { reference_12 as reference };
                    const many_12: boolean;
                    export { many_12 as many };
                    const inverse_12: boolean;
                    export { inverse_12 as inverse };
                }
                export { PredefinedType_1 as PredefinedType };
            }
            export { fields_6 as fields };
        }
        namespace IfcAirTerminalType {
            const domain_7: string;
            export { domain_7 as domain };
            const superclasses_7: string[];
            export { superclasses_7 as superclasses };
            export namespace fields_7 {
                export namespace PredefinedType_2 {
                    const type_13: string;
                    export { type_13 as type };
                    const reference_13: boolean;
                    export { reference_13 as reference };
                    const many_13: boolean;
                    export { many_13 as many };
                    const inverse_13: boolean;
                    export { inverse_13 as inverse };
                }
                export { PredefinedType_2 as PredefinedType };
            }
            export { fields_7 as fields };
        }
        namespace IfcAirToAirHeatRecoveryType {
            const domain_8: string;
            export { domain_8 as domain };
            const superclasses_8: string[];
            export { superclasses_8 as superclasses };
            export namespace fields_8 {
                export namespace PredefinedType_3 {
                    const type_14: string;
                    export { type_14 as type };
                    const reference_14: boolean;
                    export { reference_14 as reference };
                    const many_14: boolean;
                    export { many_14 as many };
                    const inverse_14: boolean;
                    export { inverse_14 as inverse };
                }
                export { PredefinedType_3 as PredefinedType };
            }
            export { fields_8 as fields };
        }
        namespace IfcAlarmType {
            const domain_9: string;
            export { domain_9 as domain };
            const superclasses_9: string[];
            export { superclasses_9 as superclasses };
            export namespace fields_9 {
                export namespace PredefinedType_4 {
                    const type_15: string;
                    export { type_15 as type };
                    const reference_15: boolean;
                    export { reference_15 as reference };
                    const many_15: boolean;
                    export { many_15 as many };
                    const inverse_15: boolean;
                    export { inverse_15 as inverse };
                }
                export { PredefinedType_4 as PredefinedType };
            }
            export { fields_9 as fields };
        }
        namespace IfcAngularDimension {
            const domain_10: string;
            export { domain_10 as domain };
            const superclasses_10: string[];
            export { superclasses_10 as superclasses };
            const fields_10: {};
            export { fields_10 as fields };
        }
        namespace IfcAnnotation {
            const domain_11: string;
            export { domain_11 as domain };
            const superclasses_11: string[];
            export { superclasses_11 as superclasses };
            export namespace fields_11 {
                namespace ContainedInStructure {
                    const type_16: string;
                    export { type_16 as type };
                    const reference_16: boolean;
                    export { reference_16 as reference };
                    const many_16: boolean;
                    export { many_16 as many };
                    const inverse_16: boolean;
                    export { inverse_16 as inverse };
                }
            }
            export { fields_11 as fields };
        }
        namespace IfcAnnotationCurveOccurrence {
            const domain_12: string;
            export { domain_12 as domain };
            const superclasses_12: string[];
            export { superclasses_12 as superclasses };
            const fields_12: {};
            export { fields_12 as fields };
        }
        namespace IfcAnnotationFillArea {
            const domain_13: string;
            export { domain_13 as domain };
            const superclasses_13: string[];
            export { superclasses_13 as superclasses };
            export namespace fields_13 {
                namespace OuterBoundary {
                    const type_17: string;
                    export { type_17 as type };
                    const reference_17: boolean;
                    export { reference_17 as reference };
                    const many_17: boolean;
                    export { many_17 as many };
                    const inverse_17: boolean;
                    export { inverse_17 as inverse };
                }
                namespace InnerBoundaries {
                    const type_18: string;
                    export { type_18 as type };
                    const reference_18: boolean;
                    export { reference_18 as reference };
                    const many_18: boolean;
                    export { many_18 as many };
                    const inverse_18: boolean;
                    export { inverse_18 as inverse };
                }
            }
            export { fields_13 as fields };
        }
        namespace IfcAnnotationFillAreaOccurrence {
            const domain_14: string;
            export { domain_14 as domain };
            const superclasses_14: string[];
            export { superclasses_14 as superclasses };
            export namespace fields_14 {
                namespace FillStyleTarget {
                    const type_19: string;
                    export { type_19 as type };
                    const reference_19: boolean;
                    export { reference_19 as reference };
                    const many_19: boolean;
                    export { many_19 as many };
                    const inverse_19: boolean;
                    export { inverse_19 as inverse };
                }
                namespace GlobalOrLocal {
                    const type_20: string;
                    export { type_20 as type };
                    const reference_20: boolean;
                    export { reference_20 as reference };
                    const many_20: boolean;
                    export { many_20 as many };
                    const inverse_20: boolean;
                    export { inverse_20 as inverse };
                }
            }
            export { fields_14 as fields };
        }
        namespace IfcAnnotationOccurrence {
            const domain_15: string;
            export { domain_15 as domain };
            const superclasses_15: string[];
            export { superclasses_15 as superclasses };
            const fields_15: {};
            export { fields_15 as fields };
        }
        namespace IfcAnnotationSurface {
            const domain_16: string;
            export { domain_16 as domain };
            const superclasses_16: string[];
            export { superclasses_16 as superclasses };
            export namespace fields_16 {
                namespace Item {
                    const type_21: string;
                    export { type_21 as type };
                    const reference_21: boolean;
                    export { reference_21 as reference };
                    const many_21: boolean;
                    export { many_21 as many };
                    const inverse_21: boolean;
                    export { inverse_21 as inverse };
                }
                namespace TextureCoordinates {
                    const type_22: string;
                    export { type_22 as type };
                    const reference_22: boolean;
                    export { reference_22 as reference };
                    const many_22: boolean;
                    export { many_22 as many };
                    const inverse_22: boolean;
                    export { inverse_22 as inverse };
                }
            }
            export { fields_16 as fields };
        }
        namespace IfcAnnotationSurfaceOccurrence {
            const domain_17: string;
            export { domain_17 as domain };
            const superclasses_17: string[];
            export { superclasses_17 as superclasses };
            const fields_17: {};
            export { fields_17 as fields };
        }
        namespace IfcAnnotationSymbolOccurrence {
            const domain_18: string;
            export { domain_18 as domain };
            const superclasses_18: string[];
            export { superclasses_18 as superclasses };
            const fields_18: {};
            export { fields_18 as fields };
        }
        namespace IfcAnnotationTextOccurrence {
            const domain_19: string;
            export { domain_19 as domain };
            const superclasses_19: string[];
            export { superclasses_19 as superclasses };
            const fields_19: {};
            export { fields_19 as fields };
        }
        namespace IfcApplication {
            const domain_20: string;
            export { domain_20 as domain };
            const superclasses_20: any[];
            export { superclasses_20 as superclasses };
            export namespace fields_20 {
                namespace ApplicationDeveloper {
                    const type_23: string;
                    export { type_23 as type };
                    const reference_23: boolean;
                    export { reference_23 as reference };
                    const many_23: boolean;
                    export { many_23 as many };
                    const inverse_23: boolean;
                    export { inverse_23 as inverse };
                }
                namespace Version {
                    const type_24: string;
                    export { type_24 as type };
                    const reference_24: boolean;
                    export { reference_24 as reference };
                    const many_24: boolean;
                    export { many_24 as many };
                    const inverse_24: boolean;
                    export { inverse_24 as inverse };
                }
                namespace ApplicationFullName {
                    const type_25: string;
                    export { type_25 as type };
                    const reference_25: boolean;
                    export { reference_25 as reference };
                    const many_25: boolean;
                    export { many_25 as many };
                    const inverse_25: boolean;
                    export { inverse_25 as inverse };
                }
                namespace ApplicationIdentifier {
                    const type_26: string;
                    export { type_26 as type };
                    const reference_26: boolean;
                    export { reference_26 as reference };
                    const many_26: boolean;
                    export { many_26 as many };
                    const inverse_26: boolean;
                    export { inverse_26 as inverse };
                }
            }
            export { fields_20 as fields };
        }
        namespace IfcAppliedValue {
            const domain_21: string;
            export { domain_21 as domain };
            const superclasses_21: string[];
            export { superclasses_21 as superclasses };
            export namespace fields_21 {
                export namespace Name {
                    const type_27: string;
                    export { type_27 as type };
                    const reference_27: boolean;
                    export { reference_27 as reference };
                    const many_27: boolean;
                    export { many_27 as many };
                    const inverse_27: boolean;
                    export { inverse_27 as inverse };
                }
                export namespace Description_2 {
                    const type_28: string;
                    export { type_28 as type };
                    const reference_28: boolean;
                    export { reference_28 as reference };
                    const many_28: boolean;
                    export { many_28 as many };
                    const inverse_28: boolean;
                    export { inverse_28 as inverse };
                }
                export { Description_2 as Description };
                export namespace AppliedValue {
                    const type_29: string;
                    export { type_29 as type };
                    const reference_29: boolean;
                    export { reference_29 as reference };
                    const many_29: boolean;
                    export { many_29 as many };
                    const inverse_29: boolean;
                    export { inverse_29 as inverse };
                }
                export namespace UnitBasis {
                    const type_30: string;
                    export { type_30 as type };
                    const reference_30: boolean;
                    export { reference_30 as reference };
                    const many_30: boolean;
                    export { many_30 as many };
                    const inverse_30: boolean;
                    export { inverse_30 as inverse };
                }
                export namespace ApplicableDate {
                    const type_31: string;
                    export { type_31 as type };
                    const reference_31: boolean;
                    export { reference_31 as reference };
                    const many_31: boolean;
                    export { many_31 as many };
                    const inverse_31: boolean;
                    export { inverse_31 as inverse };
                }
                export namespace FixedUntilDate {
                    const type_32: string;
                    export { type_32 as type };
                    const reference_32: boolean;
                    export { reference_32 as reference };
                    const many_32: boolean;
                    export { many_32 as many };
                    const inverse_32: boolean;
                    export { inverse_32 as inverse };
                }
                export namespace ValuesReferenced {
                    const type_33: string;
                    export { type_33 as type };
                    const reference_33: boolean;
                    export { reference_33 as reference };
                    const many_33: boolean;
                    export { many_33 as many };
                    const inverse_33: boolean;
                    export { inverse_33 as inverse };
                }
                export namespace ValueOfComponents {
                    const type_34: string;
                    export { type_34 as type };
                    const reference_34: boolean;
                    export { reference_34 as reference };
                    const many_34: boolean;
                    export { many_34 as many };
                    const inverse_34: boolean;
                    export { inverse_34 as inverse };
                }
                export namespace IsComponentIn {
                    const type_35: string;
                    export { type_35 as type };
                    const reference_35: boolean;
                    export { reference_35 as reference };
                    const many_35: boolean;
                    export { many_35 as many };
                    const inverse_35: boolean;
                    export { inverse_35 as inverse };
                }
            }
            export { fields_21 as fields };
        }
        namespace IfcAppliedValueRelationship {
            const domain_22: string;
            export { domain_22 as domain };
            const superclasses_22: any[];
            export { superclasses_22 as superclasses };
            export namespace fields_22 {
                export namespace ComponentOfTotal {
                    const type_36: string;
                    export { type_36 as type };
                    const reference_36: boolean;
                    export { reference_36 as reference };
                    const many_36: boolean;
                    export { many_36 as many };
                    const inverse_36: boolean;
                    export { inverse_36 as inverse };
                }
                export namespace Components {
                    const type_37: string;
                    export { type_37 as type };
                    const reference_37: boolean;
                    export { reference_37 as reference };
                    const many_37: boolean;
                    export { many_37 as many };
                    const inverse_37: boolean;
                    export { inverse_37 as inverse };
                }
                export namespace ArithmeticOperator {
                    const type_38: string;
                    export { type_38 as type };
                    const reference_38: boolean;
                    export { reference_38 as reference };
                    const many_38: boolean;
                    export { many_38 as many };
                    const inverse_38: boolean;
                    export { inverse_38 as inverse };
                }
                export namespace Name_1 {
                    const type_39: string;
                    export { type_39 as type };
                    const reference_39: boolean;
                    export { reference_39 as reference };
                    const many_39: boolean;
                    export { many_39 as many };
                    const inverse_39: boolean;
                    export { inverse_39 as inverse };
                }
                export { Name_1 as Name };
                export namespace Description_3 {
                    const type_40: string;
                    export { type_40 as type };
                    const reference_40: boolean;
                    export { reference_40 as reference };
                    const many_40: boolean;
                    export { many_40 as many };
                    const inverse_40: boolean;
                    export { inverse_40 as inverse };
                }
                export { Description_3 as Description };
            }
            export { fields_22 as fields };
        }
        namespace IfcApproval {
            const domain_23: string;
            export { domain_23 as domain };
            const superclasses_23: any[];
            export { superclasses_23 as superclasses };
            export namespace fields_23 {
                export namespace Description_4 {
                    const type_41: string;
                    export { type_41 as type };
                    const reference_41: boolean;
                    export { reference_41 as reference };
                    const many_41: boolean;
                    export { many_41 as many };
                    const inverse_41: boolean;
                    export { inverse_41 as inverse };
                }
                export { Description_4 as Description };
                export namespace ApprovalDateTime {
                    const type_42: string;
                    export { type_42 as type };
                    const reference_42: boolean;
                    export { reference_42 as reference };
                    const many_42: boolean;
                    export { many_42 as many };
                    const inverse_42: boolean;
                    export { inverse_42 as inverse };
                }
                export namespace ApprovalStatus {
                    const type_43: string;
                    export { type_43 as type };
                    const reference_43: boolean;
                    export { reference_43 as reference };
                    const many_43: boolean;
                    export { many_43 as many };
                    const inverse_43: boolean;
                    export { inverse_43 as inverse };
                }
                export namespace ApprovalLevel {
                    const type_44: string;
                    export { type_44 as type };
                    const reference_44: boolean;
                    export { reference_44 as reference };
                    const many_44: boolean;
                    export { many_44 as many };
                    const inverse_44: boolean;
                    export { inverse_44 as inverse };
                }
                export namespace ApprovalQualifier {
                    const type_45: string;
                    export { type_45 as type };
                    const reference_45: boolean;
                    export { reference_45 as reference };
                    const many_45: boolean;
                    export { many_45 as many };
                    const inverse_45: boolean;
                    export { inverse_45 as inverse };
                }
                export namespace Name_2 {
                    const type_46: string;
                    export { type_46 as type };
                    const reference_46: boolean;
                    export { reference_46 as reference };
                    const many_46: boolean;
                    export { many_46 as many };
                    const inverse_46: boolean;
                    export { inverse_46 as inverse };
                }
                export { Name_2 as Name };
                export namespace Identifier {
                    const type_47: string;
                    export { type_47 as type };
                    const reference_47: boolean;
                    export { reference_47 as reference };
                    const many_47: boolean;
                    export { many_47 as many };
                    const inverse_47: boolean;
                    export { inverse_47 as inverse };
                }
                export namespace Actors {
                    const type_48: string;
                    export { type_48 as type };
                    const reference_48: boolean;
                    export { reference_48 as reference };
                    const many_48: boolean;
                    export { many_48 as many };
                    const inverse_48: boolean;
                    export { inverse_48 as inverse };
                }
                export namespace IsRelatedWith {
                    const type_49: string;
                    export { type_49 as type };
                    const reference_49: boolean;
                    export { reference_49 as reference };
                    const many_49: boolean;
                    export { many_49 as many };
                    const inverse_49: boolean;
                    export { inverse_49 as inverse };
                }
                export namespace Relates {
                    const type_50: string;
                    export { type_50 as type };
                    const reference_50: boolean;
                    export { reference_50 as reference };
                    const many_50: boolean;
                    export { many_50 as many };
                    const inverse_50: boolean;
                    export { inverse_50 as inverse };
                }
            }
            export { fields_23 as fields };
        }
        namespace IfcApprovalActorRelationship {
            const domain_24: string;
            export { domain_24 as domain };
            const superclasses_24: any[];
            export { superclasses_24 as superclasses };
            export namespace fields_24 {
                export namespace Actor {
                    const type_51: string;
                    export { type_51 as type };
                    const reference_51: boolean;
                    export { reference_51 as reference };
                    const many_51: boolean;
                    export { many_51 as many };
                    const inverse_51: boolean;
                    export { inverse_51 as inverse };
                }
                export namespace Approval {
                    const type_52: string;
                    export { type_52 as type };
                    const reference_52: boolean;
                    export { reference_52 as reference };
                    const many_52: boolean;
                    export { many_52 as many };
                    const inverse_52: boolean;
                    export { inverse_52 as inverse };
                }
                export namespace Role_1 {
                    const type_53: string;
                    export { type_53 as type };
                    const reference_53: boolean;
                    export { reference_53 as reference };
                    const many_53: boolean;
                    export { many_53 as many };
                    const inverse_53: boolean;
                    export { inverse_53 as inverse };
                }
                export { Role_1 as Role };
            }
            export { fields_24 as fields };
        }
        namespace IfcApprovalPropertyRelationship {
            const domain_25: string;
            export { domain_25 as domain };
            const superclasses_25: any[];
            export { superclasses_25 as superclasses };
            export namespace fields_25 {
                export namespace ApprovedProperties {
                    const type_54: string;
                    export { type_54 as type };
                    const reference_54: boolean;
                    export { reference_54 as reference };
                    const many_54: boolean;
                    export { many_54 as many };
                    const inverse_54: boolean;
                    export { inverse_54 as inverse };
                }
                export namespace Approval_1 {
                    const type_55: string;
                    export { type_55 as type };
                    const reference_55: boolean;
                    export { reference_55 as reference };
                    const many_55: boolean;
                    export { many_55 as many };
                    const inverse_55: boolean;
                    export { inverse_55 as inverse };
                }
                export { Approval_1 as Approval };
            }
            export { fields_25 as fields };
        }
        namespace IfcApprovalRelationship {
            const domain_26: string;
            export { domain_26 as domain };
            const superclasses_26: any[];
            export { superclasses_26 as superclasses };
            export namespace fields_26 {
                export namespace RelatedApproval {
                    const type_56: string;
                    export { type_56 as type };
                    const reference_56: boolean;
                    export { reference_56 as reference };
                    const many_56: boolean;
                    export { many_56 as many };
                    const inverse_56: boolean;
                    export { inverse_56 as inverse };
                }
                export namespace RelatingApproval {
                    const type_57: string;
                    export { type_57 as type };
                    const reference_57: boolean;
                    export { reference_57 as reference };
                    const many_57: boolean;
                    export { many_57 as many };
                    const inverse_57: boolean;
                    export { inverse_57 as inverse };
                }
                export namespace Description_5 {
                    const type_58: string;
                    export { type_58 as type };
                    const reference_58: boolean;
                    export { reference_58 as reference };
                    const many_58: boolean;
                    export { many_58 as many };
                    const inverse_58: boolean;
                    export { inverse_58 as inverse };
                }
                export { Description_5 as Description };
                export namespace Name_3 {
                    const type_59: string;
                    export { type_59 as type };
                    const reference_59: boolean;
                    export { reference_59 as reference };
                    const many_59: boolean;
                    export { many_59 as many };
                    const inverse_59: boolean;
                    export { inverse_59 as inverse };
                }
                export { Name_3 as Name };
            }
            export { fields_26 as fields };
        }
        namespace IfcArbitraryClosedProfileDef {
            const domain_27: string;
            export { domain_27 as domain };
            const superclasses_27: string[];
            export { superclasses_27 as superclasses };
            export namespace fields_27 {
                namespace OuterCurve {
                    const type_60: string;
                    export { type_60 as type };
                    const reference_60: boolean;
                    export { reference_60 as reference };
                    const many_60: boolean;
                    export { many_60 as many };
                    const inverse_60: boolean;
                    export { inverse_60 as inverse };
                }
            }
            export { fields_27 as fields };
        }
        namespace IfcArbitraryOpenProfileDef {
            const domain_28: string;
            export { domain_28 as domain };
            const superclasses_28: string[];
            export { superclasses_28 as superclasses };
            export namespace fields_28 {
                namespace Curve {
                    const type_61: string;
                    export { type_61 as type };
                    const reference_61: boolean;
                    export { reference_61 as reference };
                    const many_61: boolean;
                    export { many_61 as many };
                    const inverse_61: boolean;
                    export { inverse_61 as inverse };
                }
            }
            export { fields_28 as fields };
        }
        namespace IfcArbitraryProfileDefWithVoids {
            const domain_29: string;
            export { domain_29 as domain };
            const superclasses_29: string[];
            export { superclasses_29 as superclasses };
            export namespace fields_29 {
                namespace InnerCurves {
                    const type_62: string;
                    export { type_62 as type };
                    const reference_62: boolean;
                    export { reference_62 as reference };
                    const many_62: boolean;
                    export { many_62 as many };
                    const inverse_62: boolean;
                    export { inverse_62 as inverse };
                }
            }
            export { fields_29 as fields };
        }
        namespace IfcAsset {
            const domain_30: string;
            export { domain_30 as domain };
            const superclasses_30: string[];
            export { superclasses_30 as superclasses };
            export namespace fields_30 {
                namespace AssetID {
                    const type_63: string;
                    export { type_63 as type };
                    const reference_63: boolean;
                    export { reference_63 as reference };
                    const many_63: boolean;
                    export { many_63 as many };
                    const inverse_63: boolean;
                    export { inverse_63 as inverse };
                }
                namespace OriginalValue {
                    const type_64: string;
                    export { type_64 as type };
                    const reference_64: boolean;
                    export { reference_64 as reference };
                    const many_64: boolean;
                    export { many_64 as many };
                    const inverse_64: boolean;
                    export { inverse_64 as inverse };
                }
                namespace CurrentValue {
                    const type_65: string;
                    export { type_65 as type };
                    const reference_65: boolean;
                    export { reference_65 as reference };
                    const many_65: boolean;
                    export { many_65 as many };
                    const inverse_65: boolean;
                    export { inverse_65 as inverse };
                }
                namespace TotalReplacementCost {
                    const type_66: string;
                    export { type_66 as type };
                    const reference_66: boolean;
                    export { reference_66 as reference };
                    const many_66: boolean;
                    export { many_66 as many };
                    const inverse_66: boolean;
                    export { inverse_66 as inverse };
                }
                namespace Owner {
                    const type_67: string;
                    export { type_67 as type };
                    const reference_67: boolean;
                    export { reference_67 as reference };
                    const many_67: boolean;
                    export { many_67 as many };
                    const inverse_67: boolean;
                    export { inverse_67 as inverse };
                }
                namespace User {
                    const type_68: string;
                    export { type_68 as type };
                    const reference_68: boolean;
                    export { reference_68 as reference };
                    const many_68: boolean;
                    export { many_68 as many };
                    const inverse_68: boolean;
                    export { inverse_68 as inverse };
                }
                namespace ResponsiblePerson {
                    const type_69: string;
                    export { type_69 as type };
                    const reference_69: boolean;
                    export { reference_69 as reference };
                    const many_69: boolean;
                    export { many_69 as many };
                    const inverse_69: boolean;
                    export { inverse_69 as inverse };
                }
                namespace IncorporationDate {
                    const type_70: string;
                    export { type_70 as type };
                    const reference_70: boolean;
                    export { reference_70 as reference };
                    const many_70: boolean;
                    export { many_70 as many };
                    const inverse_70: boolean;
                    export { inverse_70 as inverse };
                }
                namespace DepreciatedValue {
                    const type_71: string;
                    export { type_71 as type };
                    const reference_71: boolean;
                    export { reference_71 as reference };
                    const many_71: boolean;
                    export { many_71 as many };
                    const inverse_71: boolean;
                    export { inverse_71 as inverse };
                }
            }
            export { fields_30 as fields };
        }
        namespace IfcAsymmetricIShapeProfileDef {
            const domain_31: string;
            export { domain_31 as domain };
            const superclasses_31: string[];
            export { superclasses_31 as superclasses };
            export namespace fields_31 {
                namespace TopFlangeWidth {
                    const type_72: string;
                    export { type_72 as type };
                    const reference_72: boolean;
                    export { reference_72 as reference };
                    const many_72: boolean;
                    export { many_72 as many };
                    const inverse_72: boolean;
                    export { inverse_72 as inverse };
                }
                namespace TopFlangeWidthAsString {
                    const type_73: string;
                    export { type_73 as type };
                    const reference_73: boolean;
                    export { reference_73 as reference };
                    const many_73: boolean;
                    export { many_73 as many };
                    const inverse_73: boolean;
                    export { inverse_73 as inverse };
                }
                namespace TopFlangeThickness {
                    const type_74: string;
                    export { type_74 as type };
                    const reference_74: boolean;
                    export { reference_74 as reference };
                    const many_74: boolean;
                    export { many_74 as many };
                    const inverse_74: boolean;
                    export { inverse_74 as inverse };
                }
                namespace TopFlangeThicknessAsString {
                    const type_75: string;
                    export { type_75 as type };
                    const reference_75: boolean;
                    export { reference_75 as reference };
                    const many_75: boolean;
                    export { many_75 as many };
                    const inverse_75: boolean;
                    export { inverse_75 as inverse };
                }
                namespace TopFlangeFilletRadius {
                    const type_76: string;
                    export { type_76 as type };
                    const reference_76: boolean;
                    export { reference_76 as reference };
                    const many_76: boolean;
                    export { many_76 as many };
                    const inverse_76: boolean;
                    export { inverse_76 as inverse };
                }
                namespace TopFlangeFilletRadiusAsString {
                    const type_77: string;
                    export { type_77 as type };
                    const reference_77: boolean;
                    export { reference_77 as reference };
                    const many_77: boolean;
                    export { many_77 as many };
                    const inverse_77: boolean;
                    export { inverse_77 as inverse };
                }
                namespace CentreOfGravityInY {
                    const type_78: string;
                    export { type_78 as type };
                    const reference_78: boolean;
                    export { reference_78 as reference };
                    const many_78: boolean;
                    export { many_78 as many };
                    const inverse_78: boolean;
                    export { inverse_78 as inverse };
                }
                namespace CentreOfGravityInYAsString {
                    const type_79: string;
                    export { type_79 as type };
                    const reference_79: boolean;
                    export { reference_79 as reference };
                    const many_79: boolean;
                    export { many_79 as many };
                    const inverse_79: boolean;
                    export { inverse_79 as inverse };
                }
            }
            export { fields_31 as fields };
        }
        namespace IfcAxis1Placement {
            const domain_32: string;
            export { domain_32 as domain };
            const superclasses_32: string[];
            export { superclasses_32 as superclasses };
            export namespace fields_32 {
                namespace Axis {
                    const type_80: string;
                    export { type_80 as type };
                    const reference_80: boolean;
                    export { reference_80 as reference };
                    const many_80: boolean;
                    export { many_80 as many };
                    const inverse_80: boolean;
                    export { inverse_80 as inverse };
                }
            }
            export { fields_32 as fields };
        }
        namespace IfcAxis2Placement2D {
            const domain_33: string;
            export { domain_33 as domain };
            const superclasses_33: string[];
            export { superclasses_33 as superclasses };
            export namespace fields_33 {
                namespace RefDirection {
                    const type_81: string;
                    export { type_81 as type };
                    const reference_81: boolean;
                    export { reference_81 as reference };
                    const many_81: boolean;
                    export { many_81 as many };
                    const inverse_81: boolean;
                    export { inverse_81 as inverse };
                }
            }
            export { fields_33 as fields };
        }
        namespace IfcAxis2Placement3D {
            const domain_34: string;
            export { domain_34 as domain };
            const superclasses_34: string[];
            export { superclasses_34 as superclasses };
            export namespace fields_34 {
                export namespace Axis_1 {
                    const type_82: string;
                    export { type_82 as type };
                    const reference_82: boolean;
                    export { reference_82 as reference };
                    const many_82: boolean;
                    export { many_82 as many };
                    const inverse_82: boolean;
                    export { inverse_82 as inverse };
                }
                export { Axis_1 as Axis };
                export namespace RefDirection_1 {
                    const type_83: string;
                    export { type_83 as type };
                    const reference_83: boolean;
                    export { reference_83 as reference };
                    const many_83: boolean;
                    export { many_83 as many };
                    const inverse_83: boolean;
                    export { inverse_83 as inverse };
                }
                export { RefDirection_1 as RefDirection };
            }
            export { fields_34 as fields };
        }
        namespace IfcBSplineCurve {
            const domain_35: string;
            export { domain_35 as domain };
            const superclasses_35: string[];
            export { superclasses_35 as superclasses };
            export namespace fields_35 {
                namespace Degree {
                    const type_84: string;
                    export { type_84 as type };
                    const reference_84: boolean;
                    export { reference_84 as reference };
                    const many_84: boolean;
                    export { many_84 as many };
                    const inverse_84: boolean;
                    export { inverse_84 as inverse };
                }
                namespace ControlPointsList {
                    const type_85: string;
                    export { type_85 as type };
                    const reference_85: boolean;
                    export { reference_85 as reference };
                    const many_85: boolean;
                    export { many_85 as many };
                    const inverse_85: boolean;
                    export { inverse_85 as inverse };
                }
                namespace CurveForm {
                    const type_86: string;
                    export { type_86 as type };
                    const reference_86: boolean;
                    export { reference_86 as reference };
                    const many_86: boolean;
                    export { many_86 as many };
                    const inverse_86: boolean;
                    export { inverse_86 as inverse };
                }
                namespace ClosedCurve {
                    const type_87: string;
                    export { type_87 as type };
                    const reference_87: boolean;
                    export { reference_87 as reference };
                    const many_87: boolean;
                    export { many_87 as many };
                    const inverse_87: boolean;
                    export { inverse_87 as inverse };
                }
                namespace SelfIntersect {
                    const type_88: string;
                    export { type_88 as type };
                    const reference_88: boolean;
                    export { reference_88 as reference };
                    const many_88: boolean;
                    export { many_88 as many };
                    const inverse_88: boolean;
                    export { inverse_88 as inverse };
                }
            }
            export { fields_35 as fields };
        }
        namespace IfcBeam {
            const domain_36: string;
            export { domain_36 as domain };
            const superclasses_36: string[];
            export { superclasses_36 as superclasses };
            const fields_36: {};
            export { fields_36 as fields };
        }
        namespace IfcBeamType {
            const domain_37: string;
            export { domain_37 as domain };
            const superclasses_37: string[];
            export { superclasses_37 as superclasses };
            export namespace fields_37 {
                export namespace PredefinedType_5 {
                    const type_89: string;
                    export { type_89 as type };
                    const reference_89: boolean;
                    export { reference_89 as reference };
                    const many_89: boolean;
                    export { many_89 as many };
                    const inverse_89: boolean;
                    export { inverse_89 as inverse };
                }
                export { PredefinedType_5 as PredefinedType };
            }
            export { fields_37 as fields };
        }
        namespace IfcBezierCurve {
            const domain_38: string;
            export { domain_38 as domain };
            const superclasses_38: string[];
            export { superclasses_38 as superclasses };
            const fields_38: {};
            export { fields_38 as fields };
        }
        namespace IfcBlobTexture {
            const domain_39: string;
            export { domain_39 as domain };
            const superclasses_39: string[];
            export { superclasses_39 as superclasses };
            export namespace fields_39 {
                namespace RasterFormat {
                    const type_90: string;
                    export { type_90 as type };
                    const reference_90: boolean;
                    export { reference_90 as reference };
                    const many_90: boolean;
                    export { many_90 as many };
                    const inverse_90: boolean;
                    export { inverse_90 as inverse };
                }
                namespace RasterCode {
                    const type_91: string;
                    export { type_91 as type };
                    const reference_91: boolean;
                    export { reference_91 as reference };
                    const many_91: boolean;
                    export { many_91 as many };
                    const inverse_91: boolean;
                    export { inverse_91 as inverse };
                }
            }
            export { fields_39 as fields };
        }
        namespace IfcBlock {
            const domain_40: string;
            export { domain_40 as domain };
            const superclasses_40: string[];
            export { superclasses_40 as superclasses };
            export namespace fields_40 {
                namespace XLength {
                    const type_92: string;
                    export { type_92 as type };
                    const reference_92: boolean;
                    export { reference_92 as reference };
                    const many_92: boolean;
                    export { many_92 as many };
                    const inverse_92: boolean;
                    export { inverse_92 as inverse };
                }
                namespace XLengthAsString {
                    const type_93: string;
                    export { type_93 as type };
                    const reference_93: boolean;
                    export { reference_93 as reference };
                    const many_93: boolean;
                    export { many_93 as many };
                    const inverse_93: boolean;
                    export { inverse_93 as inverse };
                }
                namespace YLength {
                    const type_94: string;
                    export { type_94 as type };
                    const reference_94: boolean;
                    export { reference_94 as reference };
                    const many_94: boolean;
                    export { many_94 as many };
                    const inverse_94: boolean;
                    export { inverse_94 as inverse };
                }
                namespace YLengthAsString {
                    const type_95: string;
                    export { type_95 as type };
                    const reference_95: boolean;
                    export { reference_95 as reference };
                    const many_95: boolean;
                    export { many_95 as many };
                    const inverse_95: boolean;
                    export { inverse_95 as inverse };
                }
                namespace ZLength {
                    const type_96: string;
                    export { type_96 as type };
                    const reference_96: boolean;
                    export { reference_96 as reference };
                    const many_96: boolean;
                    export { many_96 as many };
                    const inverse_96: boolean;
                    export { inverse_96 as inverse };
                }
                namespace ZLengthAsString {
                    const type_97: string;
                    export { type_97 as type };
                    const reference_97: boolean;
                    export { reference_97 as reference };
                    const many_97: boolean;
                    export { many_97 as many };
                    const inverse_97: boolean;
                    export { inverse_97 as inverse };
                }
            }
            export { fields_40 as fields };
        }
        namespace IfcBoilerType {
            const domain_41: string;
            export { domain_41 as domain };
            const superclasses_41: string[];
            export { superclasses_41 as superclasses };
            export namespace fields_41 {
                export namespace PredefinedType_6 {
                    const type_98: string;
                    export { type_98 as type };
                    const reference_98: boolean;
                    export { reference_98 as reference };
                    const many_98: boolean;
                    export { many_98 as many };
                    const inverse_98: boolean;
                    export { inverse_98 as inverse };
                }
                export { PredefinedType_6 as PredefinedType };
            }
            export { fields_41 as fields };
        }
        namespace IfcBooleanClippingResult {
            const domain_42: string;
            export { domain_42 as domain };
            const superclasses_42: string[];
            export { superclasses_42 as superclasses };
            const fields_42: {};
            export { fields_42 as fields };
        }
        namespace IfcBooleanResult {
            const domain_43: string;
            export { domain_43 as domain };
            const superclasses_43: string[];
            export { superclasses_43 as superclasses };
            export namespace fields_43 {
                namespace Operator {
                    const type_99: string;
                    export { type_99 as type };
                    const reference_99: boolean;
                    export { reference_99 as reference };
                    const many_99: boolean;
                    export { many_99 as many };
                    const inverse_99: boolean;
                    export { inverse_99 as inverse };
                }
                namespace FirstOperand {
                    const type_100: string;
                    export { type_100 as type };
                    const reference_100: boolean;
                    export { reference_100 as reference };
                    const many_100: boolean;
                    export { many_100 as many };
                    const inverse_100: boolean;
                    export { inverse_100 as inverse };
                }
                namespace SecondOperand {
                    const type_101: string;
                    export { type_101 as type };
                    const reference_101: boolean;
                    export { reference_101 as reference };
                    const many_101: boolean;
                    export { many_101 as many };
                    const inverse_101: boolean;
                    export { inverse_101 as inverse };
                }
                namespace Dim {
                    const type_102: string;
                    export { type_102 as type };
                    const reference_102: boolean;
                    export { reference_102 as reference };
                    const many_102: boolean;
                    export { many_102 as many };
                    const inverse_102: boolean;
                    export { inverse_102 as inverse };
                }
            }
            export { fields_43 as fields };
        }
        namespace IfcBoundaryCondition {
            const domain_44: string;
            export { domain_44 as domain };
            const superclasses_44: any[];
            export { superclasses_44 as superclasses };
            export namespace fields_44 {
                export namespace Name_4 {
                    const type_103: string;
                    export { type_103 as type };
                    const reference_103: boolean;
                    export { reference_103 as reference };
                    const many_103: boolean;
                    export { many_103 as many };
                    const inverse_103: boolean;
                    export { inverse_103 as inverse };
                }
                export { Name_4 as Name };
            }
            export { fields_44 as fields };
        }
        namespace IfcBoundaryEdgeCondition {
            const domain_45: string;
            export { domain_45 as domain };
            const superclasses_45: string[];
            export { superclasses_45 as superclasses };
            export namespace fields_45 {
                namespace LinearStiffnessByLengthX {
                    const type_104: string;
                    export { type_104 as type };
                    const reference_104: boolean;
                    export { reference_104 as reference };
                    const many_104: boolean;
                    export { many_104 as many };
                    const inverse_104: boolean;
                    export { inverse_104 as inverse };
                }
                namespace LinearStiffnessByLengthXAsString {
                    const type_105: string;
                    export { type_105 as type };
                    const reference_105: boolean;
                    export { reference_105 as reference };
                    const many_105: boolean;
                    export { many_105 as many };
                    const inverse_105: boolean;
                    export { inverse_105 as inverse };
                }
                namespace LinearStiffnessByLengthY {
                    const type_106: string;
                    export { type_106 as type };
                    const reference_106: boolean;
                    export { reference_106 as reference };
                    const many_106: boolean;
                    export { many_106 as many };
                    const inverse_106: boolean;
                    export { inverse_106 as inverse };
                }
                namespace LinearStiffnessByLengthYAsString {
                    const type_107: string;
                    export { type_107 as type };
                    const reference_107: boolean;
                    export { reference_107 as reference };
                    const many_107: boolean;
                    export { many_107 as many };
                    const inverse_107: boolean;
                    export { inverse_107 as inverse };
                }
                namespace LinearStiffnessByLengthZ {
                    const type_108: string;
                    export { type_108 as type };
                    const reference_108: boolean;
                    export { reference_108 as reference };
                    const many_108: boolean;
                    export { many_108 as many };
                    const inverse_108: boolean;
                    export { inverse_108 as inverse };
                }
                namespace LinearStiffnessByLengthZAsString {
                    const type_109: string;
                    export { type_109 as type };
                    const reference_109: boolean;
                    export { reference_109 as reference };
                    const many_109: boolean;
                    export { many_109 as many };
                    const inverse_109: boolean;
                    export { inverse_109 as inverse };
                }
                namespace RotationalStiffnessByLengthX {
                    const type_110: string;
                    export { type_110 as type };
                    const reference_110: boolean;
                    export { reference_110 as reference };
                    const many_110: boolean;
                    export { many_110 as many };
                    const inverse_110: boolean;
                    export { inverse_110 as inverse };
                }
                namespace RotationalStiffnessByLengthXAsString {
                    const type_111: string;
                    export { type_111 as type };
                    const reference_111: boolean;
                    export { reference_111 as reference };
                    const many_111: boolean;
                    export { many_111 as many };
                    const inverse_111: boolean;
                    export { inverse_111 as inverse };
                }
                namespace RotationalStiffnessByLengthY {
                    const type_112: string;
                    export { type_112 as type };
                    const reference_112: boolean;
                    export { reference_112 as reference };
                    const many_112: boolean;
                    export { many_112 as many };
                    const inverse_112: boolean;
                    export { inverse_112 as inverse };
                }
                namespace RotationalStiffnessByLengthYAsString {
                    const type_113: string;
                    export { type_113 as type };
                    const reference_113: boolean;
                    export { reference_113 as reference };
                    const many_113: boolean;
                    export { many_113 as many };
                    const inverse_113: boolean;
                    export { inverse_113 as inverse };
                }
                namespace RotationalStiffnessByLengthZ {
                    const type_114: string;
                    export { type_114 as type };
                    const reference_114: boolean;
                    export { reference_114 as reference };
                    const many_114: boolean;
                    export { many_114 as many };
                    const inverse_114: boolean;
                    export { inverse_114 as inverse };
                }
                namespace RotationalStiffnessByLengthZAsString {
                    const type_115: string;
                    export { type_115 as type };
                    const reference_115: boolean;
                    export { reference_115 as reference };
                    const many_115: boolean;
                    export { many_115 as many };
                    const inverse_115: boolean;
                    export { inverse_115 as inverse };
                }
            }
            export { fields_45 as fields };
        }
        namespace IfcBoundaryFaceCondition {
            const domain_46: string;
            export { domain_46 as domain };
            const superclasses_46: string[];
            export { superclasses_46 as superclasses };
            export namespace fields_46 {
                namespace LinearStiffnessByAreaX {
                    const type_116: string;
                    export { type_116 as type };
                    const reference_116: boolean;
                    export { reference_116 as reference };
                    const many_116: boolean;
                    export { many_116 as many };
                    const inverse_116: boolean;
                    export { inverse_116 as inverse };
                }
                namespace LinearStiffnessByAreaXAsString {
                    const type_117: string;
                    export { type_117 as type };
                    const reference_117: boolean;
                    export { reference_117 as reference };
                    const many_117: boolean;
                    export { many_117 as many };
                    const inverse_117: boolean;
                    export { inverse_117 as inverse };
                }
                namespace LinearStiffnessByAreaY {
                    const type_118: string;
                    export { type_118 as type };
                    const reference_118: boolean;
                    export { reference_118 as reference };
                    const many_118: boolean;
                    export { many_118 as many };
                    const inverse_118: boolean;
                    export { inverse_118 as inverse };
                }
                namespace LinearStiffnessByAreaYAsString {
                    const type_119: string;
                    export { type_119 as type };
                    const reference_119: boolean;
                    export { reference_119 as reference };
                    const many_119: boolean;
                    export { many_119 as many };
                    const inverse_119: boolean;
                    export { inverse_119 as inverse };
                }
                namespace LinearStiffnessByAreaZ {
                    const type_120: string;
                    export { type_120 as type };
                    const reference_120: boolean;
                    export { reference_120 as reference };
                    const many_120: boolean;
                    export { many_120 as many };
                    const inverse_120: boolean;
                    export { inverse_120 as inverse };
                }
                namespace LinearStiffnessByAreaZAsString {
                    const type_121: string;
                    export { type_121 as type };
                    const reference_121: boolean;
                    export { reference_121 as reference };
                    const many_121: boolean;
                    export { many_121 as many };
                    const inverse_121: boolean;
                    export { inverse_121 as inverse };
                }
            }
            export { fields_46 as fields };
        }
        namespace IfcBoundaryNodeCondition {
            const domain_47: string;
            export { domain_47 as domain };
            const superclasses_47: string[];
            export { superclasses_47 as superclasses };
            export namespace fields_47 {
                namespace LinearStiffnessX {
                    const type_122: string;
                    export { type_122 as type };
                    const reference_122: boolean;
                    export { reference_122 as reference };
                    const many_122: boolean;
                    export { many_122 as many };
                    const inverse_122: boolean;
                    export { inverse_122 as inverse };
                }
                namespace LinearStiffnessXAsString {
                    const type_123: string;
                    export { type_123 as type };
                    const reference_123: boolean;
                    export { reference_123 as reference };
                    const many_123: boolean;
                    export { many_123 as many };
                    const inverse_123: boolean;
                    export { inverse_123 as inverse };
                }
                namespace LinearStiffnessY {
                    const type_124: string;
                    export { type_124 as type };
                    const reference_124: boolean;
                    export { reference_124 as reference };
                    const many_124: boolean;
                    export { many_124 as many };
                    const inverse_124: boolean;
                    export { inverse_124 as inverse };
                }
                namespace LinearStiffnessYAsString {
                    const type_125: string;
                    export { type_125 as type };
                    const reference_125: boolean;
                    export { reference_125 as reference };
                    const many_125: boolean;
                    export { many_125 as many };
                    const inverse_125: boolean;
                    export { inverse_125 as inverse };
                }
                namespace LinearStiffnessZ {
                    const type_126: string;
                    export { type_126 as type };
                    const reference_126: boolean;
                    export { reference_126 as reference };
                    const many_126: boolean;
                    export { many_126 as many };
                    const inverse_126: boolean;
                    export { inverse_126 as inverse };
                }
                namespace LinearStiffnessZAsString {
                    const type_127: string;
                    export { type_127 as type };
                    const reference_127: boolean;
                    export { reference_127 as reference };
                    const many_127: boolean;
                    export { many_127 as many };
                    const inverse_127: boolean;
                    export { inverse_127 as inverse };
                }
                namespace RotationalStiffnessX {
                    const type_128: string;
                    export { type_128 as type };
                    const reference_128: boolean;
                    export { reference_128 as reference };
                    const many_128: boolean;
                    export { many_128 as many };
                    const inverse_128: boolean;
                    export { inverse_128 as inverse };
                }
                namespace RotationalStiffnessXAsString {
                    const type_129: string;
                    export { type_129 as type };
                    const reference_129: boolean;
                    export { reference_129 as reference };
                    const many_129: boolean;
                    export { many_129 as many };
                    const inverse_129: boolean;
                    export { inverse_129 as inverse };
                }
                namespace RotationalStiffnessY {
                    const type_130: string;
                    export { type_130 as type };
                    const reference_130: boolean;
                    export { reference_130 as reference };
                    const many_130: boolean;
                    export { many_130 as many };
                    const inverse_130: boolean;
                    export { inverse_130 as inverse };
                }
                namespace RotationalStiffnessYAsString {
                    const type_131: string;
                    export { type_131 as type };
                    const reference_131: boolean;
                    export { reference_131 as reference };
                    const many_131: boolean;
                    export { many_131 as many };
                    const inverse_131: boolean;
                    export { inverse_131 as inverse };
                }
                namespace RotationalStiffnessZ {
                    const type_132: string;
                    export { type_132 as type };
                    const reference_132: boolean;
                    export { reference_132 as reference };
                    const many_132: boolean;
                    export { many_132 as many };
                    const inverse_132: boolean;
                    export { inverse_132 as inverse };
                }
                namespace RotationalStiffnessZAsString {
                    const type_133: string;
                    export { type_133 as type };
                    const reference_133: boolean;
                    export { reference_133 as reference };
                    const many_133: boolean;
                    export { many_133 as many };
                    const inverse_133: boolean;
                    export { inverse_133 as inverse };
                }
            }
            export { fields_47 as fields };
        }
        namespace IfcBoundaryNodeConditionWarping {
            const domain_48: string;
            export { domain_48 as domain };
            const superclasses_48: string[];
            export { superclasses_48 as superclasses };
            export namespace fields_48 {
                namespace WarpingStiffness {
                    const type_134: string;
                    export { type_134 as type };
                    const reference_134: boolean;
                    export { reference_134 as reference };
                    const many_134: boolean;
                    export { many_134 as many };
                    const inverse_134: boolean;
                    export { inverse_134 as inverse };
                }
                namespace WarpingStiffnessAsString {
                    const type_135: string;
                    export { type_135 as type };
                    const reference_135: boolean;
                    export { reference_135 as reference };
                    const many_135: boolean;
                    export { many_135 as many };
                    const inverse_135: boolean;
                    export { inverse_135 as inverse };
                }
            }
            export { fields_48 as fields };
        }
        namespace IfcBoundedCurve {
            const domain_49: string;
            export { domain_49 as domain };
            const superclasses_49: string[];
            export { superclasses_49 as superclasses };
            const fields_49: {};
            export { fields_49 as fields };
        }
        namespace IfcBoundedSurface {
            const domain_50: string;
            export { domain_50 as domain };
            const superclasses_50: string[];
            export { superclasses_50 as superclasses };
            const fields_50: {};
            export { fields_50 as fields };
        }
        namespace IfcBoundingBox {
            const domain_51: string;
            export { domain_51 as domain };
            const superclasses_51: string[];
            export { superclasses_51 as superclasses };
            export namespace fields_51 {
                export namespace Corner {
                    const type_136: string;
                    export { type_136 as type };
                    const reference_136: boolean;
                    export { reference_136 as reference };
                    const many_136: boolean;
                    export { many_136 as many };
                    const inverse_136: boolean;
                    export { inverse_136 as inverse };
                }
                export namespace XDim {
                    const type_137: string;
                    export { type_137 as type };
                    const reference_137: boolean;
                    export { reference_137 as reference };
                    const many_137: boolean;
                    export { many_137 as many };
                    const inverse_137: boolean;
                    export { inverse_137 as inverse };
                }
                export namespace XDimAsString {
                    const type_138: string;
                    export { type_138 as type };
                    const reference_138: boolean;
                    export { reference_138 as reference };
                    const many_138: boolean;
                    export { many_138 as many };
                    const inverse_138: boolean;
                    export { inverse_138 as inverse };
                }
                export namespace YDim {
                    const type_139: string;
                    export { type_139 as type };
                    const reference_139: boolean;
                    export { reference_139 as reference };
                    const many_139: boolean;
                    export { many_139 as many };
                    const inverse_139: boolean;
                    export { inverse_139 as inverse };
                }
                export namespace YDimAsString {
                    const type_140: string;
                    export { type_140 as type };
                    const reference_140: boolean;
                    export { reference_140 as reference };
                    const many_140: boolean;
                    export { many_140 as many };
                    const inverse_140: boolean;
                    export { inverse_140 as inverse };
                }
                export namespace ZDim {
                    const type_141: string;
                    export { type_141 as type };
                    const reference_141: boolean;
                    export { reference_141 as reference };
                    const many_141: boolean;
                    export { many_141 as many };
                    const inverse_141: boolean;
                    export { inverse_141 as inverse };
                }
                export namespace ZDimAsString {
                    const type_142: string;
                    export { type_142 as type };
                    const reference_142: boolean;
                    export { reference_142 as reference };
                    const many_142: boolean;
                    export { many_142 as many };
                    const inverse_142: boolean;
                    export { inverse_142 as inverse };
                }
                export namespace Dim_1 {
                    const type_143: string;
                    export { type_143 as type };
                    const reference_143: boolean;
                    export { reference_143 as reference };
                    const many_143: boolean;
                    export { many_143 as many };
                    const inverse_143: boolean;
                    export { inverse_143 as inverse };
                }
                export { Dim_1 as Dim };
            }
            export { fields_51 as fields };
        }
        namespace IfcBoxedHalfSpace {
            const domain_52: string;
            export { domain_52 as domain };
            const superclasses_52: string[];
            export { superclasses_52 as superclasses };
            export namespace fields_52 {
                namespace Enclosure {
                    const type_144: string;
                    export { type_144 as type };
                    const reference_144: boolean;
                    export { reference_144 as reference };
                    const many_144: boolean;
                    export { many_144 as many };
                    const inverse_144: boolean;
                    export { inverse_144 as inverse };
                }
            }
            export { fields_52 as fields };
        }
        namespace IfcBuilding {
            const domain_53: string;
            export { domain_53 as domain };
            const superclasses_53: string[];
            export { superclasses_53 as superclasses };
            export namespace fields_53 {
                namespace ElevationOfRefHeight {
                    const type_145: string;
                    export { type_145 as type };
                    const reference_145: boolean;
                    export { reference_145 as reference };
                    const many_145: boolean;
                    export { many_145 as many };
                    const inverse_145: boolean;
                    export { inverse_145 as inverse };
                }
                namespace ElevationOfRefHeightAsString {
                    const type_146: string;
                    export { type_146 as type };
                    const reference_146: boolean;
                    export { reference_146 as reference };
                    const many_146: boolean;
                    export { many_146 as many };
                    const inverse_146: boolean;
                    export { inverse_146 as inverse };
                }
                namespace ElevationOfTerrain {
                    const type_147: string;
                    export { type_147 as type };
                    const reference_147: boolean;
                    export { reference_147 as reference };
                    const many_147: boolean;
                    export { many_147 as many };
                    const inverse_147: boolean;
                    export { inverse_147 as inverse };
                }
                namespace ElevationOfTerrainAsString {
                    const type_148: string;
                    export { type_148 as type };
                    const reference_148: boolean;
                    export { reference_148 as reference };
                    const many_148: boolean;
                    export { many_148 as many };
                    const inverse_148: boolean;
                    export { inverse_148 as inverse };
                }
                namespace BuildingAddress {
                    const type_149: string;
                    export { type_149 as type };
                    const reference_149: boolean;
                    export { reference_149 as reference };
                    const many_149: boolean;
                    export { many_149 as many };
                    const inverse_149: boolean;
                    export { inverse_149 as inverse };
                }
            }
            export { fields_53 as fields };
        }
        namespace IfcBuildingElement {
            const domain_54: string;
            export { domain_54 as domain };
            const superclasses_54: string[];
            export { superclasses_54 as superclasses };
            const fields_54: {};
            export { fields_54 as fields };
        }
        namespace IfcBuildingElementComponent {
            const domain_55: string;
            export { domain_55 as domain };
            const superclasses_55: string[];
            export { superclasses_55 as superclasses };
            const fields_55: {};
            export { fields_55 as fields };
        }
        namespace IfcBuildingElementPart {
            const domain_56: string;
            export { domain_56 as domain };
            const superclasses_56: string[];
            export { superclasses_56 as superclasses };
            const fields_56: {};
            export { fields_56 as fields };
        }
        namespace IfcBuildingElementProxy {
            const domain_57: string;
            export { domain_57 as domain };
            const superclasses_57: string[];
            export { superclasses_57 as superclasses };
            export namespace fields_57 {
                namespace CompositionType {
                    const type_150: string;
                    export { type_150 as type };
                    const reference_150: boolean;
                    export { reference_150 as reference };
                    const many_150: boolean;
                    export { many_150 as many };
                    const inverse_150: boolean;
                    export { inverse_150 as inverse };
                }
            }
            export { fields_57 as fields };
        }
        namespace IfcBuildingElementProxyType {
            const domain_58: string;
            export { domain_58 as domain };
            const superclasses_58: string[];
            export { superclasses_58 as superclasses };
            export namespace fields_58 {
                export namespace PredefinedType_7 {
                    const type_151: string;
                    export { type_151 as type };
                    const reference_151: boolean;
                    export { reference_151 as reference };
                    const many_151: boolean;
                    export { many_151 as many };
                    const inverse_151: boolean;
                    export { inverse_151 as inverse };
                }
                export { PredefinedType_7 as PredefinedType };
            }
            export { fields_58 as fields };
        }
        namespace IfcBuildingElementType {
            const domain_59: string;
            export { domain_59 as domain };
            const superclasses_59: string[];
            export { superclasses_59 as superclasses };
            const fields_59: {};
            export { fields_59 as fields };
        }
        namespace IfcBuildingStorey {
            const domain_60: string;
            export { domain_60 as domain };
            const superclasses_60: string[];
            export { superclasses_60 as superclasses };
            export namespace fields_60 {
                namespace Elevation {
                    const type_152: string;
                    export { type_152 as type };
                    const reference_152: boolean;
                    export { reference_152 as reference };
                    const many_152: boolean;
                    export { many_152 as many };
                    const inverse_152: boolean;
                    export { inverse_152 as inverse };
                }
                namespace ElevationAsString {
                    const type_153: string;
                    export { type_153 as type };
                    const reference_153: boolean;
                    export { reference_153 as reference };
                    const many_153: boolean;
                    export { many_153 as many };
                    const inverse_153: boolean;
                    export { inverse_153 as inverse };
                }
            }
            export { fields_60 as fields };
        }
        namespace IfcCShapeProfileDef {
            const domain_61: string;
            export { domain_61 as domain };
            const superclasses_61: string[];
            export { superclasses_61 as superclasses };
            export namespace fields_61 {
                namespace Depth {
                    const type_154: string;
                    export { type_154 as type };
                    const reference_154: boolean;
                    export { reference_154 as reference };
                    const many_154: boolean;
                    export { many_154 as many };
                    const inverse_154: boolean;
                    export { inverse_154 as inverse };
                }
                namespace DepthAsString {
                    const type_155: string;
                    export { type_155 as type };
                    const reference_155: boolean;
                    export { reference_155 as reference };
                    const many_155: boolean;
                    export { many_155 as many };
                    const inverse_155: boolean;
                    export { inverse_155 as inverse };
                }
                namespace Width {
                    const type_156: string;
                    export { type_156 as type };
                    const reference_156: boolean;
                    export { reference_156 as reference };
                    const many_156: boolean;
                    export { many_156 as many };
                    const inverse_156: boolean;
                    export { inverse_156 as inverse };
                }
                namespace WidthAsString {
                    const type_157: string;
                    export { type_157 as type };
                    const reference_157: boolean;
                    export { reference_157 as reference };
                    const many_157: boolean;
                    export { many_157 as many };
                    const inverse_157: boolean;
                    export { inverse_157 as inverse };
                }
                namespace WallThickness {
                    const type_158: string;
                    export { type_158 as type };
                    const reference_158: boolean;
                    export { reference_158 as reference };
                    const many_158: boolean;
                    export { many_158 as many };
                    const inverse_158: boolean;
                    export { inverse_158 as inverse };
                }
                namespace WallThicknessAsString {
                    const type_159: string;
                    export { type_159 as type };
                    const reference_159: boolean;
                    export { reference_159 as reference };
                    const many_159: boolean;
                    export { many_159 as many };
                    const inverse_159: boolean;
                    export { inverse_159 as inverse };
                }
                namespace Girth {
                    const type_160: string;
                    export { type_160 as type };
                    const reference_160: boolean;
                    export { reference_160 as reference };
                    const many_160: boolean;
                    export { many_160 as many };
                    const inverse_160: boolean;
                    export { inverse_160 as inverse };
                }
                namespace GirthAsString {
                    const type_161: string;
                    export { type_161 as type };
                    const reference_161: boolean;
                    export { reference_161 as reference };
                    const many_161: boolean;
                    export { many_161 as many };
                    const inverse_161: boolean;
                    export { inverse_161 as inverse };
                }
                namespace InternalFilletRadius {
                    const type_162: string;
                    export { type_162 as type };
                    const reference_162: boolean;
                    export { reference_162 as reference };
                    const many_162: boolean;
                    export { many_162 as many };
                    const inverse_162: boolean;
                    export { inverse_162 as inverse };
                }
                namespace InternalFilletRadiusAsString {
                    const type_163: string;
                    export { type_163 as type };
                    const reference_163: boolean;
                    export { reference_163 as reference };
                    const many_163: boolean;
                    export { many_163 as many };
                    const inverse_163: boolean;
                    export { inverse_163 as inverse };
                }
                namespace CentreOfGravityInX {
                    const type_164: string;
                    export { type_164 as type };
                    const reference_164: boolean;
                    export { reference_164 as reference };
                    const many_164: boolean;
                    export { many_164 as many };
                    const inverse_164: boolean;
                    export { inverse_164 as inverse };
                }
                namespace CentreOfGravityInXAsString {
                    const type_165: string;
                    export { type_165 as type };
                    const reference_165: boolean;
                    export { reference_165 as reference };
                    const many_165: boolean;
                    export { many_165 as many };
                    const inverse_165: boolean;
                    export { inverse_165 as inverse };
                }
            }
            export { fields_61 as fields };
        }
        namespace IfcCableCarrierFittingType {
            const domain_62: string;
            export { domain_62 as domain };
            const superclasses_62: string[];
            export { superclasses_62 as superclasses };
            export namespace fields_62 {
                export namespace PredefinedType_8 {
                    const type_166: string;
                    export { type_166 as type };
                    const reference_166: boolean;
                    export { reference_166 as reference };
                    const many_166: boolean;
                    export { many_166 as many };
                    const inverse_166: boolean;
                    export { inverse_166 as inverse };
                }
                export { PredefinedType_8 as PredefinedType };
            }
            export { fields_62 as fields };
        }
        namespace IfcCableCarrierSegmentType {
            const domain_63: string;
            export { domain_63 as domain };
            const superclasses_63: string[];
            export { superclasses_63 as superclasses };
            export namespace fields_63 {
                export namespace PredefinedType_9 {
                    const type_167: string;
                    export { type_167 as type };
                    const reference_167: boolean;
                    export { reference_167 as reference };
                    const many_167: boolean;
                    export { many_167 as many };
                    const inverse_167: boolean;
                    export { inverse_167 as inverse };
                }
                export { PredefinedType_9 as PredefinedType };
            }
            export { fields_63 as fields };
        }
        namespace IfcCableSegmentType {
            const domain_64: string;
            export { domain_64 as domain };
            const superclasses_64: string[];
            export { superclasses_64 as superclasses };
            export namespace fields_64 {
                export namespace PredefinedType_10 {
                    const type_168: string;
                    export { type_168 as type };
                    const reference_168: boolean;
                    export { reference_168 as reference };
                    const many_168: boolean;
                    export { many_168 as many };
                    const inverse_168: boolean;
                    export { inverse_168 as inverse };
                }
                export { PredefinedType_10 as PredefinedType };
            }
            export { fields_64 as fields };
        }
        namespace IfcCalendarDate {
            const domain_65: string;
            export { domain_65 as domain };
            const superclasses_65: string[];
            export { superclasses_65 as superclasses };
            export namespace fields_65 {
                namespace DayComponent {
                    const type_169: string;
                    export { type_169 as type };
                    const reference_169: boolean;
                    export { reference_169 as reference };
                    const many_169: boolean;
                    export { many_169 as many };
                    const inverse_169: boolean;
                    export { inverse_169 as inverse };
                }
                namespace MonthComponent {
                    const type_170: string;
                    export { type_170 as type };
                    const reference_170: boolean;
                    export { reference_170 as reference };
                    const many_170: boolean;
                    export { many_170 as many };
                    const inverse_170: boolean;
                    export { inverse_170 as inverse };
                }
                namespace YearComponent {
                    const type_171: string;
                    export { type_171 as type };
                    const reference_171: boolean;
                    export { reference_171 as reference };
                    const many_171: boolean;
                    export { many_171 as many };
                    const inverse_171: boolean;
                    export { inverse_171 as inverse };
                }
            }
            export { fields_65 as fields };
        }
        namespace IfcCartesianPoint {
            const domain_66: string;
            export { domain_66 as domain };
            const superclasses_66: string[];
            export { superclasses_66 as superclasses };
            export namespace fields_66 {
                export namespace Coordinates {
                    const type_172: string;
                    export { type_172 as type };
                    const reference_172: boolean;
                    export { reference_172 as reference };
                    const many_172: boolean;
                    export { many_172 as many };
                    const inverse_172: boolean;
                    export { inverse_172 as inverse };
                }
                export namespace CoordinatesAsString {
                    const type_173: string;
                    export { type_173 as type };
                    const reference_173: boolean;
                    export { reference_173 as reference };
                    const many_173: boolean;
                    export { many_173 as many };
                    const inverse_173: boolean;
                    export { inverse_173 as inverse };
                }
                export namespace Dim_2 {
                    const type_174: string;
                    export { type_174 as type };
                    const reference_174: boolean;
                    export { reference_174 as reference };
                    const many_174: boolean;
                    export { many_174 as many };
                    const inverse_174: boolean;
                    export { inverse_174 as inverse };
                }
                export { Dim_2 as Dim };
            }
            export { fields_66 as fields };
        }
        namespace IfcCartesianTransformationOperator {
            const domain_67: string;
            export { domain_67 as domain };
            const superclasses_67: string[];
            export { superclasses_67 as superclasses };
            export namespace fields_67 {
                export namespace Axis1 {
                    const type_175: string;
                    export { type_175 as type };
                    const reference_175: boolean;
                    export { reference_175 as reference };
                    const many_175: boolean;
                    export { many_175 as many };
                    const inverse_175: boolean;
                    export { inverse_175 as inverse };
                }
                export namespace Axis2 {
                    const type_176: string;
                    export { type_176 as type };
                    const reference_176: boolean;
                    export { reference_176 as reference };
                    const many_176: boolean;
                    export { many_176 as many };
                    const inverse_176: boolean;
                    export { inverse_176 as inverse };
                }
                export namespace LocalOrigin {
                    const type_177: string;
                    export { type_177 as type };
                    const reference_177: boolean;
                    export { reference_177 as reference };
                    const many_177: boolean;
                    export { many_177 as many };
                    const inverse_177: boolean;
                    export { inverse_177 as inverse };
                }
                export namespace Scale {
                    const type_178: string;
                    export { type_178 as type };
                    const reference_178: boolean;
                    export { reference_178 as reference };
                    const many_178: boolean;
                    export { many_178 as many };
                    const inverse_178: boolean;
                    export { inverse_178 as inverse };
                }
                export namespace ScaleAsString {
                    const type_179: string;
                    export { type_179 as type };
                    const reference_179: boolean;
                    export { reference_179 as reference };
                    const many_179: boolean;
                    export { many_179 as many };
                    const inverse_179: boolean;
                    export { inverse_179 as inverse };
                }
                export namespace Dim_3 {
                    const type_180: string;
                    export { type_180 as type };
                    const reference_180: boolean;
                    export { reference_180 as reference };
                    const many_180: boolean;
                    export { many_180 as many };
                    const inverse_180: boolean;
                    export { inverse_180 as inverse };
                }
                export { Dim_3 as Dim };
            }
            export { fields_67 as fields };
        }
        namespace IfcCartesianTransformationOperator2D {
            const domain_68: string;
            export { domain_68 as domain };
            const superclasses_68: string[];
            export { superclasses_68 as superclasses };
            const fields_68: {};
            export { fields_68 as fields };
        }
        namespace IfcCartesianTransformationOperator2DnonUniform {
            const domain_69: string;
            export { domain_69 as domain };
            const superclasses_69: string[];
            export { superclasses_69 as superclasses };
            export namespace fields_69 {
                namespace Scale2 {
                    const type_181: string;
                    export { type_181 as type };
                    const reference_181: boolean;
                    export { reference_181 as reference };
                    const many_181: boolean;
                    export { many_181 as many };
                    const inverse_181: boolean;
                    export { inverse_181 as inverse };
                }
                namespace Scale2AsString {
                    const type_182: string;
                    export { type_182 as type };
                    const reference_182: boolean;
                    export { reference_182 as reference };
                    const many_182: boolean;
                    export { many_182 as many };
                    const inverse_182: boolean;
                    export { inverse_182 as inverse };
                }
            }
            export { fields_69 as fields };
        }
        namespace IfcCartesianTransformationOperator3D {
            const domain_70: string;
            export { domain_70 as domain };
            const superclasses_70: string[];
            export { superclasses_70 as superclasses };
            export namespace fields_70 {
                namespace Axis3 {
                    const type_183: string;
                    export { type_183 as type };
                    const reference_183: boolean;
                    export { reference_183 as reference };
                    const many_183: boolean;
                    export { many_183 as many };
                    const inverse_183: boolean;
                    export { inverse_183 as inverse };
                }
            }
            export { fields_70 as fields };
        }
        namespace IfcCartesianTransformationOperator3DnonUniform {
            const domain_71: string;
            export { domain_71 as domain };
            const superclasses_71: string[];
            export { superclasses_71 as superclasses };
            export namespace fields_71 {
                export namespace Scale2_1 {
                    const type_184: string;
                    export { type_184 as type };
                    const reference_184: boolean;
                    export { reference_184 as reference };
                    const many_184: boolean;
                    export { many_184 as many };
                    const inverse_184: boolean;
                    export { inverse_184 as inverse };
                }
                export { Scale2_1 as Scale2 };
                export namespace Scale2AsString_1 {
                    const type_185: string;
                    export { type_185 as type };
                    const reference_185: boolean;
                    export { reference_185 as reference };
                    const many_185: boolean;
                    export { many_185 as many };
                    const inverse_185: boolean;
                    export { inverse_185 as inverse };
                }
                export { Scale2AsString_1 as Scale2AsString };
                export namespace Scale3 {
                    const type_186: string;
                    export { type_186 as type };
                    const reference_186: boolean;
                    export { reference_186 as reference };
                    const many_186: boolean;
                    export { many_186 as many };
                    const inverse_186: boolean;
                    export { inverse_186 as inverse };
                }
                export namespace Scale3AsString {
                    const type_187: string;
                    export { type_187 as type };
                    const reference_187: boolean;
                    export { reference_187 as reference };
                    const many_187: boolean;
                    export { many_187 as many };
                    const inverse_187: boolean;
                    export { inverse_187 as inverse };
                }
            }
            export { fields_71 as fields };
        }
        namespace IfcCenterLineProfileDef {
            const domain_72: string;
            export { domain_72 as domain };
            const superclasses_72: string[];
            export { superclasses_72 as superclasses };
            export namespace fields_72 {
                namespace Thickness {
                    const type_188: string;
                    export { type_188 as type };
                    const reference_188: boolean;
                    export { reference_188 as reference };
                    const many_188: boolean;
                    export { many_188 as many };
                    const inverse_188: boolean;
                    export { inverse_188 as inverse };
                }
                namespace ThicknessAsString {
                    const type_189: string;
                    export { type_189 as type };
                    const reference_189: boolean;
                    export { reference_189 as reference };
                    const many_189: boolean;
                    export { many_189 as many };
                    const inverse_189: boolean;
                    export { inverse_189 as inverse };
                }
            }
            export { fields_72 as fields };
        }
        namespace IfcChamferEdgeFeature {
            const domain_73: string;
            export { domain_73 as domain };
            const superclasses_73: string[];
            export { superclasses_73 as superclasses };
            export namespace fields_73 {
                export namespace Width_1 {
                    const type_190: string;
                    export { type_190 as type };
                    const reference_190: boolean;
                    export { reference_190 as reference };
                    const many_190: boolean;
                    export { many_190 as many };
                    const inverse_190: boolean;
                    export { inverse_190 as inverse };
                }
                export { Width_1 as Width };
                export namespace WidthAsString_1 {
                    const type_191: string;
                    export { type_191 as type };
                    const reference_191: boolean;
                    export { reference_191 as reference };
                    const many_191: boolean;
                    export { many_191 as many };
                    const inverse_191: boolean;
                    export { inverse_191 as inverse };
                }
                export { WidthAsString_1 as WidthAsString };
                export namespace Height {
                    const type_192: string;
                    export { type_192 as type };
                    const reference_192: boolean;
                    export { reference_192 as reference };
                    const many_192: boolean;
                    export { many_192 as many };
                    const inverse_192: boolean;
                    export { inverse_192 as inverse };
                }
                export namespace HeightAsString {
                    const type_193: string;
                    export { type_193 as type };
                    const reference_193: boolean;
                    export { reference_193 as reference };
                    const many_193: boolean;
                    export { many_193 as many };
                    const inverse_193: boolean;
                    export { inverse_193 as inverse };
                }
            }
            export { fields_73 as fields };
        }
        namespace IfcChillerType {
            const domain_74: string;
            export { domain_74 as domain };
            const superclasses_74: string[];
            export { superclasses_74 as superclasses };
            export namespace fields_74 {
                export namespace PredefinedType_11 {
                    const type_194: string;
                    export { type_194 as type };
                    const reference_194: boolean;
                    export { reference_194 as reference };
                    const many_194: boolean;
                    export { many_194 as many };
                    const inverse_194: boolean;
                    export { inverse_194 as inverse };
                }
                export { PredefinedType_11 as PredefinedType };
            }
            export { fields_74 as fields };
        }
        namespace IfcCircle {
            const domain_75: string;
            export { domain_75 as domain };
            const superclasses_75: string[];
            export { superclasses_75 as superclasses };
            export namespace fields_75 {
                namespace Radius {
                    const type_195: string;
                    export { type_195 as type };
                    const reference_195: boolean;
                    export { reference_195 as reference };
                    const many_195: boolean;
                    export { many_195 as many };
                    const inverse_195: boolean;
                    export { inverse_195 as inverse };
                }
                namespace RadiusAsString {
                    const type_196: string;
                    export { type_196 as type };
                    const reference_196: boolean;
                    export { reference_196 as reference };
                    const many_196: boolean;
                    export { many_196 as many };
                    const inverse_196: boolean;
                    export { inverse_196 as inverse };
                }
            }
            export { fields_75 as fields };
        }
        namespace IfcCircleHollowProfileDef {
            const domain_76: string;
            export { domain_76 as domain };
            const superclasses_76: string[];
            export { superclasses_76 as superclasses };
            export namespace fields_76 {
                export namespace WallThickness_1 {
                    const type_197: string;
                    export { type_197 as type };
                    const reference_197: boolean;
                    export { reference_197 as reference };
                    const many_197: boolean;
                    export { many_197 as many };
                    const inverse_197: boolean;
                    export { inverse_197 as inverse };
                }
                export { WallThickness_1 as WallThickness };
                export namespace WallThicknessAsString_1 {
                    const type_198: string;
                    export { type_198 as type };
                    const reference_198: boolean;
                    export { reference_198 as reference };
                    const many_198: boolean;
                    export { many_198 as many };
                    const inverse_198: boolean;
                    export { inverse_198 as inverse };
                }
                export { WallThicknessAsString_1 as WallThicknessAsString };
            }
            export { fields_76 as fields };
        }
        namespace IfcCircleProfileDef {
            const domain_77: string;
            export { domain_77 as domain };
            const superclasses_77: string[];
            export { superclasses_77 as superclasses };
            export namespace fields_77 {
                export namespace Radius_1 {
                    const type_199: string;
                    export { type_199 as type };
                    const reference_199: boolean;
                    export { reference_199 as reference };
                    const many_199: boolean;
                    export { many_199 as many };
                    const inverse_199: boolean;
                    export { inverse_199 as inverse };
                }
                export { Radius_1 as Radius };
                export namespace RadiusAsString_1 {
                    const type_200: string;
                    export { type_200 as type };
                    const reference_200: boolean;
                    export { reference_200 as reference };
                    const many_200: boolean;
                    export { many_200 as many };
                    const inverse_200: boolean;
                    export { inverse_200 as inverse };
                }
                export { RadiusAsString_1 as RadiusAsString };
            }
            export { fields_77 as fields };
        }
        namespace IfcClassification {
            const domain_78: string;
            export { domain_78 as domain };
            const superclasses_78: any[];
            export { superclasses_78 as superclasses };
            export namespace fields_78 {
                export namespace Source {
                    const type_201: string;
                    export { type_201 as type };
                    const reference_201: boolean;
                    export { reference_201 as reference };
                    const many_201: boolean;
                    export { many_201 as many };
                    const inverse_201: boolean;
                    export { inverse_201 as inverse };
                }
                export namespace Edition {
                    const type_202: string;
                    export { type_202 as type };
                    const reference_202: boolean;
                    export { reference_202 as reference };
                    const many_202: boolean;
                    export { many_202 as many };
                    const inverse_202: boolean;
                    export { inverse_202 as inverse };
                }
                export namespace EditionDate {
                    const type_203: string;
                    export { type_203 as type };
                    const reference_203: boolean;
                    export { reference_203 as reference };
                    const many_203: boolean;
                    export { many_203 as many };
                    const inverse_203: boolean;
                    export { inverse_203 as inverse };
                }
                export namespace Name_5 {
                    const type_204: string;
                    export { type_204 as type };
                    const reference_204: boolean;
                    export { reference_204 as reference };
                    const many_204: boolean;
                    export { many_204 as many };
                    const inverse_204: boolean;
                    export { inverse_204 as inverse };
                }
                export { Name_5 as Name };
                export namespace Contains {
                    const type_205: string;
                    export { type_205 as type };
                    const reference_205: boolean;
                    export { reference_205 as reference };
                    const many_205: boolean;
                    export { many_205 as many };
                    const inverse_205: boolean;
                    export { inverse_205 as inverse };
                }
            }
            export { fields_78 as fields };
        }
        namespace IfcClassificationItem {
            const domain_79: string;
            export { domain_79 as domain };
            const superclasses_79: any[];
            export { superclasses_79 as superclasses };
            export namespace fields_79 {
                namespace Notation {
                    const type_206: string;
                    export { type_206 as type };
                    const reference_206: boolean;
                    export { reference_206 as reference };
                    const many_206: boolean;
                    export { many_206 as many };
                    const inverse_206: boolean;
                    export { inverse_206 as inverse };
                }
                namespace ItemOf {
                    const type_207: string;
                    export { type_207 as type };
                    const reference_207: boolean;
                    export { reference_207 as reference };
                    const many_207: boolean;
                    export { many_207 as many };
                    const inverse_207: boolean;
                    export { inverse_207 as inverse };
                }
                namespace Title {
                    const type_208: string;
                    export { type_208 as type };
                    const reference_208: boolean;
                    export { reference_208 as reference };
                    const many_208: boolean;
                    export { many_208 as many };
                    const inverse_208: boolean;
                    export { inverse_208 as inverse };
                }
                namespace IsClassifiedItemIn {
                    const type_209: string;
                    export { type_209 as type };
                    const reference_209: boolean;
                    export { reference_209 as reference };
                    const many_209: boolean;
                    export { many_209 as many };
                    const inverse_209: boolean;
                    export { inverse_209 as inverse };
                }
                namespace IsClassifyingItemIn {
                    const type_210: string;
                    export { type_210 as type };
                    const reference_210: boolean;
                    export { reference_210 as reference };
                    const many_210: boolean;
                    export { many_210 as many };
                    const inverse_210: boolean;
                    export { inverse_210 as inverse };
                }
            }
            export { fields_79 as fields };
        }
        namespace IfcClassificationItemRelationship {
            const domain_80: string;
            export { domain_80 as domain };
            const superclasses_80: any[];
            export { superclasses_80 as superclasses };
            export namespace fields_80 {
                namespace RelatingItem {
                    const type_211: string;
                    export { type_211 as type };
                    const reference_211: boolean;
                    export { reference_211 as reference };
                    const many_211: boolean;
                    export { many_211 as many };
                    const inverse_211: boolean;
                    export { inverse_211 as inverse };
                }
                namespace RelatedItems {
                    const type_212: string;
                    export { type_212 as type };
                    const reference_212: boolean;
                    export { reference_212 as reference };
                    const many_212: boolean;
                    export { many_212 as many };
                    const inverse_212: boolean;
                    export { inverse_212 as inverse };
                }
            }
            export { fields_80 as fields };
        }
        namespace IfcClassificationNotation {
            const domain_81: string;
            export { domain_81 as domain };
            const superclasses_81: string[];
            export { superclasses_81 as superclasses };
            export namespace fields_81 {
                namespace NotationFacets {
                    const type_213: string;
                    export { type_213 as type };
                    const reference_213: boolean;
                    export { reference_213 as reference };
                    const many_213: boolean;
                    export { many_213 as many };
                    const inverse_213: boolean;
                    export { inverse_213 as inverse };
                }
            }
            export { fields_81 as fields };
        }
        namespace IfcClassificationNotationFacet {
            const domain_82: string;
            export { domain_82 as domain };
            const superclasses_82: any[];
            export { superclasses_82 as superclasses };
            export namespace fields_82 {
                namespace NotationValue {
                    const type_214: string;
                    export { type_214 as type };
                    const reference_214: boolean;
                    export { reference_214 as reference };
                    const many_214: boolean;
                    export { many_214 as many };
                    const inverse_214: boolean;
                    export { inverse_214 as inverse };
                }
            }
            export { fields_82 as fields };
        }
        namespace IfcClassificationReference {
            const domain_83: string;
            export { domain_83 as domain };
            const superclasses_83: string[];
            export { superclasses_83 as superclasses };
            export namespace fields_83 {
                namespace ReferencedSource {
                    const type_215: string;
                    export { type_215 as type };
                    const reference_215: boolean;
                    export { reference_215 as reference };
                    const many_215: boolean;
                    export { many_215 as many };
                    const inverse_215: boolean;
                    export { inverse_215 as inverse };
                }
            }
            export { fields_83 as fields };
        }
        namespace IfcClosedShell {
            const domain_84: string;
            export { domain_84 as domain };
            const superclasses_84: string[];
            export { superclasses_84 as superclasses };
            const fields_84: {};
            export { fields_84 as fields };
        }
        namespace IfcCoilType {
            const domain_85: string;
            export { domain_85 as domain };
            const superclasses_85: string[];
            export { superclasses_85 as superclasses };
            export namespace fields_85 {
                export namespace PredefinedType_12 {
                    const type_216: string;
                    export { type_216 as type };
                    const reference_216: boolean;
                    export { reference_216 as reference };
                    const many_216: boolean;
                    export { many_216 as many };
                    const inverse_216: boolean;
                    export { inverse_216 as inverse };
                }
                export { PredefinedType_12 as PredefinedType };
            }
            export { fields_85 as fields };
        }
        namespace IfcColourRgb {
            const domain_86: string;
            export { domain_86 as domain };
            const superclasses_86: string[];
            export { superclasses_86 as superclasses };
            export namespace fields_86 {
                namespace Red {
                    const type_217: string;
                    export { type_217 as type };
                    const reference_217: boolean;
                    export { reference_217 as reference };
                    const many_217: boolean;
                    export { many_217 as many };
                    const inverse_217: boolean;
                    export { inverse_217 as inverse };
                }
                namespace RedAsString {
                    const type_218: string;
                    export { type_218 as type };
                    const reference_218: boolean;
                    export { reference_218 as reference };
                    const many_218: boolean;
                    export { many_218 as many };
                    const inverse_218: boolean;
                    export { inverse_218 as inverse };
                }
                namespace Green {
                    const type_219: string;
                    export { type_219 as type };
                    const reference_219: boolean;
                    export { reference_219 as reference };
                    const many_219: boolean;
                    export { many_219 as many };
                    const inverse_219: boolean;
                    export { inverse_219 as inverse };
                }
                namespace GreenAsString {
                    const type_220: string;
                    export { type_220 as type };
                    const reference_220: boolean;
                    export { reference_220 as reference };
                    const many_220: boolean;
                    export { many_220 as many };
                    const inverse_220: boolean;
                    export { inverse_220 as inverse };
                }
                namespace Blue {
                    const type_221: string;
                    export { type_221 as type };
                    const reference_221: boolean;
                    export { reference_221 as reference };
                    const many_221: boolean;
                    export { many_221 as many };
                    const inverse_221: boolean;
                    export { inverse_221 as inverse };
                }
                namespace BlueAsString {
                    const type_222: string;
                    export { type_222 as type };
                    const reference_222: boolean;
                    export { reference_222 as reference };
                    const many_222: boolean;
                    export { many_222 as many };
                    const inverse_222: boolean;
                    export { inverse_222 as inverse };
                }
            }
            export { fields_86 as fields };
        }
        namespace IfcColourSpecification {
            const domain_87: string;
            export { domain_87 as domain };
            const superclasses_87: string[];
            export { superclasses_87 as superclasses };
            export namespace fields_87 {
                export namespace Name_6 {
                    const type_223: string;
                    export { type_223 as type };
                    const reference_223: boolean;
                    export { reference_223 as reference };
                    const many_223: boolean;
                    export { many_223 as many };
                    const inverse_223: boolean;
                    export { inverse_223 as inverse };
                }
                export { Name_6 as Name };
            }
            export { fields_87 as fields };
        }
        namespace IfcColumn {
            const domain_88: string;
            export { domain_88 as domain };
            const superclasses_88: string[];
            export { superclasses_88 as superclasses };
            const fields_88: {};
            export { fields_88 as fields };
        }
        namespace IfcColumnType {
            const domain_89: string;
            export { domain_89 as domain };
            const superclasses_89: string[];
            export { superclasses_89 as superclasses };
            export namespace fields_89 {
                export namespace PredefinedType_13 {
                    const type_224: string;
                    export { type_224 as type };
                    const reference_224: boolean;
                    export { reference_224 as reference };
                    const many_224: boolean;
                    export { many_224 as many };
                    const inverse_224: boolean;
                    export { inverse_224 as inverse };
                }
                export { PredefinedType_13 as PredefinedType };
            }
            export { fields_89 as fields };
        }
        namespace IfcComplexProperty {
            const domain_90: string;
            export { domain_90 as domain };
            const superclasses_90: string[];
            export { superclasses_90 as superclasses };
            export namespace fields_90 {
                namespace UsageName {
                    const type_225: string;
                    export { type_225 as type };
                    const reference_225: boolean;
                    export { reference_225 as reference };
                    const many_225: boolean;
                    export { many_225 as many };
                    const inverse_225: boolean;
                    export { inverse_225 as inverse };
                }
                namespace HasProperties {
                    const type_226: string;
                    export { type_226 as type };
                    const reference_226: boolean;
                    export { reference_226 as reference };
                    const many_226: boolean;
                    export { many_226 as many };
                    const inverse_226: boolean;
                    export { inverse_226 as inverse };
                }
            }
            export { fields_90 as fields };
        }
        namespace IfcCompositeCurve {
            const domain_91: string;
            export { domain_91 as domain };
            const superclasses_91: string[];
            export { superclasses_91 as superclasses };
            export namespace fields_91 {
                export namespace Segments {
                    const type_227: string;
                    export { type_227 as type };
                    const reference_227: boolean;
                    export { reference_227 as reference };
                    const many_227: boolean;
                    export { many_227 as many };
                    const inverse_227: boolean;
                    export { inverse_227 as inverse };
                }
                export namespace SelfIntersect_1 {
                    const type_228: string;
                    export { type_228 as type };
                    const reference_228: boolean;
                    export { reference_228 as reference };
                    const many_228: boolean;
                    export { many_228 as many };
                    const inverse_228: boolean;
                    export { inverse_228 as inverse };
                }
                export { SelfIntersect_1 as SelfIntersect };
            }
            export { fields_91 as fields };
        }
        namespace IfcCompositeCurveSegment {
            const domain_92: string;
            export { domain_92 as domain };
            const superclasses_92: string[];
            export { superclasses_92 as superclasses };
            export namespace fields_92 {
                export namespace Transition {
                    const type_229: string;
                    export { type_229 as type };
                    const reference_229: boolean;
                    export { reference_229 as reference };
                    const many_229: boolean;
                    export { many_229 as many };
                    const inverse_229: boolean;
                    export { inverse_229 as inverse };
                }
                export namespace SameSense {
                    const type_230: string;
                    export { type_230 as type };
                    const reference_230: boolean;
                    export { reference_230 as reference };
                    const many_230: boolean;
                    export { many_230 as many };
                    const inverse_230: boolean;
                    export { inverse_230 as inverse };
                }
                export namespace ParentCurve {
                    const type_231: string;
                    export { type_231 as type };
                    const reference_231: boolean;
                    export { reference_231 as reference };
                    const many_231: boolean;
                    export { many_231 as many };
                    const inverse_231: boolean;
                    export { inverse_231 as inverse };
                }
                export namespace UsingCurves {
                    const type_232: string;
                    export { type_232 as type };
                    const reference_232: boolean;
                    export { reference_232 as reference };
                    const many_232: boolean;
                    export { many_232 as many };
                    const inverse_232: boolean;
                    export { inverse_232 as inverse };
                }
                export namespace Dim_4 {
                    const type_233: string;
                    export { type_233 as type };
                    const reference_233: boolean;
                    export { reference_233 as reference };
                    const many_233: boolean;
                    export { many_233 as many };
                    const inverse_233: boolean;
                    export { inverse_233 as inverse };
                }
                export { Dim_4 as Dim };
            }
            export { fields_92 as fields };
        }
        namespace IfcCompositeProfileDef {
            const domain_93: string;
            export { domain_93 as domain };
            const superclasses_93: string[];
            export { superclasses_93 as superclasses };
            export namespace fields_93 {
                namespace Profiles {
                    const type_234: string;
                    export { type_234 as type };
                    const reference_234: boolean;
                    export { reference_234 as reference };
                    const many_234: boolean;
                    export { many_234 as many };
                    const inverse_234: boolean;
                    export { inverse_234 as inverse };
                }
                namespace Label {
                    const type_235: string;
                    export { type_235 as type };
                    const reference_235: boolean;
                    export { reference_235 as reference };
                    const many_235: boolean;
                    export { many_235 as many };
                    const inverse_235: boolean;
                    export { inverse_235 as inverse };
                }
            }
            export { fields_93 as fields };
        }
        namespace IfcCompressorType {
            const domain_94: string;
            export { domain_94 as domain };
            const superclasses_94: string[];
            export { superclasses_94 as superclasses };
            export namespace fields_94 {
                export namespace PredefinedType_14 {
                    const type_236: string;
                    export { type_236 as type };
                    const reference_236: boolean;
                    export { reference_236 as reference };
                    const many_236: boolean;
                    export { many_236 as many };
                    const inverse_236: boolean;
                    export { inverse_236 as inverse };
                }
                export { PredefinedType_14 as PredefinedType };
            }
            export { fields_94 as fields };
        }
        namespace IfcCondenserType {
            const domain_95: string;
            export { domain_95 as domain };
            const superclasses_95: string[];
            export { superclasses_95 as superclasses };
            export namespace fields_95 {
                export namespace PredefinedType_15 {
                    const type_237: string;
                    export { type_237 as type };
                    const reference_237: boolean;
                    export { reference_237 as reference };
                    const many_237: boolean;
                    export { many_237 as many };
                    const inverse_237: boolean;
                    export { inverse_237 as inverse };
                }
                export { PredefinedType_15 as PredefinedType };
            }
            export { fields_95 as fields };
        }
        namespace IfcCondition {
            const domain_96: string;
            export { domain_96 as domain };
            const superclasses_96: string[];
            export { superclasses_96 as superclasses };
            const fields_96: {};
            export { fields_96 as fields };
        }
        namespace IfcConditionCriterion {
            const domain_97: string;
            export { domain_97 as domain };
            const superclasses_97: string[];
            export { superclasses_97 as superclasses };
            export namespace fields_97 {
                namespace Criterion {
                    const type_238: string;
                    export { type_238 as type };
                    const reference_238: boolean;
                    export { reference_238 as reference };
                    const many_238: boolean;
                    export { many_238 as many };
                    const inverse_238: boolean;
                    export { inverse_238 as inverse };
                }
                namespace CriterionDateTime {
                    const type_239: string;
                    export { type_239 as type };
                    const reference_239: boolean;
                    export { reference_239 as reference };
                    const many_239: boolean;
                    export { many_239 as many };
                    const inverse_239: boolean;
                    export { inverse_239 as inverse };
                }
            }
            export { fields_97 as fields };
        }
        namespace IfcConic {
            const domain_98: string;
            export { domain_98 as domain };
            const superclasses_98: string[];
            export { superclasses_98 as superclasses };
            export namespace fields_98 {
                namespace Position {
                    const type_240: string;
                    export { type_240 as type };
                    const reference_240: boolean;
                    export { reference_240 as reference };
                    const many_240: boolean;
                    export { many_240 as many };
                    const inverse_240: boolean;
                    export { inverse_240 as inverse };
                }
            }
            export { fields_98 as fields };
        }
        namespace IfcConnectedFaceSet {
            const domain_99: string;
            export { domain_99 as domain };
            const superclasses_99: string[];
            export { superclasses_99 as superclasses };
            export namespace fields_99 {
                namespace CfsFaces {
                    const type_241: string;
                    export { type_241 as type };
                    const reference_241: boolean;
                    export { reference_241 as reference };
                    const many_241: boolean;
                    export { many_241 as many };
                    const inverse_241: boolean;
                    export { inverse_241 as inverse };
                }
            }
            export { fields_99 as fields };
        }
        namespace IfcConnectionCurveGeometry {
            const domain_100: string;
            export { domain_100 as domain };
            const superclasses_100: string[];
            export { superclasses_100 as superclasses };
            export namespace fields_100 {
                namespace CurveOnRelatingElement {
                    const type_242: string;
                    export { type_242 as type };
                    const reference_242: boolean;
                    export { reference_242 as reference };
                    const many_242: boolean;
                    export { many_242 as many };
                    const inverse_242: boolean;
                    export { inverse_242 as inverse };
                }
                namespace CurveOnRelatedElement {
                    const type_243: string;
                    export { type_243 as type };
                    const reference_243: boolean;
                    export { reference_243 as reference };
                    const many_243: boolean;
                    export { many_243 as many };
                    const inverse_243: boolean;
                    export { inverse_243 as inverse };
                }
            }
            export { fields_100 as fields };
        }
        namespace IfcConnectionGeometry {
            const domain_101: string;
            export { domain_101 as domain };
            const superclasses_101: any[];
            export { superclasses_101 as superclasses };
            const fields_101: {};
            export { fields_101 as fields };
        }
        namespace IfcConnectionPointEccentricity {
            const domain_102: string;
            export { domain_102 as domain };
            const superclasses_102: string[];
            export { superclasses_102 as superclasses };
            export namespace fields_102 {
                namespace EccentricityInX {
                    const type_244: string;
                    export { type_244 as type };
                    const reference_244: boolean;
                    export { reference_244 as reference };
                    const many_244: boolean;
                    export { many_244 as many };
                    const inverse_244: boolean;
                    export { inverse_244 as inverse };
                }
                namespace EccentricityInXAsString {
                    const type_245: string;
                    export { type_245 as type };
                    const reference_245: boolean;
                    export { reference_245 as reference };
                    const many_245: boolean;
                    export { many_245 as many };
                    const inverse_245: boolean;
                    export { inverse_245 as inverse };
                }
                namespace EccentricityInY {
                    const type_246: string;
                    export { type_246 as type };
                    const reference_246: boolean;
                    export { reference_246 as reference };
                    const many_246: boolean;
                    export { many_246 as many };
                    const inverse_246: boolean;
                    export { inverse_246 as inverse };
                }
                namespace EccentricityInYAsString {
                    const type_247: string;
                    export { type_247 as type };
                    const reference_247: boolean;
                    export { reference_247 as reference };
                    const many_247: boolean;
                    export { many_247 as many };
                    const inverse_247: boolean;
                    export { inverse_247 as inverse };
                }
                namespace EccentricityInZ {
                    const type_248: string;
                    export { type_248 as type };
                    const reference_248: boolean;
                    export { reference_248 as reference };
                    const many_248: boolean;
                    export { many_248 as many };
                    const inverse_248: boolean;
                    export { inverse_248 as inverse };
                }
                namespace EccentricityInZAsString {
                    const type_249: string;
                    export { type_249 as type };
                    const reference_249: boolean;
                    export { reference_249 as reference };
                    const many_249: boolean;
                    export { many_249 as many };
                    const inverse_249: boolean;
                    export { inverse_249 as inverse };
                }
            }
            export { fields_102 as fields };
        }
        namespace IfcConnectionPointGeometry {
            const domain_103: string;
            export { domain_103 as domain };
            const superclasses_103: string[];
            export { superclasses_103 as superclasses };
            export namespace fields_103 {
                namespace PointOnRelatingElement {
                    const type_250: string;
                    export { type_250 as type };
                    const reference_250: boolean;
                    export { reference_250 as reference };
                    const many_250: boolean;
                    export { many_250 as many };
                    const inverse_250: boolean;
                    export { inverse_250 as inverse };
                }
                namespace PointOnRelatedElement {
                    const type_251: string;
                    export { type_251 as type };
                    const reference_251: boolean;
                    export { reference_251 as reference };
                    const many_251: boolean;
                    export { many_251 as many };
                    const inverse_251: boolean;
                    export { inverse_251 as inverse };
                }
            }
            export { fields_103 as fields };
        }
        namespace IfcConnectionPortGeometry {
            const domain_104: string;
            export { domain_104 as domain };
            const superclasses_104: string[];
            export { superclasses_104 as superclasses };
            export namespace fields_104 {
                namespace LocationAtRelatingElement {
                    const type_252: string;
                    export { type_252 as type };
                    const reference_252: boolean;
                    export { reference_252 as reference };
                    const many_252: boolean;
                    export { many_252 as many };
                    const inverse_252: boolean;
                    export { inverse_252 as inverse };
                }
                namespace LocationAtRelatedElement {
                    const type_253: string;
                    export { type_253 as type };
                    const reference_253: boolean;
                    export { reference_253 as reference };
                    const many_253: boolean;
                    export { many_253 as many };
                    const inverse_253: boolean;
                    export { inverse_253 as inverse };
                }
                namespace ProfileOfPort {
                    const type_254: string;
                    export { type_254 as type };
                    const reference_254: boolean;
                    export { reference_254 as reference };
                    const many_254: boolean;
                    export { many_254 as many };
                    const inverse_254: boolean;
                    export { inverse_254 as inverse };
                }
            }
            export { fields_104 as fields };
        }
        namespace IfcConnectionSurfaceGeometry {
            const domain_105: string;
            export { domain_105 as domain };
            const superclasses_105: string[];
            export { superclasses_105 as superclasses };
            export namespace fields_105 {
                namespace SurfaceOnRelatingElement {
                    const type_255: string;
                    export { type_255 as type };
                    const reference_255: boolean;
                    export { reference_255 as reference };
                    const many_255: boolean;
                    export { many_255 as many };
                    const inverse_255: boolean;
                    export { inverse_255 as inverse };
                }
                namespace SurfaceOnRelatedElement {
                    const type_256: string;
                    export { type_256 as type };
                    const reference_256: boolean;
                    export { reference_256 as reference };
                    const many_256: boolean;
                    export { many_256 as many };
                    const inverse_256: boolean;
                    export { inverse_256 as inverse };
                }
            }
            export { fields_105 as fields };
        }
        namespace IfcConstraint {
            const domain_106: string;
            export { domain_106 as domain };
            const superclasses_106: any[];
            export { superclasses_106 as superclasses };
            export namespace fields_106 {
                export namespace Name_7 {
                    const type_257: string;
                    export { type_257 as type };
                    const reference_257: boolean;
                    export { reference_257 as reference };
                    const many_257: boolean;
                    export { many_257 as many };
                    const inverse_257: boolean;
                    export { inverse_257 as inverse };
                }
                export { Name_7 as Name };
                export namespace Description_6 {
                    const type_258: string;
                    export { type_258 as type };
                    const reference_258: boolean;
                    export { reference_258 as reference };
                    const many_258: boolean;
                    export { many_258 as many };
                    const inverse_258: boolean;
                    export { inverse_258 as inverse };
                }
                export { Description_6 as Description };
                export namespace ConstraintGrade {
                    const type_259: string;
                    export { type_259 as type };
                    const reference_259: boolean;
                    export { reference_259 as reference };
                    const many_259: boolean;
                    export { many_259 as many };
                    const inverse_259: boolean;
                    export { inverse_259 as inverse };
                }
                export namespace ConstraintSource {
                    const type_260: string;
                    export { type_260 as type };
                    const reference_260: boolean;
                    export { reference_260 as reference };
                    const many_260: boolean;
                    export { many_260 as many };
                    const inverse_260: boolean;
                    export { inverse_260 as inverse };
                }
                export namespace CreatingActor {
                    const type_261: string;
                    export { type_261 as type };
                    const reference_261: boolean;
                    export { reference_261 as reference };
                    const many_261: boolean;
                    export { many_261 as many };
                    const inverse_261: boolean;
                    export { inverse_261 as inverse };
                }
                export namespace CreationTime {
                    const type_262: string;
                    export { type_262 as type };
                    const reference_262: boolean;
                    export { reference_262 as reference };
                    const many_262: boolean;
                    export { many_262 as many };
                    const inverse_262: boolean;
                    export { inverse_262 as inverse };
                }
                export namespace UserDefinedGrade {
                    const type_263: string;
                    export { type_263 as type };
                    const reference_263: boolean;
                    export { reference_263 as reference };
                    const many_263: boolean;
                    export { many_263 as many };
                    const inverse_263: boolean;
                    export { inverse_263 as inverse };
                }
                export namespace ClassifiedAs {
                    const type_264: string;
                    export { type_264 as type };
                    const reference_264: boolean;
                    export { reference_264 as reference };
                    const many_264: boolean;
                    export { many_264 as many };
                    const inverse_264: boolean;
                    export { inverse_264 as inverse };
                }
                export namespace RelatesConstraints {
                    const type_265: string;
                    export { type_265 as type };
                    const reference_265: boolean;
                    export { reference_265 as reference };
                    const many_265: boolean;
                    export { many_265 as many };
                    const inverse_265: boolean;
                    export { inverse_265 as inverse };
                }
                export namespace IsRelatedWith_1 {
                    const type_266: string;
                    export { type_266 as type };
                    const reference_266: boolean;
                    export { reference_266 as reference };
                    const many_266: boolean;
                    export { many_266 as many };
                    const inverse_266: boolean;
                    export { inverse_266 as inverse };
                }
                export { IsRelatedWith_1 as IsRelatedWith };
                export namespace PropertiesForConstraint {
                    const type_267: string;
                    export { type_267 as type };
                    const reference_267: boolean;
                    export { reference_267 as reference };
                    const many_267: boolean;
                    export { many_267 as many };
                    const inverse_267: boolean;
                    export { inverse_267 as inverse };
                }
                export namespace Aggregates {
                    const type_268: string;
                    export { type_268 as type };
                    const reference_268: boolean;
                    export { reference_268 as reference };
                    const many_268: boolean;
                    export { many_268 as many };
                    const inverse_268: boolean;
                    export { inverse_268 as inverse };
                }
                export namespace IsAggregatedIn {
                    const type_269: string;
                    export { type_269 as type };
                    const reference_269: boolean;
                    export { reference_269 as reference };
                    const many_269: boolean;
                    export { many_269 as many };
                    const inverse_269: boolean;
                    export { inverse_269 as inverse };
                }
            }
            export { fields_106 as fields };
        }
        namespace IfcConstraintAggregationRelationship {
            const domain_107: string;
            export { domain_107 as domain };
            const superclasses_107: any[];
            export { superclasses_107 as superclasses };
            export namespace fields_107 {
                export namespace Name_8 {
                    const type_270: string;
                    export { type_270 as type };
                    const reference_270: boolean;
                    export { reference_270 as reference };
                    const many_270: boolean;
                    export { many_270 as many };
                    const inverse_270: boolean;
                    export { inverse_270 as inverse };
                }
                export { Name_8 as Name };
                export namespace Description_7 {
                    const type_271: string;
                    export { type_271 as type };
                    const reference_271: boolean;
                    export { reference_271 as reference };
                    const many_271: boolean;
                    export { many_271 as many };
                    const inverse_271: boolean;
                    export { inverse_271 as inverse };
                }
                export { Description_7 as Description };
                export namespace RelatingConstraint {
                    const type_272: string;
                    export { type_272 as type };
                    const reference_272: boolean;
                    export { reference_272 as reference };
                    const many_272: boolean;
                    export { many_272 as many };
                    const inverse_272: boolean;
                    export { inverse_272 as inverse };
                }
                export namespace RelatedConstraints {
                    const type_273: string;
                    export { type_273 as type };
                    const reference_273: boolean;
                    export { reference_273 as reference };
                    const many_273: boolean;
                    export { many_273 as many };
                    const inverse_273: boolean;
                    export { inverse_273 as inverse };
                }
                export namespace LogicalAggregator {
                    const type_274: string;
                    export { type_274 as type };
                    const reference_274: boolean;
                    export { reference_274 as reference };
                    const many_274: boolean;
                    export { many_274 as many };
                    const inverse_274: boolean;
                    export { inverse_274 as inverse };
                }
            }
            export { fields_107 as fields };
        }
        namespace IfcConstraintClassificationRelationship {
            const domain_108: string;
            export { domain_108 as domain };
            const superclasses_108: any[];
            export { superclasses_108 as superclasses };
            export namespace fields_108 {
                namespace ClassifiedConstraint {
                    const type_275: string;
                    export { type_275 as type };
                    const reference_275: boolean;
                    export { reference_275 as reference };
                    const many_275: boolean;
                    export { many_275 as many };
                    const inverse_275: boolean;
                    export { inverse_275 as inverse };
                }
                namespace RelatedClassifications {
                    const type_276: string;
                    export { type_276 as type };
                    const reference_276: boolean;
                    export { reference_276 as reference };
                    const many_276: boolean;
                    export { many_276 as many };
                    const inverse_276: boolean;
                    export { inverse_276 as inverse };
                }
            }
            export { fields_108 as fields };
        }
        namespace IfcConstraintRelationship {
            const domain_109: string;
            export { domain_109 as domain };
            const superclasses_109: any[];
            export { superclasses_109 as superclasses };
            export namespace fields_109 {
                export namespace Name_9 {
                    const type_277: string;
                    export { type_277 as type };
                    const reference_277: boolean;
                    export { reference_277 as reference };
                    const many_277: boolean;
                    export { many_277 as many };
                    const inverse_277: boolean;
                    export { inverse_277 as inverse };
                }
                export { Name_9 as Name };
                export namespace Description_8 {
                    const type_278: string;
                    export { type_278 as type };
                    const reference_278: boolean;
                    export { reference_278 as reference };
                    const many_278: boolean;
                    export { many_278 as many };
                    const inverse_278: boolean;
                    export { inverse_278 as inverse };
                }
                export { Description_8 as Description };
                export namespace RelatingConstraint_1 {
                    const type_279: string;
                    export { type_279 as type };
                    const reference_279: boolean;
                    export { reference_279 as reference };
                    const many_279: boolean;
                    export { many_279 as many };
                    const inverse_279: boolean;
                    export { inverse_279 as inverse };
                }
                export { RelatingConstraint_1 as RelatingConstraint };
                export namespace RelatedConstraints_1 {
                    const type_280: string;
                    export { type_280 as type };
                    const reference_280: boolean;
                    export { reference_280 as reference };
                    const many_280: boolean;
                    export { many_280 as many };
                    const inverse_280: boolean;
                    export { inverse_280 as inverse };
                }
                export { RelatedConstraints_1 as RelatedConstraints };
            }
            export { fields_109 as fields };
        }
        namespace IfcConstructionEquipmentResource {
            const domain_110: string;
            export { domain_110 as domain };
            const superclasses_110: string[];
            export { superclasses_110 as superclasses };
            const fields_110: {};
            export { fields_110 as fields };
        }
        namespace IfcConstructionMaterialResource {
            const domain_111: string;
            export { domain_111 as domain };
            const superclasses_111: string[];
            export { superclasses_111 as superclasses };
            export namespace fields_111 {
                namespace Suppliers {
                    const type_281: string;
                    export { type_281 as type };
                    const reference_281: boolean;
                    export { reference_281 as reference };
                    const many_281: boolean;
                    export { many_281 as many };
                    const inverse_281: boolean;
                    export { inverse_281 as inverse };
                }
                namespace UsageRatio {
                    const type_282: string;
                    export { type_282 as type };
                    const reference_282: boolean;
                    export { reference_282 as reference };
                    const many_282: boolean;
                    export { many_282 as many };
                    const inverse_282: boolean;
                    export { inverse_282 as inverse };
                }
                namespace UsageRatioAsString {
                    const type_283: string;
                    export { type_283 as type };
                    const reference_283: boolean;
                    export { reference_283 as reference };
                    const many_283: boolean;
                    export { many_283 as many };
                    const inverse_283: boolean;
                    export { inverse_283 as inverse };
                }
            }
            export { fields_111 as fields };
        }
        namespace IfcConstructionProductResource {
            const domain_112: string;
            export { domain_112 as domain };
            const superclasses_112: string[];
            export { superclasses_112 as superclasses };
            const fields_112: {};
            export { fields_112 as fields };
        }
        namespace IfcConstructionResource {
            const domain_113: string;
            export { domain_113 as domain };
            const superclasses_113: string[];
            export { superclasses_113 as superclasses };
            export namespace fields_113 {
                namespace ResourceIdentifier {
                    const type_284: string;
                    export { type_284 as type };
                    const reference_284: boolean;
                    export { reference_284 as reference };
                    const many_284: boolean;
                    export { many_284 as many };
                    const inverse_284: boolean;
                    export { inverse_284 as inverse };
                }
                namespace ResourceGroup {
                    const type_285: string;
                    export { type_285 as type };
                    const reference_285: boolean;
                    export { reference_285 as reference };
                    const many_285: boolean;
                    export { many_285 as many };
                    const inverse_285: boolean;
                    export { inverse_285 as inverse };
                }
                namespace ResourceConsumption {
                    const type_286: string;
                    export { type_286 as type };
                    const reference_286: boolean;
                    export { reference_286 as reference };
                    const many_286: boolean;
                    export { many_286 as many };
                    const inverse_286: boolean;
                    export { inverse_286 as inverse };
                }
                namespace BaseQuantity {
                    const type_287: string;
                    export { type_287 as type };
                    const reference_287: boolean;
                    export { reference_287 as reference };
                    const many_287: boolean;
                    export { many_287 as many };
                    const inverse_287: boolean;
                    export { inverse_287 as inverse };
                }
            }
            export { fields_113 as fields };
        }
        namespace IfcContextDependentUnit {
            const domain_114: string;
            export { domain_114 as domain };
            const superclasses_114: string[];
            export { superclasses_114 as superclasses };
            export namespace fields_114 {
                export namespace Name_10 {
                    const type_288: string;
                    export { type_288 as type };
                    const reference_288: boolean;
                    export { reference_288 as reference };
                    const many_288: boolean;
                    export { many_288 as many };
                    const inverse_288: boolean;
                    export { inverse_288 as inverse };
                }
                export { Name_10 as Name };
            }
            export { fields_114 as fields };
        }
        namespace IfcControl {
            const domain_115: string;
            export { domain_115 as domain };
            const superclasses_115: string[];
            export { superclasses_115 as superclasses };
            export namespace fields_115 {
                namespace Controls {
                    const type_289: string;
                    export { type_289 as type };
                    const reference_289: boolean;
                    export { reference_289 as reference };
                    const many_289: boolean;
                    export { many_289 as many };
                    const inverse_289: boolean;
                    export { inverse_289 as inverse };
                }
            }
            export { fields_115 as fields };
        }
        namespace IfcControllerType {
            const domain_116: string;
            export { domain_116 as domain };
            const superclasses_116: string[];
            export { superclasses_116 as superclasses };
            export namespace fields_116 {
                export namespace PredefinedType_16 {
                    const type_290: string;
                    export { type_290 as type };
                    const reference_290: boolean;
                    export { reference_290 as reference };
                    const many_290: boolean;
                    export { many_290 as many };
                    const inverse_290: boolean;
                    export { inverse_290 as inverse };
                }
                export { PredefinedType_16 as PredefinedType };
            }
            export { fields_116 as fields };
        }
        namespace IfcConversionBasedUnit {
            const domain_117: string;
            export { domain_117 as domain };
            const superclasses_117: string[];
            export { superclasses_117 as superclasses };
            export namespace fields_117 {
                export namespace Name_11 {
                    const type_291: string;
                    export { type_291 as type };
                    const reference_291: boolean;
                    export { reference_291 as reference };
                    const many_291: boolean;
                    export { many_291 as many };
                    const inverse_291: boolean;
                    export { inverse_291 as inverse };
                }
                export { Name_11 as Name };
                export namespace ConversionFactor {
                    const type_292: string;
                    export { type_292 as type };
                    const reference_292: boolean;
                    export { reference_292 as reference };
                    const many_292: boolean;
                    export { many_292 as many };
                    const inverse_292: boolean;
                    export { inverse_292 as inverse };
                }
            }
            export { fields_117 as fields };
        }
        namespace IfcCooledBeamType {
            const domain_118: string;
            export { domain_118 as domain };
            const superclasses_118: string[];
            export { superclasses_118 as superclasses };
            export namespace fields_118 {
                export namespace PredefinedType_17 {
                    const type_293: string;
                    export { type_293 as type };
                    const reference_293: boolean;
                    export { reference_293 as reference };
                    const many_293: boolean;
                    export { many_293 as many };
                    const inverse_293: boolean;
                    export { inverse_293 as inverse };
                }
                export { PredefinedType_17 as PredefinedType };
            }
            export { fields_118 as fields };
        }
        namespace IfcCoolingTowerType {
            const domain_119: string;
            export { domain_119 as domain };
            const superclasses_119: string[];
            export { superclasses_119 as superclasses };
            export namespace fields_119 {
                export namespace PredefinedType_18 {
                    const type_294: string;
                    export { type_294 as type };
                    const reference_294: boolean;
                    export { reference_294 as reference };
                    const many_294: boolean;
                    export { many_294 as many };
                    const inverse_294: boolean;
                    export { inverse_294 as inverse };
                }
                export { PredefinedType_18 as PredefinedType };
            }
            export { fields_119 as fields };
        }
        namespace IfcCoordinatedUniversalTimeOffset {
            const domain_120: string;
            export { domain_120 as domain };
            const superclasses_120: any[];
            export { superclasses_120 as superclasses };
            export namespace fields_120 {
                namespace HourOffset {
                    const type_295: string;
                    export { type_295 as type };
                    const reference_295: boolean;
                    export { reference_295 as reference };
                    const many_295: boolean;
                    export { many_295 as many };
                    const inverse_295: boolean;
                    export { inverse_295 as inverse };
                }
                namespace MinuteOffset {
                    const type_296: string;
                    export { type_296 as type };
                    const reference_296: boolean;
                    export { reference_296 as reference };
                    const many_296: boolean;
                    export { many_296 as many };
                    const inverse_296: boolean;
                    export { inverse_296 as inverse };
                }
                namespace Sense {
                    const type_297: string;
                    export { type_297 as type };
                    const reference_297: boolean;
                    export { reference_297 as reference };
                    const many_297: boolean;
                    export { many_297 as many };
                    const inverse_297: boolean;
                    export { inverse_297 as inverse };
                }
            }
            export { fields_120 as fields };
        }
        namespace IfcCostItem {
            const domain_121: string;
            export { domain_121 as domain };
            const superclasses_121: string[];
            export { superclasses_121 as superclasses };
            const fields_121: {};
            export { fields_121 as fields };
        }
        namespace IfcCostSchedule {
            const domain_122: string;
            export { domain_122 as domain };
            const superclasses_122: string[];
            export { superclasses_122 as superclasses };
            export namespace fields_122 {
                export namespace SubmittedBy {
                    const type_298: string;
                    export { type_298 as type };
                    const reference_298: boolean;
                    export { reference_298 as reference };
                    const many_298: boolean;
                    export { many_298 as many };
                    const inverse_298: boolean;
                    export { inverse_298 as inverse };
                }
                export namespace PreparedBy {
                    const type_299: string;
                    export { type_299 as type };
                    const reference_299: boolean;
                    export { reference_299 as reference };
                    const many_299: boolean;
                    export { many_299 as many };
                    const inverse_299: boolean;
                    export { inverse_299 as inverse };
                }
                export namespace SubmittedOn {
                    const type_300: string;
                    export { type_300 as type };
                    const reference_300: boolean;
                    export { reference_300 as reference };
                    const many_300: boolean;
                    export { many_300 as many };
                    const inverse_300: boolean;
                    export { inverse_300 as inverse };
                }
                export namespace Status {
                    const type_301: string;
                    export { type_301 as type };
                    const reference_301: boolean;
                    export { reference_301 as reference };
                    const many_301: boolean;
                    export { many_301 as many };
                    const inverse_301: boolean;
                    export { inverse_301 as inverse };
                }
                export namespace TargetUsers {
                    const type_302: string;
                    export { type_302 as type };
                    const reference_302: boolean;
                    export { reference_302 as reference };
                    const many_302: boolean;
                    export { many_302 as many };
                    const inverse_302: boolean;
                    export { inverse_302 as inverse };
                }
                export namespace UpdateDate {
                    const type_303: string;
                    export { type_303 as type };
                    const reference_303: boolean;
                    export { reference_303 as reference };
                    const many_303: boolean;
                    export { many_303 as many };
                    const inverse_303: boolean;
                    export { inverse_303 as inverse };
                }
                export namespace ID {
                    const type_304: string;
                    export { type_304 as type };
                    const reference_304: boolean;
                    export { reference_304 as reference };
                    const many_304: boolean;
                    export { many_304 as many };
                    const inverse_304: boolean;
                    export { inverse_304 as inverse };
                }
                export namespace PredefinedType_19 {
                    const type_305: string;
                    export { type_305 as type };
                    const reference_305: boolean;
                    export { reference_305 as reference };
                    const many_305: boolean;
                    export { many_305 as many };
                    const inverse_305: boolean;
                    export { inverse_305 as inverse };
                }
                export { PredefinedType_19 as PredefinedType };
            }
            export { fields_122 as fields };
        }
        namespace IfcCostValue {
            const domain_123: string;
            export { domain_123 as domain };
            const superclasses_123: string[];
            export { superclasses_123 as superclasses };
            export namespace fields_123 {
                namespace CostType {
                    const type_306: string;
                    export { type_306 as type };
                    const reference_306: boolean;
                    export { reference_306 as reference };
                    const many_306: boolean;
                    export { many_306 as many };
                    const inverse_306: boolean;
                    export { inverse_306 as inverse };
                }
                namespace Condition {
                    const type_307: string;
                    export { type_307 as type };
                    const reference_307: boolean;
                    export { reference_307 as reference };
                    const many_307: boolean;
                    export { many_307 as many };
                    const inverse_307: boolean;
                    export { inverse_307 as inverse };
                }
            }
            export { fields_123 as fields };
        }
        namespace IfcCovering {
            const domain_124: string;
            export { domain_124 as domain };
            const superclasses_124: string[];
            export { superclasses_124 as superclasses };
            export namespace fields_124 {
                export namespace PredefinedType_20 {
                    const type_308: string;
                    export { type_308 as type };
                    const reference_308: boolean;
                    export { reference_308 as reference };
                    const many_308: boolean;
                    export { many_308 as many };
                    const inverse_308: boolean;
                    export { inverse_308 as inverse };
                }
                export { PredefinedType_20 as PredefinedType };
                export namespace CoversSpaces {
                    const type_309: string;
                    export { type_309 as type };
                    const reference_309: boolean;
                    export { reference_309 as reference };
                    const many_309: boolean;
                    export { many_309 as many };
                    const inverse_309: boolean;
                    export { inverse_309 as inverse };
                }
                export namespace Covers {
                    const type_310: string;
                    export { type_310 as type };
                    const reference_310: boolean;
                    export { reference_310 as reference };
                    const many_310: boolean;
                    export { many_310 as many };
                    const inverse_310: boolean;
                    export { inverse_310 as inverse };
                }
            }
            export { fields_124 as fields };
        }
        namespace IfcCoveringType {
            const domain_125: string;
            export { domain_125 as domain };
            const superclasses_125: string[];
            export { superclasses_125 as superclasses };
            export namespace fields_125 {
                export namespace PredefinedType_21 {
                    const type_311: string;
                    export { type_311 as type };
                    const reference_311: boolean;
                    export { reference_311 as reference };
                    const many_311: boolean;
                    export { many_311 as many };
                    const inverse_311: boolean;
                    export { inverse_311 as inverse };
                }
                export { PredefinedType_21 as PredefinedType };
            }
            export { fields_125 as fields };
        }
        namespace IfcCraneRailAShapeProfileDef {
            const domain_126: string;
            export { domain_126 as domain };
            const superclasses_126: string[];
            export { superclasses_126 as superclasses };
            export namespace fields_126 {
                export namespace OverallHeight {
                    const type_312: string;
                    export { type_312 as type };
                    const reference_312: boolean;
                    export { reference_312 as reference };
                    const many_312: boolean;
                    export { many_312 as many };
                    const inverse_312: boolean;
                    export { inverse_312 as inverse };
                }
                export namespace OverallHeightAsString {
                    const type_313: string;
                    export { type_313 as type };
                    const reference_313: boolean;
                    export { reference_313 as reference };
                    const many_313: boolean;
                    export { many_313 as many };
                    const inverse_313: boolean;
                    export { inverse_313 as inverse };
                }
                export namespace BaseWidth2 {
                    const type_314: string;
                    export { type_314 as type };
                    const reference_314: boolean;
                    export { reference_314 as reference };
                    const many_314: boolean;
                    export { many_314 as many };
                    const inverse_314: boolean;
                    export { inverse_314 as inverse };
                }
                export namespace BaseWidth2AsString {
                    const type_315: string;
                    export { type_315 as type };
                    const reference_315: boolean;
                    export { reference_315 as reference };
                    const many_315: boolean;
                    export { many_315 as many };
                    const inverse_315: boolean;
                    export { inverse_315 as inverse };
                }
                export namespace Radius_2 {
                    const type_316: string;
                    export { type_316 as type };
                    const reference_316: boolean;
                    export { reference_316 as reference };
                    const many_316: boolean;
                    export { many_316 as many };
                    const inverse_316: boolean;
                    export { inverse_316 as inverse };
                }
                export { Radius_2 as Radius };
                export namespace RadiusAsString_2 {
                    const type_317: string;
                    export { type_317 as type };
                    const reference_317: boolean;
                    export { reference_317 as reference };
                    const many_317: boolean;
                    export { many_317 as many };
                    const inverse_317: boolean;
                    export { inverse_317 as inverse };
                }
                export { RadiusAsString_2 as RadiusAsString };
                export namespace HeadWidth {
                    const type_318: string;
                    export { type_318 as type };
                    const reference_318: boolean;
                    export { reference_318 as reference };
                    const many_318: boolean;
                    export { many_318 as many };
                    const inverse_318: boolean;
                    export { inverse_318 as inverse };
                }
                export namespace HeadWidthAsString {
                    const type_319: string;
                    export { type_319 as type };
                    const reference_319: boolean;
                    export { reference_319 as reference };
                    const many_319: boolean;
                    export { many_319 as many };
                    const inverse_319: boolean;
                    export { inverse_319 as inverse };
                }
                export namespace HeadDepth2 {
                    const type_320: string;
                    export { type_320 as type };
                    const reference_320: boolean;
                    export { reference_320 as reference };
                    const many_320: boolean;
                    export { many_320 as many };
                    const inverse_320: boolean;
                    export { inverse_320 as inverse };
                }
                export namespace HeadDepth2AsString {
                    const type_321: string;
                    export { type_321 as type };
                    const reference_321: boolean;
                    export { reference_321 as reference };
                    const many_321: boolean;
                    export { many_321 as many };
                    const inverse_321: boolean;
                    export { inverse_321 as inverse };
                }
                export namespace HeadDepth3 {
                    const type_322: string;
                    export { type_322 as type };
                    const reference_322: boolean;
                    export { reference_322 as reference };
                    const many_322: boolean;
                    export { many_322 as many };
                    const inverse_322: boolean;
                    export { inverse_322 as inverse };
                }
                export namespace HeadDepth3AsString {
                    const type_323: string;
                    export { type_323 as type };
                    const reference_323: boolean;
                    export { reference_323 as reference };
                    const many_323: boolean;
                    export { many_323 as many };
                    const inverse_323: boolean;
                    export { inverse_323 as inverse };
                }
                export namespace WebThickness {
                    const type_324: string;
                    export { type_324 as type };
                    const reference_324: boolean;
                    export { reference_324 as reference };
                    const many_324: boolean;
                    export { many_324 as many };
                    const inverse_324: boolean;
                    export { inverse_324 as inverse };
                }
                export namespace WebThicknessAsString {
                    const type_325: string;
                    export { type_325 as type };
                    const reference_325: boolean;
                    export { reference_325 as reference };
                    const many_325: boolean;
                    export { many_325 as many };
                    const inverse_325: boolean;
                    export { inverse_325 as inverse };
                }
                export namespace BaseWidth4 {
                    const type_326: string;
                    export { type_326 as type };
                    const reference_326: boolean;
                    export { reference_326 as reference };
                    const many_326: boolean;
                    export { many_326 as many };
                    const inverse_326: boolean;
                    export { inverse_326 as inverse };
                }
                export namespace BaseWidth4AsString {
                    const type_327: string;
                    export { type_327 as type };
                    const reference_327: boolean;
                    export { reference_327 as reference };
                    const many_327: boolean;
                    export { many_327 as many };
                    const inverse_327: boolean;
                    export { inverse_327 as inverse };
                }
                export namespace BaseDepth1 {
                    const type_328: string;
                    export { type_328 as type };
                    const reference_328: boolean;
                    export { reference_328 as reference };
                    const many_328: boolean;
                    export { many_328 as many };
                    const inverse_328: boolean;
                    export { inverse_328 as inverse };
                }
                export namespace BaseDepth1AsString {
                    const type_329: string;
                    export { type_329 as type };
                    const reference_329: boolean;
                    export { reference_329 as reference };
                    const many_329: boolean;
                    export { many_329 as many };
                    const inverse_329: boolean;
                    export { inverse_329 as inverse };
                }
                export namespace BaseDepth2 {
                    const type_330: string;
                    export { type_330 as type };
                    const reference_330: boolean;
                    export { reference_330 as reference };
                    const many_330: boolean;
                    export { many_330 as many };
                    const inverse_330: boolean;
                    export { inverse_330 as inverse };
                }
                export namespace BaseDepth2AsString {
                    const type_331: string;
                    export { type_331 as type };
                    const reference_331: boolean;
                    export { reference_331 as reference };
                    const many_331: boolean;
                    export { many_331 as many };
                    const inverse_331: boolean;
                    export { inverse_331 as inverse };
                }
                export namespace BaseDepth3 {
                    const type_332: string;
                    export { type_332 as type };
                    const reference_332: boolean;
                    export { reference_332 as reference };
                    const many_332: boolean;
                    export { many_332 as many };
                    const inverse_332: boolean;
                    export { inverse_332 as inverse };
                }
                export namespace BaseDepth3AsString {
                    const type_333: string;
                    export { type_333 as type };
                    const reference_333: boolean;
                    export { reference_333 as reference };
                    const many_333: boolean;
                    export { many_333 as many };
                    const inverse_333: boolean;
                    export { inverse_333 as inverse };
                }
                export namespace CentreOfGravityInY_1 {
                    const type_334: string;
                    export { type_334 as type };
                    const reference_334: boolean;
                    export { reference_334 as reference };
                    const many_334: boolean;
                    export { many_334 as many };
                    const inverse_334: boolean;
                    export { inverse_334 as inverse };
                }
                export { CentreOfGravityInY_1 as CentreOfGravityInY };
                export namespace CentreOfGravityInYAsString_1 {
                    const type_335: string;
                    export { type_335 as type };
                    const reference_335: boolean;
                    export { reference_335 as reference };
                    const many_335: boolean;
                    export { many_335 as many };
                    const inverse_335: boolean;
                    export { inverse_335 as inverse };
                }
                export { CentreOfGravityInYAsString_1 as CentreOfGravityInYAsString };
            }
            export { fields_126 as fields };
        }
        namespace IfcCraneRailFShapeProfileDef {
            const domain_127: string;
            export { domain_127 as domain };
            const superclasses_127: string[];
            export { superclasses_127 as superclasses };
            export namespace fields_127 {
                export namespace OverallHeight_1 {
                    const type_336: string;
                    export { type_336 as type };
                    const reference_336: boolean;
                    export { reference_336 as reference };
                    const many_336: boolean;
                    export { many_336 as many };
                    const inverse_336: boolean;
                    export { inverse_336 as inverse };
                }
                export { OverallHeight_1 as OverallHeight };
                export namespace OverallHeightAsString_1 {
                    const type_337: string;
                    export { type_337 as type };
                    const reference_337: boolean;
                    export { reference_337 as reference };
                    const many_337: boolean;
                    export { many_337 as many };
                    const inverse_337: boolean;
                    export { inverse_337 as inverse };
                }
                export { OverallHeightAsString_1 as OverallHeightAsString };
                export namespace HeadWidth_1 {
                    const type_338: string;
                    export { type_338 as type };
                    const reference_338: boolean;
                    export { reference_338 as reference };
                    const many_338: boolean;
                    export { many_338 as many };
                    const inverse_338: boolean;
                    export { inverse_338 as inverse };
                }
                export { HeadWidth_1 as HeadWidth };
                export namespace HeadWidthAsString_1 {
                    const type_339: string;
                    export { type_339 as type };
                    const reference_339: boolean;
                    export { reference_339 as reference };
                    const many_339: boolean;
                    export { many_339 as many };
                    const inverse_339: boolean;
                    export { inverse_339 as inverse };
                }
                export { HeadWidthAsString_1 as HeadWidthAsString };
                export namespace Radius_3 {
                    const type_340: string;
                    export { type_340 as type };
                    const reference_340: boolean;
                    export { reference_340 as reference };
                    const many_340: boolean;
                    export { many_340 as many };
                    const inverse_340: boolean;
                    export { inverse_340 as inverse };
                }
                export { Radius_3 as Radius };
                export namespace RadiusAsString_3 {
                    const type_341: string;
                    export { type_341 as type };
                    const reference_341: boolean;
                    export { reference_341 as reference };
                    const many_341: boolean;
                    export { many_341 as many };
                    const inverse_341: boolean;
                    export { inverse_341 as inverse };
                }
                export { RadiusAsString_3 as RadiusAsString };
                export namespace HeadDepth2_1 {
                    const type_342: string;
                    export { type_342 as type };
                    const reference_342: boolean;
                    export { reference_342 as reference };
                    const many_342: boolean;
                    export { many_342 as many };
                    const inverse_342: boolean;
                    export { inverse_342 as inverse };
                }
                export { HeadDepth2_1 as HeadDepth2 };
                export namespace HeadDepth2AsString_1 {
                    const type_343: string;
                    export { type_343 as type };
                    const reference_343: boolean;
                    export { reference_343 as reference };
                    const many_343: boolean;
                    export { many_343 as many };
                    const inverse_343: boolean;
                    export { inverse_343 as inverse };
                }
                export { HeadDepth2AsString_1 as HeadDepth2AsString };
                export namespace HeadDepth3_1 {
                    const type_344: string;
                    export { type_344 as type };
                    const reference_344: boolean;
                    export { reference_344 as reference };
                    const many_344: boolean;
                    export { many_344 as many };
                    const inverse_344: boolean;
                    export { inverse_344 as inverse };
                }
                export { HeadDepth3_1 as HeadDepth3 };
                export namespace HeadDepth3AsString_1 {
                    const type_345: string;
                    export { type_345 as type };
                    const reference_345: boolean;
                    export { reference_345 as reference };
                    const many_345: boolean;
                    export { many_345 as many };
                    const inverse_345: boolean;
                    export { inverse_345 as inverse };
                }
                export { HeadDepth3AsString_1 as HeadDepth3AsString };
                export namespace WebThickness_1 {
                    const type_346: string;
                    export { type_346 as type };
                    const reference_346: boolean;
                    export { reference_346 as reference };
                    const many_346: boolean;
                    export { many_346 as many };
                    const inverse_346: boolean;
                    export { inverse_346 as inverse };
                }
                export { WebThickness_1 as WebThickness };
                export namespace WebThicknessAsString_1 {
                    const type_347: string;
                    export { type_347 as type };
                    const reference_347: boolean;
                    export { reference_347 as reference };
                    const many_347: boolean;
                    export { many_347 as many };
                    const inverse_347: boolean;
                    export { inverse_347 as inverse };
                }
                export { WebThicknessAsString_1 as WebThicknessAsString };
                export namespace BaseDepth1_1 {
                    const type_348: string;
                    export { type_348 as type };
                    const reference_348: boolean;
                    export { reference_348 as reference };
                    const many_348: boolean;
                    export { many_348 as many };
                    const inverse_348: boolean;
                    export { inverse_348 as inverse };
                }
                export { BaseDepth1_1 as BaseDepth1 };
                export namespace BaseDepth1AsString_1 {
                    const type_349: string;
                    export { type_349 as type };
                    const reference_349: boolean;
                    export { reference_349 as reference };
                    const many_349: boolean;
                    export { many_349 as many };
                    const inverse_349: boolean;
                    export { inverse_349 as inverse };
                }
                export { BaseDepth1AsString_1 as BaseDepth1AsString };
                export namespace BaseDepth2_1 {
                    const type_350: string;
                    export { type_350 as type };
                    const reference_350: boolean;
                    export { reference_350 as reference };
                    const many_350: boolean;
                    export { many_350 as many };
                    const inverse_350: boolean;
                    export { inverse_350 as inverse };
                }
                export { BaseDepth2_1 as BaseDepth2 };
                export namespace BaseDepth2AsString_1 {
                    const type_351: string;
                    export { type_351 as type };
                    const reference_351: boolean;
                    export { reference_351 as reference };
                    const many_351: boolean;
                    export { many_351 as many };
                    const inverse_351: boolean;
                    export { inverse_351 as inverse };
                }
                export { BaseDepth2AsString_1 as BaseDepth2AsString };
                export namespace CentreOfGravityInY_2 {
                    const type_352: string;
                    export { type_352 as type };
                    const reference_352: boolean;
                    export { reference_352 as reference };
                    const many_352: boolean;
                    export { many_352 as many };
                    const inverse_352: boolean;
                    export { inverse_352 as inverse };
                }
                export { CentreOfGravityInY_2 as CentreOfGravityInY };
                export namespace CentreOfGravityInYAsString_2 {
                    const type_353: string;
                    export { type_353 as type };
                    const reference_353: boolean;
                    export { reference_353 as reference };
                    const many_353: boolean;
                    export { many_353 as many };
                    const inverse_353: boolean;
                    export { inverse_353 as inverse };
                }
                export { CentreOfGravityInYAsString_2 as CentreOfGravityInYAsString };
            }
            export { fields_127 as fields };
        }
        namespace IfcCrewResource {
            const domain_128: string;
            export { domain_128 as domain };
            const superclasses_128: string[];
            export { superclasses_128 as superclasses };
            const fields_128: {};
            export { fields_128 as fields };
        }
        namespace IfcCsgPrimitive3D {
            const domain_129: string;
            export { domain_129 as domain };
            const superclasses_129: string[];
            export { superclasses_129 as superclasses };
            export namespace fields_129 {
                export namespace Position_1 {
                    const type_354: string;
                    export { type_354 as type };
                    const reference_354: boolean;
                    export { reference_354 as reference };
                    const many_354: boolean;
                    export { many_354 as many };
                    const inverse_354: boolean;
                    export { inverse_354 as inverse };
                }
                export { Position_1 as Position };
                export namespace Dim_5 {
                    const type_355: string;
                    export { type_355 as type };
                    const reference_355: boolean;
                    export { reference_355 as reference };
                    const many_355: boolean;
                    export { many_355 as many };
                    const inverse_355: boolean;
                    export { inverse_355 as inverse };
                }
                export { Dim_5 as Dim };
            }
            export { fields_129 as fields };
        }
        namespace IfcCsgSolid {
            const domain_130: string;
            export { domain_130 as domain };
            const superclasses_130: string[];
            export { superclasses_130 as superclasses };
            export namespace fields_130 {
                namespace TreeRootExpression {
                    const type_356: string;
                    export { type_356 as type };
                    const reference_356: boolean;
                    export { reference_356 as reference };
                    const many_356: boolean;
                    export { many_356 as many };
                    const inverse_356: boolean;
                    export { inverse_356 as inverse };
                }
            }
            export { fields_130 as fields };
        }
        namespace IfcCurrencyRelationship {
            const domain_131: string;
            export { domain_131 as domain };
            const superclasses_131: any[];
            export { superclasses_131 as superclasses };
            export namespace fields_131 {
                namespace RelatingMonetaryUnit {
                    const type_357: string;
                    export { type_357 as type };
                    const reference_357: boolean;
                    export { reference_357 as reference };
                    const many_357: boolean;
                    export { many_357 as many };
                    const inverse_357: boolean;
                    export { inverse_357 as inverse };
                }
                namespace RelatedMonetaryUnit {
                    const type_358: string;
                    export { type_358 as type };
                    const reference_358: boolean;
                    export { reference_358 as reference };
                    const many_358: boolean;
                    export { many_358 as many };
                    const inverse_358: boolean;
                    export { inverse_358 as inverse };
                }
                namespace ExchangeRate {
                    const type_359: string;
                    export { type_359 as type };
                    const reference_359: boolean;
                    export { reference_359 as reference };
                    const many_359: boolean;
                    export { many_359 as many };
                    const inverse_359: boolean;
                    export { inverse_359 as inverse };
                }
                namespace ExchangeRateAsString {
                    const type_360: string;
                    export { type_360 as type };
                    const reference_360: boolean;
                    export { reference_360 as reference };
                    const many_360: boolean;
                    export { many_360 as many };
                    const inverse_360: boolean;
                    export { inverse_360 as inverse };
                }
                namespace RateDateTime {
                    const type_361: string;
                    export { type_361 as type };
                    const reference_361: boolean;
                    export { reference_361 as reference };
                    const many_361: boolean;
                    export { many_361 as many };
                    const inverse_361: boolean;
                    export { inverse_361 as inverse };
                }
                namespace RateSource {
                    const type_362: string;
                    export { type_362 as type };
                    const reference_362: boolean;
                    export { reference_362 as reference };
                    const many_362: boolean;
                    export { many_362 as many };
                    const inverse_362: boolean;
                    export { inverse_362 as inverse };
                }
            }
            export { fields_131 as fields };
        }
        namespace IfcCurtainWall {
            const domain_132: string;
            export { domain_132 as domain };
            const superclasses_132: string[];
            export { superclasses_132 as superclasses };
            const fields_132: {};
            export { fields_132 as fields };
        }
        namespace IfcCurtainWallType {
            const domain_133: string;
            export { domain_133 as domain };
            const superclasses_133: string[];
            export { superclasses_133 as superclasses };
            export namespace fields_133 {
                export namespace PredefinedType_22 {
                    const type_363: string;
                    export { type_363 as type };
                    const reference_363: boolean;
                    export { reference_363 as reference };
                    const many_363: boolean;
                    export { many_363 as many };
                    const inverse_363: boolean;
                    export { inverse_363 as inverse };
                }
                export { PredefinedType_22 as PredefinedType };
            }
            export { fields_133 as fields };
        }
        namespace IfcCurve {
            const domain_134: string;
            export { domain_134 as domain };
            const superclasses_134: string[];
            export { superclasses_134 as superclasses };
            export namespace fields_134 {
                export namespace Dim_6 {
                    const type_364: string;
                    export { type_364 as type };
                    const reference_364: boolean;
                    export { reference_364 as reference };
                    const many_364: boolean;
                    export { many_364 as many };
                    const inverse_364: boolean;
                    export { inverse_364 as inverse };
                }
                export { Dim_6 as Dim };
            }
            export { fields_134 as fields };
        }
        namespace IfcCurveBoundedPlane {
            const domain_135: string;
            export { domain_135 as domain };
            const superclasses_135: string[];
            export { superclasses_135 as superclasses };
            export namespace fields_135 {
                export namespace BasisSurface {
                    const type_365: string;
                    export { type_365 as type };
                    const reference_365: boolean;
                    export { reference_365 as reference };
                    const many_365: boolean;
                    export { many_365 as many };
                    const inverse_365: boolean;
                    export { inverse_365 as inverse };
                }
                export namespace OuterBoundary_1 {
                    const type_366: string;
                    export { type_366 as type };
                    const reference_366: boolean;
                    export { reference_366 as reference };
                    const many_366: boolean;
                    export { many_366 as many };
                    const inverse_366: boolean;
                    export { inverse_366 as inverse };
                }
                export { OuterBoundary_1 as OuterBoundary };
                export namespace InnerBoundaries_1 {
                    const type_367: string;
                    export { type_367 as type };
                    const reference_367: boolean;
                    export { reference_367 as reference };
                    const many_367: boolean;
                    export { many_367 as many };
                    const inverse_367: boolean;
                    export { inverse_367 as inverse };
                }
                export { InnerBoundaries_1 as InnerBoundaries };
                export namespace Dim_7 {
                    const type_368: string;
                    export { type_368 as type };
                    const reference_368: boolean;
                    export { reference_368 as reference };
                    const many_368: boolean;
                    export { many_368 as many };
                    const inverse_368: boolean;
                    export { inverse_368 as inverse };
                }
                export { Dim_7 as Dim };
            }
            export { fields_135 as fields };
        }
        namespace IfcCurveStyle {
            const domain_136: string;
            export { domain_136 as domain };
            const superclasses_136: string[];
            export { superclasses_136 as superclasses };
            export namespace fields_136 {
                namespace CurveFont {
                    const type_369: string;
                    export { type_369 as type };
                    const reference_369: boolean;
                    export { reference_369 as reference };
                    const many_369: boolean;
                    export { many_369 as many };
                    const inverse_369: boolean;
                    export { inverse_369 as inverse };
                }
                namespace CurveWidth {
                    const type_370: string;
                    export { type_370 as type };
                    const reference_370: boolean;
                    export { reference_370 as reference };
                    const many_370: boolean;
                    export { many_370 as many };
                    const inverse_370: boolean;
                    export { inverse_370 as inverse };
                }
                namespace CurveColour {
                    const type_371: string;
                    export { type_371 as type };
                    const reference_371: boolean;
                    export { reference_371 as reference };
                    const many_371: boolean;
                    export { many_371 as many };
                    const inverse_371: boolean;
                    export { inverse_371 as inverse };
                }
            }
            export { fields_136 as fields };
        }
        namespace IfcCurveStyleFont {
            const domain_137: string;
            export { domain_137 as domain };
            const superclasses_137: string[];
            export { superclasses_137 as superclasses };
            export namespace fields_137 {
                export namespace Name_12 {
                    const type_372: string;
                    export { type_372 as type };
                    const reference_372: boolean;
                    export { reference_372 as reference };
                    const many_372: boolean;
                    export { many_372 as many };
                    const inverse_372: boolean;
                    export { inverse_372 as inverse };
                }
                export { Name_12 as Name };
                export namespace PatternList {
                    const type_373: string;
                    export { type_373 as type };
                    const reference_373: boolean;
                    export { reference_373 as reference };
                    const many_373: boolean;
                    export { many_373 as many };
                    const inverse_373: boolean;
                    export { inverse_373 as inverse };
                }
            }
            export { fields_137 as fields };
        }
        namespace IfcCurveStyleFontAndScaling {
            const domain_138: string;
            export { domain_138 as domain };
            const superclasses_138: string[];
            export { superclasses_138 as superclasses };
            export namespace fields_138 {
                export namespace Name_13 {
                    const type_374: string;
                    export { type_374 as type };
                    const reference_374: boolean;
                    export { reference_374 as reference };
                    const many_374: boolean;
                    export { many_374 as many };
                    const inverse_374: boolean;
                    export { inverse_374 as inverse };
                }
                export { Name_13 as Name };
                export namespace CurveFont_1 {
                    const type_375: string;
                    export { type_375 as type };
                    const reference_375: boolean;
                    export { reference_375 as reference };
                    const many_375: boolean;
                    export { many_375 as many };
                    const inverse_375: boolean;
                    export { inverse_375 as inverse };
                }
                export { CurveFont_1 as CurveFont };
                export namespace CurveFontScaling {
                    const type_376: string;
                    export { type_376 as type };
                    const reference_376: boolean;
                    export { reference_376 as reference };
                    const many_376: boolean;
                    export { many_376 as many };
                    const inverse_376: boolean;
                    export { inverse_376 as inverse };
                }
                export namespace CurveFontScalingAsString {
                    const type_377: string;
                    export { type_377 as type };
                    const reference_377: boolean;
                    export { reference_377 as reference };
                    const many_377: boolean;
                    export { many_377 as many };
                    const inverse_377: boolean;
                    export { inverse_377 as inverse };
                }
            }
            export { fields_138 as fields };
        }
        namespace IfcCurveStyleFontPattern {
            const domain_139: string;
            export { domain_139 as domain };
            const superclasses_139: any[];
            export { superclasses_139 as superclasses };
            export namespace fields_139 {
                namespace VisibleSegmentLength {
                    const type_378: string;
                    export { type_378 as type };
                    const reference_378: boolean;
                    export { reference_378 as reference };
                    const many_378: boolean;
                    export { many_378 as many };
                    const inverse_378: boolean;
                    export { inverse_378 as inverse };
                }
                namespace VisibleSegmentLengthAsString {
                    const type_379: string;
                    export { type_379 as type };
                    const reference_379: boolean;
                    export { reference_379 as reference };
                    const many_379: boolean;
                    export { many_379 as many };
                    const inverse_379: boolean;
                    export { inverse_379 as inverse };
                }
                namespace InvisibleSegmentLength {
                    const type_380: string;
                    export { type_380 as type };
                    const reference_380: boolean;
                    export { reference_380 as reference };
                    const many_380: boolean;
                    export { many_380 as many };
                    const inverse_380: boolean;
                    export { inverse_380 as inverse };
                }
                namespace InvisibleSegmentLengthAsString {
                    const type_381: string;
                    export { type_381 as type };
                    const reference_381: boolean;
                    export { reference_381 as reference };
                    const many_381: boolean;
                    export { many_381 as many };
                    const inverse_381: boolean;
                    export { inverse_381 as inverse };
                }
            }
            export { fields_139 as fields };
        }
        namespace IfcDamperType {
            const domain_140: string;
            export { domain_140 as domain };
            const superclasses_140: string[];
            export { superclasses_140 as superclasses };
            export namespace fields_140 {
                export namespace PredefinedType_23 {
                    const type_382: string;
                    export { type_382 as type };
                    const reference_382: boolean;
                    export { reference_382 as reference };
                    const many_382: boolean;
                    export { many_382 as many };
                    const inverse_382: boolean;
                    export { inverse_382 as inverse };
                }
                export { PredefinedType_23 as PredefinedType };
            }
            export { fields_140 as fields };
        }
        namespace IfcDateAndTime {
            const domain_141: string;
            export { domain_141 as domain };
            const superclasses_141: string[];
            export { superclasses_141 as superclasses };
            export namespace fields_141 {
                namespace DateComponent {
                    const type_383: string;
                    export { type_383 as type };
                    const reference_383: boolean;
                    export { reference_383 as reference };
                    const many_383: boolean;
                    export { many_383 as many };
                    const inverse_383: boolean;
                    export { inverse_383 as inverse };
                }
                namespace TimeComponent {
                    const type_384: string;
                    export { type_384 as type };
                    const reference_384: boolean;
                    export { reference_384 as reference };
                    const many_384: boolean;
                    export { many_384 as many };
                    const inverse_384: boolean;
                    export { inverse_384 as inverse };
                }
            }
            export { fields_141 as fields };
        }
        namespace IfcDefinedSymbol {
            const domain_142: string;
            export { domain_142 as domain };
            const superclasses_142: string[];
            export { superclasses_142 as superclasses };
            export namespace fields_142 {
                namespace Definition {
                    const type_385: string;
                    export { type_385 as type };
                    const reference_385: boolean;
                    export { reference_385 as reference };
                    const many_385: boolean;
                    export { many_385 as many };
                    const inverse_385: boolean;
                    export { inverse_385 as inverse };
                }
                namespace Target {
                    const type_386: string;
                    export { type_386 as type };
                    const reference_386: boolean;
                    export { reference_386 as reference };
                    const many_386: boolean;
                    export { many_386 as many };
                    const inverse_386: boolean;
                    export { inverse_386 as inverse };
                }
            }
            export { fields_142 as fields };
        }
        namespace IfcDerivedProfileDef {
            const domain_143: string;
            export { domain_143 as domain };
            const superclasses_143: string[];
            export { superclasses_143 as superclasses };
            export namespace fields_143 {
                export namespace ParentProfile {
                    const type_387: string;
                    export { type_387 as type };
                    const reference_387: boolean;
                    export { reference_387 as reference };
                    const many_387: boolean;
                    export { many_387 as many };
                    const inverse_387: boolean;
                    export { inverse_387 as inverse };
                }
                export namespace Operator_1 {
                    const type_388: string;
                    export { type_388 as type };
                    const reference_388: boolean;
                    export { reference_388 as reference };
                    const many_388: boolean;
                    export { many_388 as many };
                    const inverse_388: boolean;
                    export { inverse_388 as inverse };
                }
                export { Operator_1 as Operator };
                export namespace Label_1 {
                    const type_389: string;
                    export { type_389 as type };
                    const reference_389: boolean;
                    export { reference_389 as reference };
                    const many_389: boolean;
                    export { many_389 as many };
                    const inverse_389: boolean;
                    export { inverse_389 as inverse };
                }
                export { Label_1 as Label };
            }
            export { fields_143 as fields };
        }
        namespace IfcDerivedUnit {
            const domain_144: string;
            export { domain_144 as domain };
            const superclasses_144: string[];
            export { superclasses_144 as superclasses };
            export namespace fields_144 {
                namespace Elements {
                    const type_390: string;
                    export { type_390 as type };
                    const reference_390: boolean;
                    export { reference_390 as reference };
                    const many_390: boolean;
                    export { many_390 as many };
                    const inverse_390: boolean;
                    export { inverse_390 as inverse };
                }
                namespace UnitType {
                    const type_391: string;
                    export { type_391 as type };
                    const reference_391: boolean;
                    export { reference_391 as reference };
                    const many_391: boolean;
                    export { many_391 as many };
                    const inverse_391: boolean;
                    export { inverse_391 as inverse };
                }
                namespace UserDefinedType {
                    const type_392: string;
                    export { type_392 as type };
                    const reference_392: boolean;
                    export { reference_392 as reference };
                    const many_392: boolean;
                    export { many_392 as many };
                    const inverse_392: boolean;
                    export { inverse_392 as inverse };
                }
            }
            export { fields_144 as fields };
        }
        namespace IfcDerivedUnitElement {
            const domain_145: string;
            export { domain_145 as domain };
            const superclasses_145: any[];
            export { superclasses_145 as superclasses };
            export namespace fields_145 {
                namespace Unit {
                    const type_393: string;
                    export { type_393 as type };
                    const reference_393: boolean;
                    export { reference_393 as reference };
                    const many_393: boolean;
                    export { many_393 as many };
                    const inverse_393: boolean;
                    export { inverse_393 as inverse };
                }
                namespace Exponent {
                    const type_394: string;
                    export { type_394 as type };
                    const reference_394: boolean;
                    export { reference_394 as reference };
                    const many_394: boolean;
                    export { many_394 as many };
                    const inverse_394: boolean;
                    export { inverse_394 as inverse };
                }
            }
            export { fields_145 as fields };
        }
        namespace IfcDiameterDimension {
            const domain_146: string;
            export { domain_146 as domain };
            const superclasses_146: string[];
            export { superclasses_146 as superclasses };
            const fields_146: {};
            export { fields_146 as fields };
        }
        namespace IfcDimensionCalloutRelationship {
            const domain_147: string;
            export { domain_147 as domain };
            const superclasses_147: string[];
            export { superclasses_147 as superclasses };
            const fields_147: {};
            export { fields_147 as fields };
        }
        namespace IfcDimensionCurve {
            const domain_148: string;
            export { domain_148 as domain };
            const superclasses_148: string[];
            export { superclasses_148 as superclasses };
            export namespace fields_148 {
                namespace AnnotatedBySymbols {
                    const type_395: string;
                    export { type_395 as type };
                    const reference_395: boolean;
                    export { reference_395 as reference };
                    const many_395: boolean;
                    export { many_395 as many };
                    const inverse_395: boolean;
                    export { inverse_395 as inverse };
                }
            }
            export { fields_148 as fields };
        }
        namespace IfcDimensionCurveDirectedCallout {
            const domain_149: string;
            export { domain_149 as domain };
            const superclasses_149: string[];
            export { superclasses_149 as superclasses };
            const fields_149: {};
            export { fields_149 as fields };
        }
        namespace IfcDimensionCurveTerminator {
            const domain_150: string;
            export { domain_150 as domain };
            const superclasses_150: string[];
            export { superclasses_150 as superclasses };
            export namespace fields_150 {
                export namespace Role_2 {
                    const type_396: string;
                    export { type_396 as type };
                    const reference_396: boolean;
                    export { reference_396 as reference };
                    const many_396: boolean;
                    export { many_396 as many };
                    const inverse_396: boolean;
                    export { inverse_396 as inverse };
                }
                export { Role_2 as Role };
            }
            export { fields_150 as fields };
        }
        namespace IfcDimensionPair {
            const domain_151: string;
            export { domain_151 as domain };
            const superclasses_151: string[];
            export { superclasses_151 as superclasses };
            const fields_151: {};
            export { fields_151 as fields };
        }
        namespace IfcDimensionalExponents {
            const domain_152: string;
            export { domain_152 as domain };
            const superclasses_152: any[];
            export { superclasses_152 as superclasses };
            export namespace fields_152 {
                namespace LengthExponent {
                    const type_397: string;
                    export { type_397 as type };
                    const reference_397: boolean;
                    export { reference_397 as reference };
                    const many_397: boolean;
                    export { many_397 as many };
                    const inverse_397: boolean;
                    export { inverse_397 as inverse };
                }
                namespace MassExponent {
                    const type_398: string;
                    export { type_398 as type };
                    const reference_398: boolean;
                    export { reference_398 as reference };
                    const many_398: boolean;
                    export { many_398 as many };
                    const inverse_398: boolean;
                    export { inverse_398 as inverse };
                }
                namespace TimeExponent {
                    const type_399: string;
                    export { type_399 as type };
                    const reference_399: boolean;
                    export { reference_399 as reference };
                    const many_399: boolean;
                    export { many_399 as many };
                    const inverse_399: boolean;
                    export { inverse_399 as inverse };
                }
                namespace ElectricCurrentExponent {
                    const type_400: string;
                    export { type_400 as type };
                    const reference_400: boolean;
                    export { reference_400 as reference };
                    const many_400: boolean;
                    export { many_400 as many };
                    const inverse_400: boolean;
                    export { inverse_400 as inverse };
                }
                namespace ThermodynamicTemperatureExponent {
                    const type_401: string;
                    export { type_401 as type };
                    const reference_401: boolean;
                    export { reference_401 as reference };
                    const many_401: boolean;
                    export { many_401 as many };
                    const inverse_401: boolean;
                    export { inverse_401 as inverse };
                }
                namespace AmountOfSubstanceExponent {
                    const type_402: string;
                    export { type_402 as type };
                    const reference_402: boolean;
                    export { reference_402 as reference };
                    const many_402: boolean;
                    export { many_402 as many };
                    const inverse_402: boolean;
                    export { inverse_402 as inverse };
                }
                namespace LuminousIntensityExponent {
                    const type_403: string;
                    export { type_403 as type };
                    const reference_403: boolean;
                    export { reference_403 as reference };
                    const many_403: boolean;
                    export { many_403 as many };
                    const inverse_403: boolean;
                    export { inverse_403 as inverse };
                }
            }
            export { fields_152 as fields };
        }
        namespace IfcDirection {
            const domain_153: string;
            export { domain_153 as domain };
            const superclasses_153: string[];
            export { superclasses_153 as superclasses };
            export namespace fields_153 {
                export namespace DirectionRatios {
                    const type_404: string;
                    export { type_404 as type };
                    const reference_404: boolean;
                    export { reference_404 as reference };
                    const many_404: boolean;
                    export { many_404 as many };
                    const inverse_404: boolean;
                    export { inverse_404 as inverse };
                }
                export namespace DirectionRatiosAsString {
                    const type_405: string;
                    export { type_405 as type };
                    const reference_405: boolean;
                    export { reference_405 as reference };
                    const many_405: boolean;
                    export { many_405 as many };
                    const inverse_405: boolean;
                    export { inverse_405 as inverse };
                }
                export namespace Dim_8 {
                    const type_406: string;
                    export { type_406 as type };
                    const reference_406: boolean;
                    export { reference_406 as reference };
                    const many_406: boolean;
                    export { many_406 as many };
                    const inverse_406: boolean;
                    export { inverse_406 as inverse };
                }
                export { Dim_8 as Dim };
            }
            export { fields_153 as fields };
        }
        namespace IfcDiscreteAccessory {
            const domain_154: string;
            export { domain_154 as domain };
            const superclasses_154: string[];
            export { superclasses_154 as superclasses };
            const fields_154: {};
            export { fields_154 as fields };
        }
        namespace IfcDiscreteAccessoryType {
            const domain_155: string;
            export { domain_155 as domain };
            const superclasses_155: string[];
            export { superclasses_155 as superclasses };
            const fields_155: {};
            export { fields_155 as fields };
        }
        namespace IfcDistributionChamberElement {
            const domain_156: string;
            export { domain_156 as domain };
            const superclasses_156: string[];
            export { superclasses_156 as superclasses };
            const fields_156: {};
            export { fields_156 as fields };
        }
        namespace IfcDistributionChamberElementType {
            const domain_157: string;
            export { domain_157 as domain };
            const superclasses_157: string[];
            export { superclasses_157 as superclasses };
            export namespace fields_157 {
                export namespace PredefinedType_24 {
                    const type_407: string;
                    export { type_407 as type };
                    const reference_407: boolean;
                    export { reference_407 as reference };
                    const many_407: boolean;
                    export { many_407 as many };
                    const inverse_407: boolean;
                    export { inverse_407 as inverse };
                }
                export { PredefinedType_24 as PredefinedType };
            }
            export { fields_157 as fields };
        }
        namespace IfcDistributionControlElement {
            const domain_158: string;
            export { domain_158 as domain };
            const superclasses_158: string[];
            export { superclasses_158 as superclasses };
            export namespace fields_158 {
                namespace ControlElementId {
                    const type_408: string;
                    export { type_408 as type };
                    const reference_408: boolean;
                    export { reference_408 as reference };
                    const many_408: boolean;
                    export { many_408 as many };
                    const inverse_408: boolean;
                    export { inverse_408 as inverse };
                }
                namespace AssignedToFlowElement {
                    const type_409: string;
                    export { type_409 as type };
                    const reference_409: boolean;
                    export { reference_409 as reference };
                    const many_409: boolean;
                    export { many_409 as many };
                    const inverse_409: boolean;
                    export { inverse_409 as inverse };
                }
            }
            export { fields_158 as fields };
        }
        namespace IfcDistributionControlElementType {
            const domain_159: string;
            export { domain_159 as domain };
            const superclasses_159: string[];
            export { superclasses_159 as superclasses };
            const fields_159: {};
            export { fields_159 as fields };
        }
        namespace IfcDistributionElement {
            const domain_160: string;
            export { domain_160 as domain };
            const superclasses_160: string[];
            export { superclasses_160 as superclasses };
            const fields_160: {};
            export { fields_160 as fields };
        }
        namespace IfcDistributionElementType {
            const domain_161: string;
            export { domain_161 as domain };
            const superclasses_161: string[];
            export { superclasses_161 as superclasses };
            const fields_161: {};
            export { fields_161 as fields };
        }
        namespace IfcDistributionFlowElement {
            const domain_162: string;
            export { domain_162 as domain };
            const superclasses_162: string[];
            export { superclasses_162 as superclasses };
            export namespace fields_162 {
                namespace HasControlElements {
                    const type_410: string;
                    export { type_410 as type };
                    const reference_410: boolean;
                    export { reference_410 as reference };
                    const many_410: boolean;
                    export { many_410 as many };
                    const inverse_410: boolean;
                    export { inverse_410 as inverse };
                }
            }
            export { fields_162 as fields };
        }
        namespace IfcDistributionFlowElementType {
            const domain_163: string;
            export { domain_163 as domain };
            const superclasses_163: string[];
            export { superclasses_163 as superclasses };
            const fields_163: {};
            export { fields_163 as fields };
        }
        namespace IfcDistributionPort {
            const domain_164: string;
            export { domain_164 as domain };
            const superclasses_164: string[];
            export { superclasses_164 as superclasses };
            export namespace fields_164 {
                namespace FlowDirection {
                    const type_411: string;
                    export { type_411 as type };
                    const reference_411: boolean;
                    export { reference_411 as reference };
                    const many_411: boolean;
                    export { many_411 as many };
                    const inverse_411: boolean;
                    export { inverse_411 as inverse };
                }
            }
            export { fields_164 as fields };
        }
        namespace IfcDocumentElectronicFormat {
            const domain_165: string;
            export { domain_165 as domain };
            const superclasses_165: any[];
            export { superclasses_165 as superclasses };
            export namespace fields_165 {
                namespace FileExtension {
                    const type_412: string;
                    export { type_412 as type };
                    const reference_412: boolean;
                    export { reference_412 as reference };
                    const many_412: boolean;
                    export { many_412 as many };
                    const inverse_412: boolean;
                    export { inverse_412 as inverse };
                }
                namespace MimeContentType {
                    const type_413: string;
                    export { type_413 as type };
                    const reference_413: boolean;
                    export { reference_413 as reference };
                    const many_413: boolean;
                    export { many_413 as many };
                    const inverse_413: boolean;
                    export { inverse_413 as inverse };
                }
                namespace MimeSubtype {
                    const type_414: string;
                    export { type_414 as type };
                    const reference_414: boolean;
                    export { reference_414 as reference };
                    const many_414: boolean;
                    export { many_414 as many };
                    const inverse_414: boolean;
                    export { inverse_414 as inverse };
                }
            }
            export { fields_165 as fields };
        }
        namespace IfcDocumentInformation {
            const domain_166: string;
            export { domain_166 as domain };
            const superclasses_166: string[];
            export { superclasses_166 as superclasses };
            export namespace fields_166 {
                export namespace DocumentId {
                    const type_415: string;
                    export { type_415 as type };
                    const reference_415: boolean;
                    export { reference_415 as reference };
                    const many_415: boolean;
                    export { many_415 as many };
                    const inverse_415: boolean;
                    export { inverse_415 as inverse };
                }
                export namespace Name_14 {
                    const type_416: string;
                    export { type_416 as type };
                    const reference_416: boolean;
                    export { reference_416 as reference };
                    const many_416: boolean;
                    export { many_416 as many };
                    const inverse_416: boolean;
                    export { inverse_416 as inverse };
                }
                export { Name_14 as Name };
                export namespace Description_9 {
                    const type_417: string;
                    export { type_417 as type };
                    const reference_417: boolean;
                    export { reference_417 as reference };
                    const many_417: boolean;
                    export { many_417 as many };
                    const inverse_417: boolean;
                    export { inverse_417 as inverse };
                }
                export { Description_9 as Description };
                export namespace DocumentReferences {
                    const type_418: string;
                    export { type_418 as type };
                    const reference_418: boolean;
                    export { reference_418 as reference };
                    const many_418: boolean;
                    export { many_418 as many };
                    const inverse_418: boolean;
                    export { inverse_418 as inverse };
                }
                export namespace Purpose_1 {
                    const type_419: string;
                    export { type_419 as type };
                    const reference_419: boolean;
                    export { reference_419 as reference };
                    const many_419: boolean;
                    export { many_419 as many };
                    const inverse_419: boolean;
                    export { inverse_419 as inverse };
                }
                export { Purpose_1 as Purpose };
                export namespace IntendedUse {
                    const type_420: string;
                    export { type_420 as type };
                    const reference_420: boolean;
                    export { reference_420 as reference };
                    const many_420: boolean;
                    export { many_420 as many };
                    const inverse_420: boolean;
                    export { inverse_420 as inverse };
                }
                export namespace Scope {
                    const type_421: string;
                    export { type_421 as type };
                    const reference_421: boolean;
                    export { reference_421 as reference };
                    const many_421: boolean;
                    export { many_421 as many };
                    const inverse_421: boolean;
                    export { inverse_421 as inverse };
                }
                export namespace Revision {
                    const type_422: string;
                    export { type_422 as type };
                    const reference_422: boolean;
                    export { reference_422 as reference };
                    const many_422: boolean;
                    export { many_422 as many };
                    const inverse_422: boolean;
                    export { inverse_422 as inverse };
                }
                export namespace DocumentOwner {
                    const type_423: string;
                    export { type_423 as type };
                    const reference_423: boolean;
                    export { reference_423 as reference };
                    const many_423: boolean;
                    export { many_423 as many };
                    const inverse_423: boolean;
                    export { inverse_423 as inverse };
                }
                export namespace Editors {
                    const type_424: string;
                    export { type_424 as type };
                    const reference_424: boolean;
                    export { reference_424 as reference };
                    const many_424: boolean;
                    export { many_424 as many };
                    const inverse_424: boolean;
                    export { inverse_424 as inverse };
                }
                export namespace CreationTime_1 {
                    const type_425: string;
                    export { type_425 as type };
                    const reference_425: boolean;
                    export { reference_425 as reference };
                    const many_425: boolean;
                    export { many_425 as many };
                    const inverse_425: boolean;
                    export { inverse_425 as inverse };
                }
                export { CreationTime_1 as CreationTime };
                export namespace LastRevisionTime {
                    const type_426: string;
                    export { type_426 as type };
                    const reference_426: boolean;
                    export { reference_426 as reference };
                    const many_426: boolean;
                    export { many_426 as many };
                    const inverse_426: boolean;
                    export { inverse_426 as inverse };
                }
                export namespace ElectronicFormat {
                    const type_427: string;
                    export { type_427 as type };
                    const reference_427: boolean;
                    export { reference_427 as reference };
                    const many_427: boolean;
                    export { many_427 as many };
                    const inverse_427: boolean;
                    export { inverse_427 as inverse };
                }
                export namespace ValidFrom {
                    const type_428: string;
                    export { type_428 as type };
                    const reference_428: boolean;
                    export { reference_428 as reference };
                    const many_428: boolean;
                    export { many_428 as many };
                    const inverse_428: boolean;
                    export { inverse_428 as inverse };
                }
                export namespace ValidUntil {
                    const type_429: string;
                    export { type_429 as type };
                    const reference_429: boolean;
                    export { reference_429 as reference };
                    const many_429: boolean;
                    export { many_429 as many };
                    const inverse_429: boolean;
                    export { inverse_429 as inverse };
                }
                export namespace Confidentiality {
                    const type_430: string;
                    export { type_430 as type };
                    const reference_430: boolean;
                    export { reference_430 as reference };
                    const many_430: boolean;
                    export { many_430 as many };
                    const inverse_430: boolean;
                    export { inverse_430 as inverse };
                }
                export namespace Status_1 {
                    const type_431: string;
                    export { type_431 as type };
                    const reference_431: boolean;
                    export { reference_431 as reference };
                    const many_431: boolean;
                    export { many_431 as many };
                    const inverse_431: boolean;
                    export { inverse_431 as inverse };
                }
                export { Status_1 as Status };
                export namespace IsPointedTo {
                    const type_432: string;
                    export { type_432 as type };
                    const reference_432: boolean;
                    export { reference_432 as reference };
                    const many_432: boolean;
                    export { many_432 as many };
                    const inverse_432: boolean;
                    export { inverse_432 as inverse };
                }
                export namespace IsPointer {
                    const type_433: string;
                    export { type_433 as type };
                    const reference_433: boolean;
                    export { reference_433 as reference };
                    const many_433: boolean;
                    export { many_433 as many };
                    const inverse_433: boolean;
                    export { inverse_433 as inverse };
                }
            }
            export { fields_166 as fields };
        }
        namespace IfcDocumentInformationRelationship {
            const domain_167: string;
            export { domain_167 as domain };
            const superclasses_167: any[];
            export { superclasses_167 as superclasses };
            export namespace fields_167 {
                namespace RelatingDocument {
                    const type_434: string;
                    export { type_434 as type };
                    const reference_434: boolean;
                    export { reference_434 as reference };
                    const many_434: boolean;
                    export { many_434 as many };
                    const inverse_434: boolean;
                    export { inverse_434 as inverse };
                }
                namespace RelatedDocuments {
                    const type_435: string;
                    export { type_435 as type };
                    const reference_435: boolean;
                    export { reference_435 as reference };
                    const many_435: boolean;
                    export { many_435 as many };
                    const inverse_435: boolean;
                    export { inverse_435 as inverse };
                }
                namespace RelationshipType {
                    const type_436: string;
                    export { type_436 as type };
                    const reference_436: boolean;
                    export { reference_436 as reference };
                    const many_436: boolean;
                    export { many_436 as many };
                    const inverse_436: boolean;
                    export { inverse_436 as inverse };
                }
            }
            export { fields_167 as fields };
        }
        namespace IfcDocumentReference {
            const domain_168: string;
            export { domain_168 as domain };
            const superclasses_168: string[];
            export { superclasses_168 as superclasses };
            export namespace fields_168 {
                namespace ReferenceToDocument {
                    const type_437: string;
                    export { type_437 as type };
                    const reference_437: boolean;
                    export { reference_437 as reference };
                    const many_437: boolean;
                    export { many_437 as many };
                    const inverse_437: boolean;
                    export { inverse_437 as inverse };
                }
            }
            export { fields_168 as fields };
        }
        namespace IfcDoor {
            const domain_169: string;
            export { domain_169 as domain };
            const superclasses_169: string[];
            export { superclasses_169 as superclasses };
            export namespace fields_169 {
                export namespace OverallHeight_2 {
                    const type_438: string;
                    export { type_438 as type };
                    const reference_438: boolean;
                    export { reference_438 as reference };
                    const many_438: boolean;
                    export { many_438 as many };
                    const inverse_438: boolean;
                    export { inverse_438 as inverse };
                }
                export { OverallHeight_2 as OverallHeight };
                export namespace OverallHeightAsString_2 {
                    const type_439: string;
                    export { type_439 as type };
                    const reference_439: boolean;
                    export { reference_439 as reference };
                    const many_439: boolean;
                    export { many_439 as many };
                    const inverse_439: boolean;
                    export { inverse_439 as inverse };
                }
                export { OverallHeightAsString_2 as OverallHeightAsString };
                export namespace OverallWidth {
                    const type_440: string;
                    export { type_440 as type };
                    const reference_440: boolean;
                    export { reference_440 as reference };
                    const many_440: boolean;
                    export { many_440 as many };
                    const inverse_440: boolean;
                    export { inverse_440 as inverse };
                }
                export namespace OverallWidthAsString {
                    const type_441: string;
                    export { type_441 as type };
                    const reference_441: boolean;
                    export { reference_441 as reference };
                    const many_441: boolean;
                    export { many_441 as many };
                    const inverse_441: boolean;
                    export { inverse_441 as inverse };
                }
            }
            export { fields_169 as fields };
        }
        namespace IfcDoorLiningProperties {
            const domain_170: string;
            export { domain_170 as domain };
            const superclasses_170: string[];
            export { superclasses_170 as superclasses };
            export namespace fields_170 {
                namespace LiningDepth {
                    const type_442: string;
                    export { type_442 as type };
                    const reference_442: boolean;
                    export { reference_442 as reference };
                    const many_442: boolean;
                    export { many_442 as many };
                    const inverse_442: boolean;
                    export { inverse_442 as inverse };
                }
                namespace LiningDepthAsString {
                    const type_443: string;
                    export { type_443 as type };
                    const reference_443: boolean;
                    export { reference_443 as reference };
                    const many_443: boolean;
                    export { many_443 as many };
                    const inverse_443: boolean;
                    export { inverse_443 as inverse };
                }
                namespace LiningThickness {
                    const type_444: string;
                    export { type_444 as type };
                    const reference_444: boolean;
                    export { reference_444 as reference };
                    const many_444: boolean;
                    export { many_444 as many };
                    const inverse_444: boolean;
                    export { inverse_444 as inverse };
                }
                namespace LiningThicknessAsString {
                    const type_445: string;
                    export { type_445 as type };
                    const reference_445: boolean;
                    export { reference_445 as reference };
                    const many_445: boolean;
                    export { many_445 as many };
                    const inverse_445: boolean;
                    export { inverse_445 as inverse };
                }
                namespace ThresholdDepth {
                    const type_446: string;
                    export { type_446 as type };
                    const reference_446: boolean;
                    export { reference_446 as reference };
                    const many_446: boolean;
                    export { many_446 as many };
                    const inverse_446: boolean;
                    export { inverse_446 as inverse };
                }
                namespace ThresholdDepthAsString {
                    const type_447: string;
                    export { type_447 as type };
                    const reference_447: boolean;
                    export { reference_447 as reference };
                    const many_447: boolean;
                    export { many_447 as many };
                    const inverse_447: boolean;
                    export { inverse_447 as inverse };
                }
                namespace ThresholdThickness {
                    const type_448: string;
                    export { type_448 as type };
                    const reference_448: boolean;
                    export { reference_448 as reference };
                    const many_448: boolean;
                    export { many_448 as many };
                    const inverse_448: boolean;
                    export { inverse_448 as inverse };
                }
                namespace ThresholdThicknessAsString {
                    const type_449: string;
                    export { type_449 as type };
                    const reference_449: boolean;
                    export { reference_449 as reference };
                    const many_449: boolean;
                    export { many_449 as many };
                    const inverse_449: boolean;
                    export { inverse_449 as inverse };
                }
                namespace TransomThickness {
                    const type_450: string;
                    export { type_450 as type };
                    const reference_450: boolean;
                    export { reference_450 as reference };
                    const many_450: boolean;
                    export { many_450 as many };
                    const inverse_450: boolean;
                    export { inverse_450 as inverse };
                }
                namespace TransomThicknessAsString {
                    const type_451: string;
                    export { type_451 as type };
                    const reference_451: boolean;
                    export { reference_451 as reference };
                    const many_451: boolean;
                    export { many_451 as many };
                    const inverse_451: boolean;
                    export { inverse_451 as inverse };
                }
                namespace TransomOffset {
                    const type_452: string;
                    export { type_452 as type };
                    const reference_452: boolean;
                    export { reference_452 as reference };
                    const many_452: boolean;
                    export { many_452 as many };
                    const inverse_452: boolean;
                    export { inverse_452 as inverse };
                }
                namespace TransomOffsetAsString {
                    const type_453: string;
                    export { type_453 as type };
                    const reference_453: boolean;
                    export { reference_453 as reference };
                    const many_453: boolean;
                    export { many_453 as many };
                    const inverse_453: boolean;
                    export { inverse_453 as inverse };
                }
                namespace LiningOffset {
                    const type_454: string;
                    export { type_454 as type };
                    const reference_454: boolean;
                    export { reference_454 as reference };
                    const many_454: boolean;
                    export { many_454 as many };
                    const inverse_454: boolean;
                    export { inverse_454 as inverse };
                }
                namespace LiningOffsetAsString {
                    const type_455: string;
                    export { type_455 as type };
                    const reference_455: boolean;
                    export { reference_455 as reference };
                    const many_455: boolean;
                    export { many_455 as many };
                    const inverse_455: boolean;
                    export { inverse_455 as inverse };
                }
                namespace ThresholdOffset {
                    const type_456: string;
                    export { type_456 as type };
                    const reference_456: boolean;
                    export { reference_456 as reference };
                    const many_456: boolean;
                    export { many_456 as many };
                    const inverse_456: boolean;
                    export { inverse_456 as inverse };
                }
                namespace ThresholdOffsetAsString {
                    const type_457: string;
                    export { type_457 as type };
                    const reference_457: boolean;
                    export { reference_457 as reference };
                    const many_457: boolean;
                    export { many_457 as many };
                    const inverse_457: boolean;
                    export { inverse_457 as inverse };
                }
                namespace CasingThickness {
                    const type_458: string;
                    export { type_458 as type };
                    const reference_458: boolean;
                    export { reference_458 as reference };
                    const many_458: boolean;
                    export { many_458 as many };
                    const inverse_458: boolean;
                    export { inverse_458 as inverse };
                }
                namespace CasingThicknessAsString {
                    const type_459: string;
                    export { type_459 as type };
                    const reference_459: boolean;
                    export { reference_459 as reference };
                    const many_459: boolean;
                    export { many_459 as many };
                    const inverse_459: boolean;
                    export { inverse_459 as inverse };
                }
                namespace CasingDepth {
                    const type_460: string;
                    export { type_460 as type };
                    const reference_460: boolean;
                    export { reference_460 as reference };
                    const many_460: boolean;
                    export { many_460 as many };
                    const inverse_460: boolean;
                    export { inverse_460 as inverse };
                }
                namespace CasingDepthAsString {
                    const type_461: string;
                    export { type_461 as type };
                    const reference_461: boolean;
                    export { reference_461 as reference };
                    const many_461: boolean;
                    export { many_461 as many };
                    const inverse_461: boolean;
                    export { inverse_461 as inverse };
                }
                namespace ShapeAspectStyle {
                    const type_462: string;
                    export { type_462 as type };
                    const reference_462: boolean;
                    export { reference_462 as reference };
                    const many_462: boolean;
                    export { many_462 as many };
                    const inverse_462: boolean;
                    export { inverse_462 as inverse };
                }
            }
            export { fields_170 as fields };
        }
        namespace IfcDoorPanelProperties {
            const domain_171: string;
            export { domain_171 as domain };
            const superclasses_171: string[];
            export { superclasses_171 as superclasses };
            export namespace fields_171 {
                export namespace PanelDepth {
                    const type_463: string;
                    export { type_463 as type };
                    const reference_463: boolean;
                    export { reference_463 as reference };
                    const many_463: boolean;
                    export { many_463 as many };
                    const inverse_463: boolean;
                    export { inverse_463 as inverse };
                }
                export namespace PanelDepthAsString {
                    const type_464: string;
                    export { type_464 as type };
                    const reference_464: boolean;
                    export { reference_464 as reference };
                    const many_464: boolean;
                    export { many_464 as many };
                    const inverse_464: boolean;
                    export { inverse_464 as inverse };
                }
                export namespace PanelOperation {
                    const type_465: string;
                    export { type_465 as type };
                    const reference_465: boolean;
                    export { reference_465 as reference };
                    const many_465: boolean;
                    export { many_465 as many };
                    const inverse_465: boolean;
                    export { inverse_465 as inverse };
                }
                export namespace PanelWidth {
                    const type_466: string;
                    export { type_466 as type };
                    const reference_466: boolean;
                    export { reference_466 as reference };
                    const many_466: boolean;
                    export { many_466 as many };
                    const inverse_466: boolean;
                    export { inverse_466 as inverse };
                }
                export namespace PanelWidthAsString {
                    const type_467: string;
                    export { type_467 as type };
                    const reference_467: boolean;
                    export { reference_467 as reference };
                    const many_467: boolean;
                    export { many_467 as many };
                    const inverse_467: boolean;
                    export { inverse_467 as inverse };
                }
                export namespace PanelPosition {
                    const type_468: string;
                    export { type_468 as type };
                    const reference_468: boolean;
                    export { reference_468 as reference };
                    const many_468: boolean;
                    export { many_468 as many };
                    const inverse_468: boolean;
                    export { inverse_468 as inverse };
                }
                export namespace ShapeAspectStyle_1 {
                    const type_469: string;
                    export { type_469 as type };
                    const reference_469: boolean;
                    export { reference_469 as reference };
                    const many_469: boolean;
                    export { many_469 as many };
                    const inverse_469: boolean;
                    export { inverse_469 as inverse };
                }
                export { ShapeAspectStyle_1 as ShapeAspectStyle };
            }
            export { fields_171 as fields };
        }
        namespace IfcDoorStyle {
            const domain_172: string;
            export { domain_172 as domain };
            const superclasses_172: string[];
            export { superclasses_172 as superclasses };
            export namespace fields_172 {
                namespace OperationType {
                    const type_470: string;
                    export { type_470 as type };
                    const reference_470: boolean;
                    export { reference_470 as reference };
                    const many_470: boolean;
                    export { many_470 as many };
                    const inverse_470: boolean;
                    export { inverse_470 as inverse };
                }
                namespace ConstructionType {
                    const type_471: string;
                    export { type_471 as type };
                    const reference_471: boolean;
                    export { reference_471 as reference };
                    const many_471: boolean;
                    export { many_471 as many };
                    const inverse_471: boolean;
                    export { inverse_471 as inverse };
                }
                namespace ParameterTakesPrecedence {
                    const type_472: string;
                    export { type_472 as type };
                    const reference_472: boolean;
                    export { reference_472 as reference };
                    const many_472: boolean;
                    export { many_472 as many };
                    const inverse_472: boolean;
                    export { inverse_472 as inverse };
                }
                namespace Sizeable {
                    const type_473: string;
                    export { type_473 as type };
                    const reference_473: boolean;
                    export { reference_473 as reference };
                    const many_473: boolean;
                    export { many_473 as many };
                    const inverse_473: boolean;
                    export { inverse_473 as inverse };
                }
            }
            export { fields_172 as fields };
        }
        namespace IfcDraughtingCallout {
            const domain_173: string;
            export { domain_173 as domain };
            const superclasses_173: string[];
            export { superclasses_173 as superclasses };
            export namespace fields_173 {
                namespace Contents {
                    const type_474: string;
                    export { type_474 as type };
                    const reference_474: boolean;
                    export { reference_474 as reference };
                    const many_474: boolean;
                    export { many_474 as many };
                    const inverse_474: boolean;
                    export { inverse_474 as inverse };
                }
                namespace IsRelatedFromCallout {
                    const type_475: string;
                    export { type_475 as type };
                    const reference_475: boolean;
                    export { reference_475 as reference };
                    const many_475: boolean;
                    export { many_475 as many };
                    const inverse_475: boolean;
                    export { inverse_475 as inverse };
                }
                namespace IsRelatedToCallout {
                    const type_476: string;
                    export { type_476 as type };
                    const reference_476: boolean;
                    export { reference_476 as reference };
                    const many_476: boolean;
                    export { many_476 as many };
                    const inverse_476: boolean;
                    export { inverse_476 as inverse };
                }
            }
            export { fields_173 as fields };
        }
        namespace IfcDraughtingCalloutRelationship {
            const domain_174: string;
            export { domain_174 as domain };
            const superclasses_174: any[];
            export { superclasses_174 as superclasses };
            export namespace fields_174 {
                export namespace Name_15 {
                    const type_477: string;
                    export { type_477 as type };
                    const reference_477: boolean;
                    export { reference_477 as reference };
                    const many_477: boolean;
                    export { many_477 as many };
                    const inverse_477: boolean;
                    export { inverse_477 as inverse };
                }
                export { Name_15 as Name };
                export namespace Description_10 {
                    const type_478: string;
                    export { type_478 as type };
                    const reference_478: boolean;
                    export { reference_478 as reference };
                    const many_478: boolean;
                    export { many_478 as many };
                    const inverse_478: boolean;
                    export { inverse_478 as inverse };
                }
                export { Description_10 as Description };
                export namespace RelatingDraughtingCallout {
                    const type_479: string;
                    export { type_479 as type };
                    const reference_479: boolean;
                    export { reference_479 as reference };
                    const many_479: boolean;
                    export { many_479 as many };
                    const inverse_479: boolean;
                    export { inverse_479 as inverse };
                }
                export namespace RelatedDraughtingCallout {
                    const type_480: string;
                    export { type_480 as type };
                    const reference_480: boolean;
                    export { reference_480 as reference };
                    const many_480: boolean;
                    export { many_480 as many };
                    const inverse_480: boolean;
                    export { inverse_480 as inverse };
                }
            }
            export { fields_174 as fields };
        }
        namespace IfcDraughtingPreDefinedColour {
            const domain_175: string;
            export { domain_175 as domain };
            const superclasses_175: string[];
            export { superclasses_175 as superclasses };
            const fields_175: {};
            export { fields_175 as fields };
        }
        namespace IfcDraughtingPreDefinedCurveFont {
            const domain_176: string;
            export { domain_176 as domain };
            const superclasses_176: string[];
            export { superclasses_176 as superclasses };
            const fields_176: {};
            export { fields_176 as fields };
        }
        namespace IfcDraughtingPreDefinedTextFont {
            const domain_177: string;
            export { domain_177 as domain };
            const superclasses_177: string[];
            export { superclasses_177 as superclasses };
            const fields_177: {};
            export { fields_177 as fields };
        }
        namespace IfcDuctFittingType {
            const domain_178: string;
            export { domain_178 as domain };
            const superclasses_178: string[];
            export { superclasses_178 as superclasses };
            export namespace fields_178 {
                export namespace PredefinedType_25 {
                    const type_481: string;
                    export { type_481 as type };
                    const reference_481: boolean;
                    export { reference_481 as reference };
                    const many_481: boolean;
                    export { many_481 as many };
                    const inverse_481: boolean;
                    export { inverse_481 as inverse };
                }
                export { PredefinedType_25 as PredefinedType };
            }
            export { fields_178 as fields };
        }
        namespace IfcDuctSegmentType {
            const domain_179: string;
            export { domain_179 as domain };
            const superclasses_179: string[];
            export { superclasses_179 as superclasses };
            export namespace fields_179 {
                export namespace PredefinedType_26 {
                    const type_482: string;
                    export { type_482 as type };
                    const reference_482: boolean;
                    export { reference_482 as reference };
                    const many_482: boolean;
                    export { many_482 as many };
                    const inverse_482: boolean;
                    export { inverse_482 as inverse };
                }
                export { PredefinedType_26 as PredefinedType };
            }
            export { fields_179 as fields };
        }
        namespace IfcDuctSilencerType {
            const domain_180: string;
            export { domain_180 as domain };
            const superclasses_180: string[];
            export { superclasses_180 as superclasses };
            export namespace fields_180 {
                export namespace PredefinedType_27 {
                    const type_483: string;
                    export { type_483 as type };
                    const reference_483: boolean;
                    export { reference_483 as reference };
                    const many_483: boolean;
                    export { many_483 as many };
                    const inverse_483: boolean;
                    export { inverse_483 as inverse };
                }
                export { PredefinedType_27 as PredefinedType };
            }
            export { fields_180 as fields };
        }
        namespace IfcEdge {
            const domain_181: string;
            export { domain_181 as domain };
            const superclasses_181: string[];
            export { superclasses_181 as superclasses };
            export namespace fields_181 {
                namespace EdgeStart {
                    const type_484: string;
                    export { type_484 as type };
                    const reference_484: boolean;
                    export { reference_484 as reference };
                    const many_484: boolean;
                    export { many_484 as many };
                    const inverse_484: boolean;
                    export { inverse_484 as inverse };
                }
                namespace EdgeEnd {
                    const type_485: string;
                    export { type_485 as type };
                    const reference_485: boolean;
                    export { reference_485 as reference };
                    const many_485: boolean;
                    export { many_485 as many };
                    const inverse_485: boolean;
                    export { inverse_485 as inverse };
                }
            }
            export { fields_181 as fields };
        }
        namespace IfcEdgeCurve {
            const domain_182: string;
            export { domain_182 as domain };
            const superclasses_182: string[];
            export { superclasses_182 as superclasses };
            export namespace fields_182 {
                export namespace EdgeGeometry {
                    const type_486: string;
                    export { type_486 as type };
                    const reference_486: boolean;
                    export { reference_486 as reference };
                    const many_486: boolean;
                    export { many_486 as many };
                    const inverse_486: boolean;
                    export { inverse_486 as inverse };
                }
                export namespace SameSense_1 {
                    const type_487: string;
                    export { type_487 as type };
                    const reference_487: boolean;
                    export { reference_487 as reference };
                    const many_487: boolean;
                    export { many_487 as many };
                    const inverse_487: boolean;
                    export { inverse_487 as inverse };
                }
                export { SameSense_1 as SameSense };
            }
            export { fields_182 as fields };
        }
        namespace IfcEdgeFeature {
            const domain_183: string;
            export { domain_183 as domain };
            const superclasses_183: string[];
            export { superclasses_183 as superclasses };
            export namespace fields_183 {
                namespace FeatureLength {
                    const type_488: string;
                    export { type_488 as type };
                    const reference_488: boolean;
                    export { reference_488 as reference };
                    const many_488: boolean;
                    export { many_488 as many };
                    const inverse_488: boolean;
                    export { inverse_488 as inverse };
                }
                namespace FeatureLengthAsString {
                    const type_489: string;
                    export { type_489 as type };
                    const reference_489: boolean;
                    export { reference_489 as reference };
                    const many_489: boolean;
                    export { many_489 as many };
                    const inverse_489: boolean;
                    export { inverse_489 as inverse };
                }
            }
            export { fields_183 as fields };
        }
        namespace IfcEdgeLoop {
            const domain_184: string;
            export { domain_184 as domain };
            const superclasses_184: string[];
            export { superclasses_184 as superclasses };
            export namespace fields_184 {
                namespace EdgeList {
                    const type_490: string;
                    export { type_490 as type };
                    const reference_490: boolean;
                    export { reference_490 as reference };
                    const many_490: boolean;
                    export { many_490 as many };
                    const inverse_490: boolean;
                    export { inverse_490 as inverse };
                }
            }
            export { fields_184 as fields };
        }
        namespace IfcElectricApplianceType {
            const domain_185: string;
            export { domain_185 as domain };
            const superclasses_185: string[];
            export { superclasses_185 as superclasses };
            export namespace fields_185 {
                export namespace PredefinedType_28 {
                    const type_491: string;
                    export { type_491 as type };
                    const reference_491: boolean;
                    export { reference_491 as reference };
                    const many_491: boolean;
                    export { many_491 as many };
                    const inverse_491: boolean;
                    export { inverse_491 as inverse };
                }
                export { PredefinedType_28 as PredefinedType };
            }
            export { fields_185 as fields };
        }
        namespace IfcElectricDistributionPoint {
            const domain_186: string;
            export { domain_186 as domain };
            const superclasses_186: string[];
            export { superclasses_186 as superclasses };
            export namespace fields_186 {
                namespace DistributionPointFunction {
                    const type_492: string;
                    export { type_492 as type };
                    const reference_492: boolean;
                    export { reference_492 as reference };
                    const many_492: boolean;
                    export { many_492 as many };
                    const inverse_492: boolean;
                    export { inverse_492 as inverse };
                }
                namespace UserDefinedFunction {
                    const type_493: string;
                    export { type_493 as type };
                    const reference_493: boolean;
                    export { reference_493 as reference };
                    const many_493: boolean;
                    export { many_493 as many };
                    const inverse_493: boolean;
                    export { inverse_493 as inverse };
                }
            }
            export { fields_186 as fields };
        }
        namespace IfcElectricFlowStorageDeviceType {
            const domain_187: string;
            export { domain_187 as domain };
            const superclasses_187: string[];
            export { superclasses_187 as superclasses };
            export namespace fields_187 {
                export namespace PredefinedType_29 {
                    const type_494: string;
                    export { type_494 as type };
                    const reference_494: boolean;
                    export { reference_494 as reference };
                    const many_494: boolean;
                    export { many_494 as many };
                    const inverse_494: boolean;
                    export { inverse_494 as inverse };
                }
                export { PredefinedType_29 as PredefinedType };
            }
            export { fields_187 as fields };
        }
        namespace IfcElectricGeneratorType {
            const domain_188: string;
            export { domain_188 as domain };
            const superclasses_188: string[];
            export { superclasses_188 as superclasses };
            export namespace fields_188 {
                export namespace PredefinedType_30 {
                    const type_495: string;
                    export { type_495 as type };
                    const reference_495: boolean;
                    export { reference_495 as reference };
                    const many_495: boolean;
                    export { many_495 as many };
                    const inverse_495: boolean;
                    export { inverse_495 as inverse };
                }
                export { PredefinedType_30 as PredefinedType };
            }
            export { fields_188 as fields };
        }
        namespace IfcElectricHeaterType {
            const domain_189: string;
            export { domain_189 as domain };
            const superclasses_189: string[];
            export { superclasses_189 as superclasses };
            export namespace fields_189 {
                export namespace PredefinedType_31 {
                    const type_496: string;
                    export { type_496 as type };
                    const reference_496: boolean;
                    export { reference_496 as reference };
                    const many_496: boolean;
                    export { many_496 as many };
                    const inverse_496: boolean;
                    export { inverse_496 as inverse };
                }
                export { PredefinedType_31 as PredefinedType };
            }
            export { fields_189 as fields };
        }
        namespace IfcElectricMotorType {
            const domain_190: string;
            export { domain_190 as domain };
            const superclasses_190: string[];
            export { superclasses_190 as superclasses };
            export namespace fields_190 {
                export namespace PredefinedType_32 {
                    const type_497: string;
                    export { type_497 as type };
                    const reference_497: boolean;
                    export { reference_497 as reference };
                    const many_497: boolean;
                    export { many_497 as many };
                    const inverse_497: boolean;
                    export { inverse_497 as inverse };
                }
                export { PredefinedType_32 as PredefinedType };
            }
            export { fields_190 as fields };
        }
        namespace IfcElectricTimeControlType {
            const domain_191: string;
            export { domain_191 as domain };
            const superclasses_191: string[];
            export { superclasses_191 as superclasses };
            export namespace fields_191 {
                export namespace PredefinedType_33 {
                    const type_498: string;
                    export { type_498 as type };
                    const reference_498: boolean;
                    export { reference_498 as reference };
                    const many_498: boolean;
                    export { many_498 as many };
                    const inverse_498: boolean;
                    export { inverse_498 as inverse };
                }
                export { PredefinedType_33 as PredefinedType };
            }
            export { fields_191 as fields };
        }
        namespace IfcElectricalBaseProperties {
            const domain_192: string;
            export { domain_192 as domain };
            const superclasses_192: string[];
            export { superclasses_192 as superclasses };
            export namespace fields_192 {
                namespace ElectricCurrentType {
                    const type_499: string;
                    export { type_499 as type };
                    const reference_499: boolean;
                    export { reference_499 as reference };
                    const many_499: boolean;
                    export { many_499 as many };
                    const inverse_499: boolean;
                    export { inverse_499 as inverse };
                }
                namespace InputVoltage {
                    const type_500: string;
                    export { type_500 as type };
                    const reference_500: boolean;
                    export { reference_500 as reference };
                    const many_500: boolean;
                    export { many_500 as many };
                    const inverse_500: boolean;
                    export { inverse_500 as inverse };
                }
                namespace InputVoltageAsString {
                    const type_501: string;
                    export { type_501 as type };
                    const reference_501: boolean;
                    export { reference_501 as reference };
                    const many_501: boolean;
                    export { many_501 as many };
                    const inverse_501: boolean;
                    export { inverse_501 as inverse };
                }
                namespace InputFrequency {
                    const type_502: string;
                    export { type_502 as type };
                    const reference_502: boolean;
                    export { reference_502 as reference };
                    const many_502: boolean;
                    export { many_502 as many };
                    const inverse_502: boolean;
                    export { inverse_502 as inverse };
                }
                namespace InputFrequencyAsString {
                    const type_503: string;
                    export { type_503 as type };
                    const reference_503: boolean;
                    export { reference_503 as reference };
                    const many_503: boolean;
                    export { many_503 as many };
                    const inverse_503: boolean;
                    export { inverse_503 as inverse };
                }
                namespace FullLoadCurrent {
                    const type_504: string;
                    export { type_504 as type };
                    const reference_504: boolean;
                    export { reference_504 as reference };
                    const many_504: boolean;
                    export { many_504 as many };
                    const inverse_504: boolean;
                    export { inverse_504 as inverse };
                }
                namespace FullLoadCurrentAsString {
                    const type_505: string;
                    export { type_505 as type };
                    const reference_505: boolean;
                    export { reference_505 as reference };
                    const many_505: boolean;
                    export { many_505 as many };
                    const inverse_505: boolean;
                    export { inverse_505 as inverse };
                }
                namespace MinimumCircuitCurrent {
                    const type_506: string;
                    export { type_506 as type };
                    const reference_506: boolean;
                    export { reference_506 as reference };
                    const many_506: boolean;
                    export { many_506 as many };
                    const inverse_506: boolean;
                    export { inverse_506 as inverse };
                }
                namespace MinimumCircuitCurrentAsString {
                    const type_507: string;
                    export { type_507 as type };
                    const reference_507: boolean;
                    export { reference_507 as reference };
                    const many_507: boolean;
                    export { many_507 as many };
                    const inverse_507: boolean;
                    export { inverse_507 as inverse };
                }
                namespace MaximumPowerInput {
                    const type_508: string;
                    export { type_508 as type };
                    const reference_508: boolean;
                    export { reference_508 as reference };
                    const many_508: boolean;
                    export { many_508 as many };
                    const inverse_508: boolean;
                    export { inverse_508 as inverse };
                }
                namespace MaximumPowerInputAsString {
                    const type_509: string;
                    export { type_509 as type };
                    const reference_509: boolean;
                    export { reference_509 as reference };
                    const many_509: boolean;
                    export { many_509 as many };
                    const inverse_509: boolean;
                    export { inverse_509 as inverse };
                }
                namespace RatedPowerInput {
                    const type_510: string;
                    export { type_510 as type };
                    const reference_510: boolean;
                    export { reference_510 as reference };
                    const many_510: boolean;
                    export { many_510 as many };
                    const inverse_510: boolean;
                    export { inverse_510 as inverse };
                }
                namespace RatedPowerInputAsString {
                    const type_511: string;
                    export { type_511 as type };
                    const reference_511: boolean;
                    export { reference_511 as reference };
                    const many_511: boolean;
                    export { many_511 as many };
                    const inverse_511: boolean;
                    export { inverse_511 as inverse };
                }
                namespace InputPhase {
                    const type_512: string;
                    export { type_512 as type };
                    const reference_512: boolean;
                    export { reference_512 as reference };
                    const many_512: boolean;
                    export { many_512 as many };
                    const inverse_512: boolean;
                    export { inverse_512 as inverse };
                }
            }
            export { fields_192 as fields };
        }
        namespace IfcElectricalCircuit {
            const domain_193: string;
            export { domain_193 as domain };
            const superclasses_193: string[];
            export { superclasses_193 as superclasses };
            const fields_193: {};
            export { fields_193 as fields };
        }
        namespace IfcElectricalElement {
            const domain_194: string;
            export { domain_194 as domain };
            const superclasses_194: string[];
            export { superclasses_194 as superclasses };
            const fields_194: {};
            export { fields_194 as fields };
        }
        namespace IfcElement {
            const domain_195: string;
            export { domain_195 as domain };
            const superclasses_195: string[];
            export { superclasses_195 as superclasses };
            export namespace fields_195 {
                export namespace Tag {
                    const type_513: string;
                    export { type_513 as type };
                    const reference_513: boolean;
                    export { reference_513 as reference };
                    const many_513: boolean;
                    export { many_513 as many };
                    const inverse_513: boolean;
                    export { inverse_513 as inverse };
                }
                export namespace HasStructuralMember {
                    const type_514: string;
                    export { type_514 as type };
                    const reference_514: boolean;
                    export { reference_514 as reference };
                    const many_514: boolean;
                    export { many_514 as many };
                    const inverse_514: boolean;
                    export { inverse_514 as inverse };
                }
                export namespace FillsVoids {
                    const type_515: string;
                    export { type_515 as type };
                    const reference_515: boolean;
                    export { reference_515 as reference };
                    const many_515: boolean;
                    export { many_515 as many };
                    const inverse_515: boolean;
                    export { inverse_515 as inverse };
                }
                export namespace ConnectedTo {
                    const type_516: string;
                    export { type_516 as type };
                    const reference_516: boolean;
                    export { reference_516 as reference };
                    const many_516: boolean;
                    export { many_516 as many };
                    const inverse_516: boolean;
                    export { inverse_516 as inverse };
                }
                export namespace HasCoverings {
                    const type_517: string;
                    export { type_517 as type };
                    const reference_517: boolean;
                    export { reference_517 as reference };
                    const many_517: boolean;
                    export { many_517 as many };
                    const inverse_517: boolean;
                    export { inverse_517 as inverse };
                }
                export namespace HasProjections {
                    const type_518: string;
                    export { type_518 as type };
                    const reference_518: boolean;
                    export { reference_518 as reference };
                    const many_518: boolean;
                    export { many_518 as many };
                    const inverse_518: boolean;
                    export { inverse_518 as inverse };
                }
                export namespace ReferencedInStructures {
                    const type_519: string;
                    export { type_519 as type };
                    const reference_519: boolean;
                    export { reference_519 as reference };
                    const many_519: boolean;
                    export { many_519 as many };
                    const inverse_519: boolean;
                    export { inverse_519 as inverse };
                }
                export namespace HasPorts {
                    const type_520: string;
                    export { type_520 as type };
                    const reference_520: boolean;
                    export { reference_520 as reference };
                    const many_520: boolean;
                    export { many_520 as many };
                    const inverse_520: boolean;
                    export { inverse_520 as inverse };
                }
                export namespace HasOpenings {
                    const type_521: string;
                    export { type_521 as type };
                    const reference_521: boolean;
                    export { reference_521 as reference };
                    const many_521: boolean;
                    export { many_521 as many };
                    const inverse_521: boolean;
                    export { inverse_521 as inverse };
                }
                export namespace IsConnectionRealization {
                    const type_522: string;
                    export { type_522 as type };
                    const reference_522: boolean;
                    export { reference_522 as reference };
                    const many_522: boolean;
                    export { many_522 as many };
                    const inverse_522: boolean;
                    export { inverse_522 as inverse };
                }
                export namespace ProvidesBoundaries {
                    const type_523: string;
                    export { type_523 as type };
                    const reference_523: boolean;
                    export { reference_523 as reference };
                    const many_523: boolean;
                    export { many_523 as many };
                    const inverse_523: boolean;
                    export { inverse_523 as inverse };
                }
                export namespace ConnectedFrom {
                    const type_524: string;
                    export { type_524 as type };
                    const reference_524: boolean;
                    export { reference_524 as reference };
                    const many_524: boolean;
                    export { many_524 as many };
                    const inverse_524: boolean;
                    export { inverse_524 as inverse };
                }
                export namespace ContainedInStructure_1 {
                    const type_525: string;
                    export { type_525 as type };
                    const reference_525: boolean;
                    export { reference_525 as reference };
                    const many_525: boolean;
                    export { many_525 as many };
                    const inverse_525: boolean;
                    export { inverse_525 as inverse };
                }
                export { ContainedInStructure_1 as ContainedInStructure };
            }
            export { fields_195 as fields };
        }
        namespace IfcElementAssembly {
            const domain_196: string;
            export { domain_196 as domain };
            const superclasses_196: string[];
            export { superclasses_196 as superclasses };
            export namespace fields_196 {
                export namespace AssemblyPlace {
                    const type_526: string;
                    export { type_526 as type };
                    const reference_526: boolean;
                    export { reference_526 as reference };
                    const many_526: boolean;
                    export { many_526 as many };
                    const inverse_526: boolean;
                    export { inverse_526 as inverse };
                }
                export namespace PredefinedType_34 {
                    const type_527: string;
                    export { type_527 as type };
                    const reference_527: boolean;
                    export { reference_527 as reference };
                    const many_527: boolean;
                    export { many_527 as many };
                    const inverse_527: boolean;
                    export { inverse_527 as inverse };
                }
                export { PredefinedType_34 as PredefinedType };
            }
            export { fields_196 as fields };
        }
        namespace IfcElementComponent {
            const domain_197: string;
            export { domain_197 as domain };
            const superclasses_197: string[];
            export { superclasses_197 as superclasses };
            const fields_197: {};
            export { fields_197 as fields };
        }
        namespace IfcElementComponentType {
            const domain_198: string;
            export { domain_198 as domain };
            const superclasses_198: string[];
            export { superclasses_198 as superclasses };
            const fields_198: {};
            export { fields_198 as fields };
        }
        namespace IfcElementQuantity {
            const domain_199: string;
            export { domain_199 as domain };
            const superclasses_199: string[];
            export { superclasses_199 as superclasses };
            export namespace fields_199 {
                namespace MethodOfMeasurement {
                    const type_528: string;
                    export { type_528 as type };
                    const reference_528: boolean;
                    export { reference_528 as reference };
                    const many_528: boolean;
                    export { many_528 as many };
                    const inverse_528: boolean;
                    export { inverse_528 as inverse };
                }
                namespace Quantities {
                    const type_529: string;
                    export { type_529 as type };
                    const reference_529: boolean;
                    export { reference_529 as reference };
                    const many_529: boolean;
                    export { many_529 as many };
                    const inverse_529: boolean;
                    export { inverse_529 as inverse };
                }
            }
            export { fields_199 as fields };
        }
        namespace IfcElementType {
            const domain_200: string;
            export { domain_200 as domain };
            const superclasses_200: string[];
            export { superclasses_200 as superclasses };
            export namespace fields_200 {
                namespace ElementType {
                    const type_530: string;
                    export { type_530 as type };
                    const reference_530: boolean;
                    export { reference_530 as reference };
                    const many_530: boolean;
                    export { many_530 as many };
                    const inverse_530: boolean;
                    export { inverse_530 as inverse };
                }
            }
            export { fields_200 as fields };
        }
        namespace IfcElementarySurface {
            const domain_201: string;
            export { domain_201 as domain };
            const superclasses_201: string[];
            export { superclasses_201 as superclasses };
            export namespace fields_201 {
                export namespace Position_2 {
                    const type_531: string;
                    export { type_531 as type };
                    const reference_531: boolean;
                    export { reference_531 as reference };
                    const many_531: boolean;
                    export { many_531 as many };
                    const inverse_531: boolean;
                    export { inverse_531 as inverse };
                }
                export { Position_2 as Position };
                export namespace Dim_9 {
                    const type_532: string;
                    export { type_532 as type };
                    const reference_532: boolean;
                    export { reference_532 as reference };
                    const many_532: boolean;
                    export { many_532 as many };
                    const inverse_532: boolean;
                    export { inverse_532 as inverse };
                }
                export { Dim_9 as Dim };
            }
            export { fields_201 as fields };
        }
        namespace IfcEllipse {
            const domain_202: string;
            export { domain_202 as domain };
            const superclasses_202: string[];
            export { superclasses_202 as superclasses };
            export namespace fields_202 {
                namespace SemiAxis1 {
                    const type_533: string;
                    export { type_533 as type };
                    const reference_533: boolean;
                    export { reference_533 as reference };
                    const many_533: boolean;
                    export { many_533 as many };
                    const inverse_533: boolean;
                    export { inverse_533 as inverse };
                }
                namespace SemiAxis1AsString {
                    const type_534: string;
                    export { type_534 as type };
                    const reference_534: boolean;
                    export { reference_534 as reference };
                    const many_534: boolean;
                    export { many_534 as many };
                    const inverse_534: boolean;
                    export { inverse_534 as inverse };
                }
                namespace SemiAxis2 {
                    const type_535: string;
                    export { type_535 as type };
                    const reference_535: boolean;
                    export { reference_535 as reference };
                    const many_535: boolean;
                    export { many_535 as many };
                    const inverse_535: boolean;
                    export { inverse_535 as inverse };
                }
                namespace SemiAxis2AsString {
                    const type_536: string;
                    export { type_536 as type };
                    const reference_536: boolean;
                    export { reference_536 as reference };
                    const many_536: boolean;
                    export { many_536 as many };
                    const inverse_536: boolean;
                    export { inverse_536 as inverse };
                }
            }
            export { fields_202 as fields };
        }
        namespace IfcEllipseProfileDef {
            const domain_203: string;
            export { domain_203 as domain };
            const superclasses_203: string[];
            export { superclasses_203 as superclasses };
            export namespace fields_203 {
                export namespace SemiAxis1_1 {
                    const type_537: string;
                    export { type_537 as type };
                    const reference_537: boolean;
                    export { reference_537 as reference };
                    const many_537: boolean;
                    export { many_537 as many };
                    const inverse_537: boolean;
                    export { inverse_537 as inverse };
                }
                export { SemiAxis1_1 as SemiAxis1 };
                export namespace SemiAxis1AsString_1 {
                    const type_538: string;
                    export { type_538 as type };
                    const reference_538: boolean;
                    export { reference_538 as reference };
                    const many_538: boolean;
                    export { many_538 as many };
                    const inverse_538: boolean;
                    export { inverse_538 as inverse };
                }
                export { SemiAxis1AsString_1 as SemiAxis1AsString };
                export namespace SemiAxis2_1 {
                    const type_539: string;
                    export { type_539 as type };
                    const reference_539: boolean;
                    export { reference_539 as reference };
                    const many_539: boolean;
                    export { many_539 as many };
                    const inverse_539: boolean;
                    export { inverse_539 as inverse };
                }
                export { SemiAxis2_1 as SemiAxis2 };
                export namespace SemiAxis2AsString_1 {
                    const type_540: string;
                    export { type_540 as type };
                    const reference_540: boolean;
                    export { reference_540 as reference };
                    const many_540: boolean;
                    export { many_540 as many };
                    const inverse_540: boolean;
                    export { inverse_540 as inverse };
                }
                export { SemiAxis2AsString_1 as SemiAxis2AsString };
            }
            export { fields_203 as fields };
        }
        namespace IfcEnergyConversionDevice {
            const domain_204: string;
            export { domain_204 as domain };
            const superclasses_204: string[];
            export { superclasses_204 as superclasses };
            const fields_204: {};
            export { fields_204 as fields };
        }
        namespace IfcEnergyConversionDeviceType {
            const domain_205: string;
            export { domain_205 as domain };
            const superclasses_205: string[];
            export { superclasses_205 as superclasses };
            const fields_205: {};
            export { fields_205 as fields };
        }
        namespace IfcEnergyProperties {
            const domain_206: string;
            export { domain_206 as domain };
            const superclasses_206: string[];
            export { superclasses_206 as superclasses };
            export namespace fields_206 {
                namespace EnergySequence {
                    const type_541: string;
                    export { type_541 as type };
                    const reference_541: boolean;
                    export { reference_541 as reference };
                    const many_541: boolean;
                    export { many_541 as many };
                    const inverse_541: boolean;
                    export { inverse_541 as inverse };
                }
                namespace UserDefinedEnergySequence {
                    const type_542: string;
                    export { type_542 as type };
                    const reference_542: boolean;
                    export { reference_542 as reference };
                    const many_542: boolean;
                    export { many_542 as many };
                    const inverse_542: boolean;
                    export { inverse_542 as inverse };
                }
            }
            export { fields_206 as fields };
        }
        namespace IfcEnvironmentalImpactValue {
            const domain_207: string;
            export { domain_207 as domain };
            const superclasses_207: string[];
            export { superclasses_207 as superclasses };
            export namespace fields_207 {
                namespace ImpactType {
                    const type_543: string;
                    export { type_543 as type };
                    const reference_543: boolean;
                    export { reference_543 as reference };
                    const many_543: boolean;
                    export { many_543 as many };
                    const inverse_543: boolean;
                    export { inverse_543 as inverse };
                }
                namespace Category {
                    const type_544: string;
                    export { type_544 as type };
                    const reference_544: boolean;
                    export { reference_544 as reference };
                    const many_544: boolean;
                    export { many_544 as many };
                    const inverse_544: boolean;
                    export { inverse_544 as inverse };
                }
                namespace UserDefinedCategory {
                    const type_545: string;
                    export { type_545 as type };
                    const reference_545: boolean;
                    export { reference_545 as reference };
                    const many_545: boolean;
                    export { many_545 as many };
                    const inverse_545: boolean;
                    export { inverse_545 as inverse };
                }
            }
            export { fields_207 as fields };
        }
        namespace IfcEquipmentElement {
            const domain_208: string;
            export { domain_208 as domain };
            const superclasses_208: string[];
            export { superclasses_208 as superclasses };
            const fields_208: {};
            export { fields_208 as fields };
        }
        namespace IfcEquipmentStandard {
            const domain_209: string;
            export { domain_209 as domain };
            const superclasses_209: string[];
            export { superclasses_209 as superclasses };
            const fields_209: {};
            export { fields_209 as fields };
        }
        namespace IfcEvaporativeCoolerType {
            const domain_210: string;
            export { domain_210 as domain };
            const superclasses_210: string[];
            export { superclasses_210 as superclasses };
            export namespace fields_210 {
                export namespace PredefinedType_35 {
                    const type_546: string;
                    export { type_546 as type };
                    const reference_546: boolean;
                    export { reference_546 as reference };
                    const many_546: boolean;
                    export { many_546 as many };
                    const inverse_546: boolean;
                    export { inverse_546 as inverse };
                }
                export { PredefinedType_35 as PredefinedType };
            }
            export { fields_210 as fields };
        }
        namespace IfcEvaporatorType {
            const domain_211: string;
            export { domain_211 as domain };
            const superclasses_211: string[];
            export { superclasses_211 as superclasses };
            export namespace fields_211 {
                export namespace PredefinedType_36 {
                    const type_547: string;
                    export { type_547 as type };
                    const reference_547: boolean;
                    export { reference_547 as reference };
                    const many_547: boolean;
                    export { many_547 as many };
                    const inverse_547: boolean;
                    export { inverse_547 as inverse };
                }
                export { PredefinedType_36 as PredefinedType };
            }
            export { fields_211 as fields };
        }
        namespace IfcExtendedMaterialProperties {
            const domain_212: string;
            export { domain_212 as domain };
            const superclasses_212: string[];
            export { superclasses_212 as superclasses };
            export namespace fields_212 {
                export namespace ExtendedProperties {
                    const type_548: string;
                    export { type_548 as type };
                    const reference_548: boolean;
                    export { reference_548 as reference };
                    const many_548: boolean;
                    export { many_548 as many };
                    const inverse_548: boolean;
                    export { inverse_548 as inverse };
                }
                export namespace Description_11 {
                    const type_549: string;
                    export { type_549 as type };
                    const reference_549: boolean;
                    export { reference_549 as reference };
                    const many_549: boolean;
                    export { many_549 as many };
                    const inverse_549: boolean;
                    export { inverse_549 as inverse };
                }
                export { Description_11 as Description };
                export namespace Name_16 {
                    const type_550: string;
                    export { type_550 as type };
                    const reference_550: boolean;
                    export { reference_550 as reference };
                    const many_550: boolean;
                    export { many_550 as many };
                    const inverse_550: boolean;
                    export { inverse_550 as inverse };
                }
                export { Name_16 as Name };
            }
            export { fields_212 as fields };
        }
        namespace IfcExternalReference {
            const domain_213: string;
            export { domain_213 as domain };
            const superclasses_213: string[];
            export { superclasses_213 as superclasses };
            export namespace fields_213 {
                export namespace Location {
                    const type_551: string;
                    export { type_551 as type };
                    const reference_551: boolean;
                    export { reference_551 as reference };
                    const many_551: boolean;
                    export { many_551 as many };
                    const inverse_551: boolean;
                    export { inverse_551 as inverse };
                }
                export namespace ItemReference {
                    const type_552: string;
                    export { type_552 as type };
                    const reference_552: boolean;
                    export { reference_552 as reference };
                    const many_552: boolean;
                    export { many_552 as many };
                    const inverse_552: boolean;
                    export { inverse_552 as inverse };
                }
                export namespace Name_17 {
                    const type_553: string;
                    export { type_553 as type };
                    const reference_553: boolean;
                    export { reference_553 as reference };
                    const many_553: boolean;
                    export { many_553 as many };
                    const inverse_553: boolean;
                    export { inverse_553 as inverse };
                }
                export { Name_17 as Name };
            }
            export { fields_213 as fields };
        }
        namespace IfcExternallyDefinedHatchStyle {
            const domain_214: string;
            export { domain_214 as domain };
            const superclasses_214: string[];
            export { superclasses_214 as superclasses };
            const fields_214: {};
            export { fields_214 as fields };
        }
        namespace IfcExternallyDefinedSurfaceStyle {
            const domain_215: string;
            export { domain_215 as domain };
            const superclasses_215: string[];
            export { superclasses_215 as superclasses };
            const fields_215: {};
            export { fields_215 as fields };
        }
        namespace IfcExternallyDefinedSymbol {
            const domain_216: string;
            export { domain_216 as domain };
            const superclasses_216: string[];
            export { superclasses_216 as superclasses };
            const fields_216: {};
            export { fields_216 as fields };
        }
        namespace IfcExternallyDefinedTextFont {
            const domain_217: string;
            export { domain_217 as domain };
            const superclasses_217: string[];
            export { superclasses_217 as superclasses };
            const fields_217: {};
            export { fields_217 as fields };
        }
        namespace IfcExtrudedAreaSolid {
            const domain_218: string;
            export { domain_218 as domain };
            const superclasses_218: string[];
            export { superclasses_218 as superclasses };
            export namespace fields_218 {
                export namespace ExtrudedDirection {
                    const type_554: string;
                    export { type_554 as type };
                    const reference_554: boolean;
                    export { reference_554 as reference };
                    const many_554: boolean;
                    export { many_554 as many };
                    const inverse_554: boolean;
                    export { inverse_554 as inverse };
                }
                export namespace Depth_1 {
                    const type_555: string;
                    export { type_555 as type };
                    const reference_555: boolean;
                    export { reference_555 as reference };
                    const many_555: boolean;
                    export { many_555 as many };
                    const inverse_555: boolean;
                    export { inverse_555 as inverse };
                }
                export { Depth_1 as Depth };
                export namespace DepthAsString_1 {
                    const type_556: string;
                    export { type_556 as type };
                    const reference_556: boolean;
                    export { reference_556 as reference };
                    const many_556: boolean;
                    export { many_556 as many };
                    const inverse_556: boolean;
                    export { inverse_556 as inverse };
                }
                export { DepthAsString_1 as DepthAsString };
            }
            export { fields_218 as fields };
        }
        namespace IfcFace {
            const domain_219: string;
            export { domain_219 as domain };
            const superclasses_219: string[];
            export { superclasses_219 as superclasses };
            export namespace fields_219 {
                namespace Bounds {
                    const type_557: string;
                    export { type_557 as type };
                    const reference_557: boolean;
                    export { reference_557 as reference };
                    const many_557: boolean;
                    export { many_557 as many };
                    const inverse_557: boolean;
                    export { inverse_557 as inverse };
                }
            }
            export { fields_219 as fields };
        }
        namespace IfcFaceBasedSurfaceModel {
            const domain_220: string;
            export { domain_220 as domain };
            const superclasses_220: string[];
            export { superclasses_220 as superclasses };
            export namespace fields_220 {
                export namespace FbsmFaces {
                    const type_558: string;
                    export { type_558 as type };
                    const reference_558: boolean;
                    export { reference_558 as reference };
                    const many_558: boolean;
                    export { many_558 as many };
                    const inverse_558: boolean;
                    export { inverse_558 as inverse };
                }
                export namespace Dim_10 {
                    const type_559: string;
                    export { type_559 as type };
                    const reference_559: boolean;
                    export { reference_559 as reference };
                    const many_559: boolean;
                    export { many_559 as many };
                    const inverse_559: boolean;
                    export { inverse_559 as inverse };
                }
                export { Dim_10 as Dim };
            }
            export { fields_220 as fields };
        }
        namespace IfcFaceBound {
            const domain_221: string;
            export { domain_221 as domain };
            const superclasses_221: string[];
            export { superclasses_221 as superclasses };
            export namespace fields_221 {
                namespace Bound {
                    const type_560: string;
                    export { type_560 as type };
                    const reference_560: boolean;
                    export { reference_560 as reference };
                    const many_560: boolean;
                    export { many_560 as many };
                    const inverse_560: boolean;
                    export { inverse_560 as inverse };
                }
                namespace Orientation {
                    const type_561: string;
                    export { type_561 as type };
                    const reference_561: boolean;
                    export { reference_561 as reference };
                    const many_561: boolean;
                    export { many_561 as many };
                    const inverse_561: boolean;
                    export { inverse_561 as inverse };
                }
            }
            export { fields_221 as fields };
        }
        namespace IfcFaceOuterBound {
            const domain_222: string;
            export { domain_222 as domain };
            const superclasses_222: string[];
            export { superclasses_222 as superclasses };
            const fields_222: {};
            export { fields_222 as fields };
        }
        namespace IfcFaceSurface {
            const domain_223: string;
            export { domain_223 as domain };
            const superclasses_223: string[];
            export { superclasses_223 as superclasses };
            export namespace fields_223 {
                export namespace FaceSurface {
                    const type_562: string;
                    export { type_562 as type };
                    const reference_562: boolean;
                    export { reference_562 as reference };
                    const many_562: boolean;
                    export { many_562 as many };
                    const inverse_562: boolean;
                    export { inverse_562 as inverse };
                }
                export namespace SameSense_2 {
                    const type_563: string;
                    export { type_563 as type };
                    const reference_563: boolean;
                    export { reference_563 as reference };
                    const many_563: boolean;
                    export { many_563 as many };
                    const inverse_563: boolean;
                    export { inverse_563 as inverse };
                }
                export { SameSense_2 as SameSense };
            }
            export { fields_223 as fields };
        }
        namespace IfcFacetedBrep {
            const domain_224: string;
            export { domain_224 as domain };
            const superclasses_224: string[];
            export { superclasses_224 as superclasses };
            const fields_224: {};
            export { fields_224 as fields };
        }
        namespace IfcFacetedBrepWithVoids {
            const domain_225: string;
            export { domain_225 as domain };
            const superclasses_225: string[];
            export { superclasses_225 as superclasses };
            export namespace fields_225 {
                namespace Voids {
                    const type_564: string;
                    export { type_564 as type };
                    const reference_564: boolean;
                    export { reference_564 as reference };
                    const many_564: boolean;
                    export { many_564 as many };
                    const inverse_564: boolean;
                    export { inverse_564 as inverse };
                }
            }
            export { fields_225 as fields };
        }
        namespace IfcFailureConnectionCondition {
            const domain_226: string;
            export { domain_226 as domain };
            const superclasses_226: string[];
            export { superclasses_226 as superclasses };
            export namespace fields_226 {
                namespace TensionFailureX {
                    const type_565: string;
                    export { type_565 as type };
                    const reference_565: boolean;
                    export { reference_565 as reference };
                    const many_565: boolean;
                    export { many_565 as many };
                    const inverse_565: boolean;
                    export { inverse_565 as inverse };
                }
                namespace TensionFailureXAsString {
                    const type_566: string;
                    export { type_566 as type };
                    const reference_566: boolean;
                    export { reference_566 as reference };
                    const many_566: boolean;
                    export { many_566 as many };
                    const inverse_566: boolean;
                    export { inverse_566 as inverse };
                }
                namespace TensionFailureY {
                    const type_567: string;
                    export { type_567 as type };
                    const reference_567: boolean;
                    export { reference_567 as reference };
                    const many_567: boolean;
                    export { many_567 as many };
                    const inverse_567: boolean;
                    export { inverse_567 as inverse };
                }
                namespace TensionFailureYAsString {
                    const type_568: string;
                    export { type_568 as type };
                    const reference_568: boolean;
                    export { reference_568 as reference };
                    const many_568: boolean;
                    export { many_568 as many };
                    const inverse_568: boolean;
                    export { inverse_568 as inverse };
                }
                namespace TensionFailureZ {
                    const type_569: string;
                    export { type_569 as type };
                    const reference_569: boolean;
                    export { reference_569 as reference };
                    const many_569: boolean;
                    export { many_569 as many };
                    const inverse_569: boolean;
                    export { inverse_569 as inverse };
                }
                namespace TensionFailureZAsString {
                    const type_570: string;
                    export { type_570 as type };
                    const reference_570: boolean;
                    export { reference_570 as reference };
                    const many_570: boolean;
                    export { many_570 as many };
                    const inverse_570: boolean;
                    export { inverse_570 as inverse };
                }
                namespace CompressionFailureX {
                    const type_571: string;
                    export { type_571 as type };
                    const reference_571: boolean;
                    export { reference_571 as reference };
                    const many_571: boolean;
                    export { many_571 as many };
                    const inverse_571: boolean;
                    export { inverse_571 as inverse };
                }
                namespace CompressionFailureXAsString {
                    const type_572: string;
                    export { type_572 as type };
                    const reference_572: boolean;
                    export { reference_572 as reference };
                    const many_572: boolean;
                    export { many_572 as many };
                    const inverse_572: boolean;
                    export { inverse_572 as inverse };
                }
                namespace CompressionFailureY {
                    const type_573: string;
                    export { type_573 as type };
                    const reference_573: boolean;
                    export { reference_573 as reference };
                    const many_573: boolean;
                    export { many_573 as many };
                    const inverse_573: boolean;
                    export { inverse_573 as inverse };
                }
                namespace CompressionFailureYAsString {
                    const type_574: string;
                    export { type_574 as type };
                    const reference_574: boolean;
                    export { reference_574 as reference };
                    const many_574: boolean;
                    export { many_574 as many };
                    const inverse_574: boolean;
                    export { inverse_574 as inverse };
                }
                namespace CompressionFailureZ {
                    const type_575: string;
                    export { type_575 as type };
                    const reference_575: boolean;
                    export { reference_575 as reference };
                    const many_575: boolean;
                    export { many_575 as many };
                    const inverse_575: boolean;
                    export { inverse_575 as inverse };
                }
                namespace CompressionFailureZAsString {
                    const type_576: string;
                    export { type_576 as type };
                    const reference_576: boolean;
                    export { reference_576 as reference };
                    const many_576: boolean;
                    export { many_576 as many };
                    const inverse_576: boolean;
                    export { inverse_576 as inverse };
                }
            }
            export { fields_226 as fields };
        }
        namespace IfcFanType {
            const domain_227: string;
            export { domain_227 as domain };
            const superclasses_227: string[];
            export { superclasses_227 as superclasses };
            export namespace fields_227 {
                export namespace PredefinedType_37 {
                    const type_577: string;
                    export { type_577 as type };
                    const reference_577: boolean;
                    export { reference_577 as reference };
                    const many_577: boolean;
                    export { many_577 as many };
                    const inverse_577: boolean;
                    export { inverse_577 as inverse };
                }
                export { PredefinedType_37 as PredefinedType };
            }
            export { fields_227 as fields };
        }
        namespace IfcFastener {
            const domain_228: string;
            export { domain_228 as domain };
            const superclasses_228: string[];
            export { superclasses_228 as superclasses };
            const fields_228: {};
            export { fields_228 as fields };
        }
        namespace IfcFastenerType {
            const domain_229: string;
            export { domain_229 as domain };
            const superclasses_229: string[];
            export { superclasses_229 as superclasses };
            const fields_229: {};
            export { fields_229 as fields };
        }
        namespace IfcFeatureElement {
            const domain_230: string;
            export { domain_230 as domain };
            const superclasses_230: string[];
            export { superclasses_230 as superclasses };
            const fields_230: {};
            export { fields_230 as fields };
        }
        namespace IfcFeatureElementAddition {
            const domain_231: string;
            export { domain_231 as domain };
            const superclasses_231: string[];
            export { superclasses_231 as superclasses };
            export namespace fields_231 {
                namespace ProjectsElements {
                    const type_578: string;
                    export { type_578 as type };
                    const reference_578: boolean;
                    export { reference_578 as reference };
                    const many_578: boolean;
                    export { many_578 as many };
                    const inverse_578: boolean;
                    export { inverse_578 as inverse };
                }
            }
            export { fields_231 as fields };
        }
        namespace IfcFeatureElementSubtraction {
            const domain_232: string;
            export { domain_232 as domain };
            const superclasses_232: string[];
            export { superclasses_232 as superclasses };
            export namespace fields_232 {
                namespace VoidsElements {
                    const type_579: string;
                    export { type_579 as type };
                    const reference_579: boolean;
                    export { reference_579 as reference };
                    const many_579: boolean;
                    export { many_579 as many };
                    const inverse_579: boolean;
                    export { inverse_579 as inverse };
                }
            }
            export { fields_232 as fields };
        }
        namespace IfcFillAreaStyle {
            const domain_233: string;
            export { domain_233 as domain };
            const superclasses_233: string[];
            export { superclasses_233 as superclasses };
            export namespace fields_233 {
                namespace FillStyles {
                    const type_580: string;
                    export { type_580 as type };
                    const reference_580: boolean;
                    export { reference_580 as reference };
                    const many_580: boolean;
                    export { many_580 as many };
                    const inverse_580: boolean;
                    export { inverse_580 as inverse };
                }
            }
            export { fields_233 as fields };
        }
        namespace IfcFillAreaStyleHatching {
            const domain_234: string;
            export { domain_234 as domain };
            const superclasses_234: string[];
            export { superclasses_234 as superclasses };
            export namespace fields_234 {
                namespace HatchLineAppearance {
                    const type_581: string;
                    export { type_581 as type };
                    const reference_581: boolean;
                    export { reference_581 as reference };
                    const many_581: boolean;
                    export { many_581 as many };
                    const inverse_581: boolean;
                    export { inverse_581 as inverse };
                }
                namespace StartOfNextHatchLine {
                    const type_582: string;
                    export { type_582 as type };
                    const reference_582: boolean;
                    export { reference_582 as reference };
                    const many_582: boolean;
                    export { many_582 as many };
                    const inverse_582: boolean;
                    export { inverse_582 as inverse };
                }
                namespace PointOfReferenceHatchLine {
                    const type_583: string;
                    export { type_583 as type };
                    const reference_583: boolean;
                    export { reference_583 as reference };
                    const many_583: boolean;
                    export { many_583 as many };
                    const inverse_583: boolean;
                    export { inverse_583 as inverse };
                }
                namespace PatternStart {
                    const type_584: string;
                    export { type_584 as type };
                    const reference_584: boolean;
                    export { reference_584 as reference };
                    const many_584: boolean;
                    export { many_584 as many };
                    const inverse_584: boolean;
                    export { inverse_584 as inverse };
                }
                namespace HatchLineAngle {
                    const type_585: string;
                    export { type_585 as type };
                    const reference_585: boolean;
                    export { reference_585 as reference };
                    const many_585: boolean;
                    export { many_585 as many };
                    const inverse_585: boolean;
                    export { inverse_585 as inverse };
                }
                namespace HatchLineAngleAsString {
                    const type_586: string;
                    export { type_586 as type };
                    const reference_586: boolean;
                    export { reference_586 as reference };
                    const many_586: boolean;
                    export { many_586 as many };
                    const inverse_586: boolean;
                    export { inverse_586 as inverse };
                }
            }
            export { fields_234 as fields };
        }
        namespace IfcFillAreaStyleTileSymbolWithStyle {
            const domain_235: string;
            export { domain_235 as domain };
            const superclasses_235: string[];
            export { superclasses_235 as superclasses };
            export namespace fields_235 {
                namespace Symbol {
                    const type_587: string;
                    export { type_587 as type };
                    const reference_587: boolean;
                    export { reference_587 as reference };
                    const many_587: boolean;
                    export { many_587 as many };
                    const inverse_587: boolean;
                    export { inverse_587 as inverse };
                }
            }
            export { fields_235 as fields };
        }
        namespace IfcFillAreaStyleTiles {
            const domain_236: string;
            export { domain_236 as domain };
            const superclasses_236: string[];
            export { superclasses_236 as superclasses };
            export namespace fields_236 {
                namespace TilingPattern {
                    const type_588: string;
                    export { type_588 as type };
                    const reference_588: boolean;
                    export { reference_588 as reference };
                    const many_588: boolean;
                    export { many_588 as many };
                    const inverse_588: boolean;
                    export { inverse_588 as inverse };
                }
                namespace Tiles {
                    const type_589: string;
                    export { type_589 as type };
                    const reference_589: boolean;
                    export { reference_589 as reference };
                    const many_589: boolean;
                    export { many_589 as many };
                    const inverse_589: boolean;
                    export { inverse_589 as inverse };
                }
                namespace TilingScale {
                    const type_590: string;
                    export { type_590 as type };
                    const reference_590: boolean;
                    export { reference_590 as reference };
                    const many_590: boolean;
                    export { many_590 as many };
                    const inverse_590: boolean;
                    export { inverse_590 as inverse };
                }
                namespace TilingScaleAsString {
                    const type_591: string;
                    export { type_591 as type };
                    const reference_591: boolean;
                    export { reference_591 as reference };
                    const many_591: boolean;
                    export { many_591 as many };
                    const inverse_591: boolean;
                    export { inverse_591 as inverse };
                }
            }
            export { fields_236 as fields };
        }
        namespace IfcFilterType {
            const domain_237: string;
            export { domain_237 as domain };
            const superclasses_237: string[];
            export { superclasses_237 as superclasses };
            export namespace fields_237 {
                export namespace PredefinedType_38 {
                    const type_592: string;
                    export { type_592 as type };
                    const reference_592: boolean;
                    export { reference_592 as reference };
                    const many_592: boolean;
                    export { many_592 as many };
                    const inverse_592: boolean;
                    export { inverse_592 as inverse };
                }
                export { PredefinedType_38 as PredefinedType };
            }
            export { fields_237 as fields };
        }
        namespace IfcFireSuppressionTerminalType {
            const domain_238: string;
            export { domain_238 as domain };
            const superclasses_238: string[];
            export { superclasses_238 as superclasses };
            export namespace fields_238 {
                export namespace PredefinedType_39 {
                    const type_593: string;
                    export { type_593 as type };
                    const reference_593: boolean;
                    export { reference_593 as reference };
                    const many_593: boolean;
                    export { many_593 as many };
                    const inverse_593: boolean;
                    export { inverse_593 as inverse };
                }
                export { PredefinedType_39 as PredefinedType };
            }
            export { fields_238 as fields };
        }
        namespace IfcFlowController {
            const domain_239: string;
            export { domain_239 as domain };
            const superclasses_239: string[];
            export { superclasses_239 as superclasses };
            const fields_239: {};
            export { fields_239 as fields };
        }
        namespace IfcFlowControllerType {
            const domain_240: string;
            export { domain_240 as domain };
            const superclasses_240: string[];
            export { superclasses_240 as superclasses };
            const fields_240: {};
            export { fields_240 as fields };
        }
        namespace IfcFlowFitting {
            const domain_241: string;
            export { domain_241 as domain };
            const superclasses_241: string[];
            export { superclasses_241 as superclasses };
            const fields_241: {};
            export { fields_241 as fields };
        }
        namespace IfcFlowFittingType {
            const domain_242: string;
            export { domain_242 as domain };
            const superclasses_242: string[];
            export { superclasses_242 as superclasses };
            const fields_242: {};
            export { fields_242 as fields };
        }
        namespace IfcFlowInstrumentType {
            const domain_243: string;
            export { domain_243 as domain };
            const superclasses_243: string[];
            export { superclasses_243 as superclasses };
            export namespace fields_243 {
                export namespace PredefinedType_40 {
                    const type_594: string;
                    export { type_594 as type };
                    const reference_594: boolean;
                    export { reference_594 as reference };
                    const many_594: boolean;
                    export { many_594 as many };
                    const inverse_594: boolean;
                    export { inverse_594 as inverse };
                }
                export { PredefinedType_40 as PredefinedType };
            }
            export { fields_243 as fields };
        }
        namespace IfcFlowMeterType {
            const domain_244: string;
            export { domain_244 as domain };
            const superclasses_244: string[];
            export { superclasses_244 as superclasses };
            export namespace fields_244 {
                export namespace PredefinedType_41 {
                    const type_595: string;
                    export { type_595 as type };
                    const reference_595: boolean;
                    export { reference_595 as reference };
                    const many_595: boolean;
                    export { many_595 as many };
                    const inverse_595: boolean;
                    export { inverse_595 as inverse };
                }
                export { PredefinedType_41 as PredefinedType };
            }
            export { fields_244 as fields };
        }
        namespace IfcFlowMovingDevice {
            const domain_245: string;
            export { domain_245 as domain };
            const superclasses_245: string[];
            export { superclasses_245 as superclasses };
            const fields_245: {};
            export { fields_245 as fields };
        }
        namespace IfcFlowMovingDeviceType {
            const domain_246: string;
            export { domain_246 as domain };
            const superclasses_246: string[];
            export { superclasses_246 as superclasses };
            const fields_246: {};
            export { fields_246 as fields };
        }
        namespace IfcFlowSegment {
            const domain_247: string;
            export { domain_247 as domain };
            const superclasses_247: string[];
            export { superclasses_247 as superclasses };
            const fields_247: {};
            export { fields_247 as fields };
        }
        namespace IfcFlowSegmentType {
            const domain_248: string;
            export { domain_248 as domain };
            const superclasses_248: string[];
            export { superclasses_248 as superclasses };
            const fields_248: {};
            export { fields_248 as fields };
        }
        namespace IfcFlowStorageDevice {
            const domain_249: string;
            export { domain_249 as domain };
            const superclasses_249: string[];
            export { superclasses_249 as superclasses };
            const fields_249: {};
            export { fields_249 as fields };
        }
        namespace IfcFlowStorageDeviceType {
            const domain_250: string;
            export { domain_250 as domain };
            const superclasses_250: string[];
            export { superclasses_250 as superclasses };
            const fields_250: {};
            export { fields_250 as fields };
        }
        namespace IfcFlowTerminal {
            const domain_251: string;
            export { domain_251 as domain };
            const superclasses_251: string[];
            export { superclasses_251 as superclasses };
            const fields_251: {};
            export { fields_251 as fields };
        }
        namespace IfcFlowTerminalType {
            const domain_252: string;
            export { domain_252 as domain };
            const superclasses_252: string[];
            export { superclasses_252 as superclasses };
            const fields_252: {};
            export { fields_252 as fields };
        }
        namespace IfcFlowTreatmentDevice {
            const domain_253: string;
            export { domain_253 as domain };
            const superclasses_253: string[];
            export { superclasses_253 as superclasses };
            const fields_253: {};
            export { fields_253 as fields };
        }
        namespace IfcFlowTreatmentDeviceType {
            const domain_254: string;
            export { domain_254 as domain };
            const superclasses_254: string[];
            export { superclasses_254 as superclasses };
            const fields_254: {};
            export { fields_254 as fields };
        }
        namespace IfcFluidFlowProperties {
            const domain_255: string;
            export { domain_255 as domain };
            const superclasses_255: string[];
            export { superclasses_255 as superclasses };
            export namespace fields_255 {
                namespace PropertySource {
                    const type_596: string;
                    export { type_596 as type };
                    const reference_596: boolean;
                    export { reference_596 as reference };
                    const many_596: boolean;
                    export { many_596 as many };
                    const inverse_596: boolean;
                    export { inverse_596 as inverse };
                }
                namespace FlowConditionTimeSeries {
                    const type_597: string;
                    export { type_597 as type };
                    const reference_597: boolean;
                    export { reference_597 as reference };
                    const many_597: boolean;
                    export { many_597 as many };
                    const inverse_597: boolean;
                    export { inverse_597 as inverse };
                }
                namespace VelocityTimeSeries {
                    const type_598: string;
                    export { type_598 as type };
                    const reference_598: boolean;
                    export { reference_598 as reference };
                    const many_598: boolean;
                    export { many_598 as many };
                    const inverse_598: boolean;
                    export { inverse_598 as inverse };
                }
                namespace FlowrateTimeSeries {
                    const type_599: string;
                    export { type_599 as type };
                    const reference_599: boolean;
                    export { reference_599 as reference };
                    const many_599: boolean;
                    export { many_599 as many };
                    const inverse_599: boolean;
                    export { inverse_599 as inverse };
                }
                namespace Fluid {
                    const type_600: string;
                    export { type_600 as type };
                    const reference_600: boolean;
                    export { reference_600 as reference };
                    const many_600: boolean;
                    export { many_600 as many };
                    const inverse_600: boolean;
                    export { inverse_600 as inverse };
                }
                namespace PressureTimeSeries {
                    const type_601: string;
                    export { type_601 as type };
                    const reference_601: boolean;
                    export { reference_601 as reference };
                    const many_601: boolean;
                    export { many_601 as many };
                    const inverse_601: boolean;
                    export { inverse_601 as inverse };
                }
                namespace UserDefinedPropertySource {
                    const type_602: string;
                    export { type_602 as type };
                    const reference_602: boolean;
                    export { reference_602 as reference };
                    const many_602: boolean;
                    export { many_602 as many };
                    const inverse_602: boolean;
                    export { inverse_602 as inverse };
                }
                namespace TemperatureSingleValue {
                    const type_603: string;
                    export { type_603 as type };
                    const reference_603: boolean;
                    export { reference_603 as reference };
                    const many_603: boolean;
                    export { many_603 as many };
                    const inverse_603: boolean;
                    export { inverse_603 as inverse };
                }
                namespace TemperatureSingleValueAsString {
                    const type_604: string;
                    export { type_604 as type };
                    const reference_604: boolean;
                    export { reference_604 as reference };
                    const many_604: boolean;
                    export { many_604 as many };
                    const inverse_604: boolean;
                    export { inverse_604 as inverse };
                }
                namespace WetBulbTemperatureSingleValue {
                    const type_605: string;
                    export { type_605 as type };
                    const reference_605: boolean;
                    export { reference_605 as reference };
                    const many_605: boolean;
                    export { many_605 as many };
                    const inverse_605: boolean;
                    export { inverse_605 as inverse };
                }
                namespace WetBulbTemperatureSingleValueAsString {
                    const type_606: string;
                    export { type_606 as type };
                    const reference_606: boolean;
                    export { reference_606 as reference };
                    const many_606: boolean;
                    export { many_606 as many };
                    const inverse_606: boolean;
                    export { inverse_606 as inverse };
                }
                namespace WetBulbTemperatureTimeSeries {
                    const type_607: string;
                    export { type_607 as type };
                    const reference_607: boolean;
                    export { reference_607 as reference };
                    const many_607: boolean;
                    export { many_607 as many };
                    const inverse_607: boolean;
                    export { inverse_607 as inverse };
                }
                namespace TemperatureTimeSeries {
                    const type_608: string;
                    export { type_608 as type };
                    const reference_608: boolean;
                    export { reference_608 as reference };
                    const many_608: boolean;
                    export { many_608 as many };
                    const inverse_608: boolean;
                    export { inverse_608 as inverse };
                }
                namespace FlowrateSingleValue {
                    const type_609: string;
                    export { type_609 as type };
                    const reference_609: boolean;
                    export { reference_609 as reference };
                    const many_609: boolean;
                    export { many_609 as many };
                    const inverse_609: boolean;
                    export { inverse_609 as inverse };
                }
                namespace FlowConditionSingleValue {
                    const type_610: string;
                    export { type_610 as type };
                    const reference_610: boolean;
                    export { reference_610 as reference };
                    const many_610: boolean;
                    export { many_610 as many };
                    const inverse_610: boolean;
                    export { inverse_610 as inverse };
                }
                namespace FlowConditionSingleValueAsString {
                    const type_611: string;
                    export { type_611 as type };
                    const reference_611: boolean;
                    export { reference_611 as reference };
                    const many_611: boolean;
                    export { many_611 as many };
                    const inverse_611: boolean;
                    export { inverse_611 as inverse };
                }
                namespace VelocitySingleValue {
                    const type_612: string;
                    export { type_612 as type };
                    const reference_612: boolean;
                    export { reference_612 as reference };
                    const many_612: boolean;
                    export { many_612 as many };
                    const inverse_612: boolean;
                    export { inverse_612 as inverse };
                }
                namespace VelocitySingleValueAsString {
                    const type_613: string;
                    export { type_613 as type };
                    const reference_613: boolean;
                    export { reference_613 as reference };
                    const many_613: boolean;
                    export { many_613 as many };
                    const inverse_613: boolean;
                    export { inverse_613 as inverse };
                }
                namespace PressureSingleValue {
                    const type_614: string;
                    export { type_614 as type };
                    const reference_614: boolean;
                    export { reference_614 as reference };
                    const many_614: boolean;
                    export { many_614 as many };
                    const inverse_614: boolean;
                    export { inverse_614 as inverse };
                }
                namespace PressureSingleValueAsString {
                    const type_615: string;
                    export { type_615 as type };
                    const reference_615: boolean;
                    export { reference_615 as reference };
                    const many_615: boolean;
                    export { many_615 as many };
                    const inverse_615: boolean;
                    export { inverse_615 as inverse };
                }
            }
            export { fields_255 as fields };
        }
        namespace IfcFooting {
            const domain_256: string;
            export { domain_256 as domain };
            const superclasses_256: string[];
            export { superclasses_256 as superclasses };
            export namespace fields_256 {
                export namespace PredefinedType_42 {
                    const type_616: string;
                    export { type_616 as type };
                    const reference_616: boolean;
                    export { reference_616 as reference };
                    const many_616: boolean;
                    export { many_616 as many };
                    const inverse_616: boolean;
                    export { inverse_616 as inverse };
                }
                export { PredefinedType_42 as PredefinedType };
            }
            export { fields_256 as fields };
        }
        namespace IfcFuelProperties {
            const domain_257: string;
            export { domain_257 as domain };
            const superclasses_257: string[];
            export { superclasses_257 as superclasses };
            export namespace fields_257 {
                namespace CombustionTemperature {
                    const type_617: string;
                    export { type_617 as type };
                    const reference_617: boolean;
                    export { reference_617 as reference };
                    const many_617: boolean;
                    export { many_617 as many };
                    const inverse_617: boolean;
                    export { inverse_617 as inverse };
                }
                namespace CombustionTemperatureAsString {
                    const type_618: string;
                    export { type_618 as type };
                    const reference_618: boolean;
                    export { reference_618 as reference };
                    const many_618: boolean;
                    export { many_618 as many };
                    const inverse_618: boolean;
                    export { inverse_618 as inverse };
                }
                namespace CarbonContent {
                    const type_619: string;
                    export { type_619 as type };
                    const reference_619: boolean;
                    export { reference_619 as reference };
                    const many_619: boolean;
                    export { many_619 as many };
                    const inverse_619: boolean;
                    export { inverse_619 as inverse };
                }
                namespace CarbonContentAsString {
                    const type_620: string;
                    export { type_620 as type };
                    const reference_620: boolean;
                    export { reference_620 as reference };
                    const many_620: boolean;
                    export { many_620 as many };
                    const inverse_620: boolean;
                    export { inverse_620 as inverse };
                }
                namespace LowerHeatingValue {
                    const type_621: string;
                    export { type_621 as type };
                    const reference_621: boolean;
                    export { reference_621 as reference };
                    const many_621: boolean;
                    export { many_621 as many };
                    const inverse_621: boolean;
                    export { inverse_621 as inverse };
                }
                namespace LowerHeatingValueAsString {
                    const type_622: string;
                    export { type_622 as type };
                    const reference_622: boolean;
                    export { reference_622 as reference };
                    const many_622: boolean;
                    export { many_622 as many };
                    const inverse_622: boolean;
                    export { inverse_622 as inverse };
                }
                namespace HigherHeatingValue {
                    const type_623: string;
                    export { type_623 as type };
                    const reference_623: boolean;
                    export { reference_623 as reference };
                    const many_623: boolean;
                    export { many_623 as many };
                    const inverse_623: boolean;
                    export { inverse_623 as inverse };
                }
                namespace HigherHeatingValueAsString {
                    const type_624: string;
                    export { type_624 as type };
                    const reference_624: boolean;
                    export { reference_624 as reference };
                    const many_624: boolean;
                    export { many_624 as many };
                    const inverse_624: boolean;
                    export { inverse_624 as inverse };
                }
            }
            export { fields_257 as fields };
        }
        namespace IfcFurnishingElement {
            const domain_258: string;
            export { domain_258 as domain };
            const superclasses_258: string[];
            export { superclasses_258 as superclasses };
            const fields_258: {};
            export { fields_258 as fields };
        }
        namespace IfcFurnishingElementType {
            const domain_259: string;
            export { domain_259 as domain };
            const superclasses_259: string[];
            export { superclasses_259 as superclasses };
            const fields_259: {};
            export { fields_259 as fields };
        }
        namespace IfcFurnitureStandard {
            const domain_260: string;
            export { domain_260 as domain };
            const superclasses_260: string[];
            export { superclasses_260 as superclasses };
            const fields_260: {};
            export { fields_260 as fields };
        }
        namespace IfcFurnitureType {
            const domain_261: string;
            export { domain_261 as domain };
            const superclasses_261: string[];
            export { superclasses_261 as superclasses };
            export namespace fields_261 {
                export namespace AssemblyPlace_1 {
                    const type_625: string;
                    export { type_625 as type };
                    const reference_625: boolean;
                    export { reference_625 as reference };
                    const many_625: boolean;
                    export { many_625 as many };
                    const inverse_625: boolean;
                    export { inverse_625 as inverse };
                }
                export { AssemblyPlace_1 as AssemblyPlace };
            }
            export { fields_261 as fields };
        }
        namespace IfcGasTerminalType {
            const domain_262: string;
            export { domain_262 as domain };
            const superclasses_262: string[];
            export { superclasses_262 as superclasses };
            export namespace fields_262 {
                export namespace PredefinedType_43 {
                    const type_626: string;
                    export { type_626 as type };
                    const reference_626: boolean;
                    export { reference_626 as reference };
                    const many_626: boolean;
                    export { many_626 as many };
                    const inverse_626: boolean;
                    export { inverse_626 as inverse };
                }
                export { PredefinedType_43 as PredefinedType };
            }
            export { fields_262 as fields };
        }
        namespace IfcGeneralMaterialProperties {
            const domain_263: string;
            export { domain_263 as domain };
            const superclasses_263: string[];
            export { superclasses_263 as superclasses };
            export namespace fields_263 {
                namespace MolecularWeight {
                    const type_627: string;
                    export { type_627 as type };
                    const reference_627: boolean;
                    export { reference_627 as reference };
                    const many_627: boolean;
                    export { many_627 as many };
                    const inverse_627: boolean;
                    export { inverse_627 as inverse };
                }
                namespace MolecularWeightAsString {
                    const type_628: string;
                    export { type_628 as type };
                    const reference_628: boolean;
                    export { reference_628 as reference };
                    const many_628: boolean;
                    export { many_628 as many };
                    const inverse_628: boolean;
                    export { inverse_628 as inverse };
                }
                namespace Porosity {
                    const type_629: string;
                    export { type_629 as type };
                    const reference_629: boolean;
                    export { reference_629 as reference };
                    const many_629: boolean;
                    export { many_629 as many };
                    const inverse_629: boolean;
                    export { inverse_629 as inverse };
                }
                namespace PorosityAsString {
                    const type_630: string;
                    export { type_630 as type };
                    const reference_630: boolean;
                    export { reference_630 as reference };
                    const many_630: boolean;
                    export { many_630 as many };
                    const inverse_630: boolean;
                    export { inverse_630 as inverse };
                }
                namespace MassDensity {
                    const type_631: string;
                    export { type_631 as type };
                    const reference_631: boolean;
                    export { reference_631 as reference };
                    const many_631: boolean;
                    export { many_631 as many };
                    const inverse_631: boolean;
                    export { inverse_631 as inverse };
                }
                namespace MassDensityAsString {
                    const type_632: string;
                    export { type_632 as type };
                    const reference_632: boolean;
                    export { reference_632 as reference };
                    const many_632: boolean;
                    export { many_632 as many };
                    const inverse_632: boolean;
                    export { inverse_632 as inverse };
                }
            }
            export { fields_263 as fields };
        }
        namespace IfcGeneralProfileProperties {
            const domain_264: string;
            export { domain_264 as domain };
            const superclasses_264: string[];
            export { superclasses_264 as superclasses };
            export namespace fields_264 {
                namespace PhysicalWeight {
                    const type_633: string;
                    export { type_633 as type };
                    const reference_633: boolean;
                    export { reference_633 as reference };
                    const many_633: boolean;
                    export { many_633 as many };
                    const inverse_633: boolean;
                    export { inverse_633 as inverse };
                }
                namespace PhysicalWeightAsString {
                    const type_634: string;
                    export { type_634 as type };
                    const reference_634: boolean;
                    export { reference_634 as reference };
                    const many_634: boolean;
                    export { many_634 as many };
                    const inverse_634: boolean;
                    export { inverse_634 as inverse };
                }
                namespace Perimeter {
                    const type_635: string;
                    export { type_635 as type };
                    const reference_635: boolean;
                    export { reference_635 as reference };
                    const many_635: boolean;
                    export { many_635 as many };
                    const inverse_635: boolean;
                    export { inverse_635 as inverse };
                }
                namespace PerimeterAsString {
                    const type_636: string;
                    export { type_636 as type };
                    const reference_636: boolean;
                    export { reference_636 as reference };
                    const many_636: boolean;
                    export { many_636 as many };
                    const inverse_636: boolean;
                    export { inverse_636 as inverse };
                }
                namespace MinimumPlateThickness {
                    const type_637: string;
                    export { type_637 as type };
                    const reference_637: boolean;
                    export { reference_637 as reference };
                    const many_637: boolean;
                    export { many_637 as many };
                    const inverse_637: boolean;
                    export { inverse_637 as inverse };
                }
                namespace MinimumPlateThicknessAsString {
                    const type_638: string;
                    export { type_638 as type };
                    const reference_638: boolean;
                    export { reference_638 as reference };
                    const many_638: boolean;
                    export { many_638 as many };
                    const inverse_638: boolean;
                    export { inverse_638 as inverse };
                }
                namespace MaximumPlateThickness {
                    const type_639: string;
                    export { type_639 as type };
                    const reference_639: boolean;
                    export { reference_639 as reference };
                    const many_639: boolean;
                    export { many_639 as many };
                    const inverse_639: boolean;
                    export { inverse_639 as inverse };
                }
                namespace MaximumPlateThicknessAsString {
                    const type_640: string;
                    export { type_640 as type };
                    const reference_640: boolean;
                    export { reference_640 as reference };
                    const many_640: boolean;
                    export { many_640 as many };
                    const inverse_640: boolean;
                    export { inverse_640 as inverse };
                }
                namespace CrossSectionArea {
                    const type_641: string;
                    export { type_641 as type };
                    const reference_641: boolean;
                    export { reference_641 as reference };
                    const many_641: boolean;
                    export { many_641 as many };
                    const inverse_641: boolean;
                    export { inverse_641 as inverse };
                }
                namespace CrossSectionAreaAsString {
                    const type_642: string;
                    export { type_642 as type };
                    const reference_642: boolean;
                    export { reference_642 as reference };
                    const many_642: boolean;
                    export { many_642 as many };
                    const inverse_642: boolean;
                    export { inverse_642 as inverse };
                }
            }
            export { fields_264 as fields };
        }
        namespace IfcGeometricCurveSet {
            const domain_265: string;
            export { domain_265 as domain };
            const superclasses_265: string[];
            export { superclasses_265 as superclasses };
            const fields_265: {};
            export { fields_265 as fields };
        }
        namespace IfcGeometricRepresentationContext {
            const domain_266: string;
            export { domain_266 as domain };
            const superclasses_266: string[];
            export { superclasses_266 as superclasses };
            export namespace fields_266 {
                namespace CoordinateSpaceDimension {
                    const type_643: string;
                    export { type_643 as type };
                    const reference_643: boolean;
                    export { reference_643 as reference };
                    const many_643: boolean;
                    export { many_643 as many };
                    const inverse_643: boolean;
                    export { inverse_643 as inverse };
                }
                namespace Precision {
                    const type_644: string;
                    export { type_644 as type };
                    const reference_644: boolean;
                    export { reference_644 as reference };
                    const many_644: boolean;
                    export { many_644 as many };
                    const inverse_644: boolean;
                    export { inverse_644 as inverse };
                }
                namespace PrecisionAsString {
                    const type_645: string;
                    export { type_645 as type };
                    const reference_645: boolean;
                    export { reference_645 as reference };
                    const many_645: boolean;
                    export { many_645 as many };
                    const inverse_645: boolean;
                    export { inverse_645 as inverse };
                }
                namespace WorldCoordinateSystem {
                    const type_646: string;
                    export { type_646 as type };
                    const reference_646: boolean;
                    export { reference_646 as reference };
                    const many_646: boolean;
                    export { many_646 as many };
                    const inverse_646: boolean;
                    export { inverse_646 as inverse };
                }
                namespace TrueNorth {
                    const type_647: string;
                    export { type_647 as type };
                    const reference_647: boolean;
                    export { reference_647 as reference };
                    const many_647: boolean;
                    export { many_647 as many };
                    const inverse_647: boolean;
                    export { inverse_647 as inverse };
                }
                namespace HasSubContexts {
                    const type_648: string;
                    export { type_648 as type };
                    const reference_648: boolean;
                    export { reference_648 as reference };
                    const many_648: boolean;
                    export { many_648 as many };
                    const inverse_648: boolean;
                    export { inverse_648 as inverse };
                }
            }
            export { fields_266 as fields };
        }
        namespace IfcGeometricRepresentationItem {
            const domain_267: string;
            export { domain_267 as domain };
            const superclasses_267: string[];
            export { superclasses_267 as superclasses };
            const fields_267: {};
            export { fields_267 as fields };
        }
        namespace IfcGeometricRepresentationSubContext {
            const domain_268: string;
            export { domain_268 as domain };
            const superclasses_268: string[];
            export { superclasses_268 as superclasses };
            export namespace fields_268 {
                namespace ParentContext {
                    const type_649: string;
                    export { type_649 as type };
                    const reference_649: boolean;
                    export { reference_649 as reference };
                    const many_649: boolean;
                    export { many_649 as many };
                    const inverse_649: boolean;
                    export { inverse_649 as inverse };
                }
                namespace TargetScale {
                    const type_650: string;
                    export { type_650 as type };
                    const reference_650: boolean;
                    export { reference_650 as reference };
                    const many_650: boolean;
                    export { many_650 as many };
                    const inverse_650: boolean;
                    export { inverse_650 as inverse };
                }
                namespace TargetScaleAsString {
                    const type_651: string;
                    export { type_651 as type };
                    const reference_651: boolean;
                    export { reference_651 as reference };
                    const many_651: boolean;
                    export { many_651 as many };
                    const inverse_651: boolean;
                    export { inverse_651 as inverse };
                }
                namespace TargetView {
                    const type_652: string;
                    export { type_652 as type };
                    const reference_652: boolean;
                    export { reference_652 as reference };
                    const many_652: boolean;
                    export { many_652 as many };
                    const inverse_652: boolean;
                    export { inverse_652 as inverse };
                }
                namespace UserDefinedTargetView {
                    const type_653: string;
                    export { type_653 as type };
                    const reference_653: boolean;
                    export { reference_653 as reference };
                    const many_653: boolean;
                    export { many_653 as many };
                    const inverse_653: boolean;
                    export { inverse_653 as inverse };
                }
            }
            export { fields_268 as fields };
        }
        namespace IfcGeometricSet {
            const domain_269: string;
            export { domain_269 as domain };
            const superclasses_269: string[];
            export { superclasses_269 as superclasses };
            export namespace fields_269 {
                export namespace Elements_1 {
                    const type_654: string;
                    export { type_654 as type };
                    const reference_654: boolean;
                    export { reference_654 as reference };
                    const many_654: boolean;
                    export { many_654 as many };
                    const inverse_654: boolean;
                    export { inverse_654 as inverse };
                }
                export { Elements_1 as Elements };
                export namespace Dim_11 {
                    const type_655: string;
                    export { type_655 as type };
                    const reference_655: boolean;
                    export { reference_655 as reference };
                    const many_655: boolean;
                    export { many_655 as many };
                    const inverse_655: boolean;
                    export { inverse_655 as inverse };
                }
                export { Dim_11 as Dim };
            }
            export { fields_269 as fields };
        }
        namespace IfcGrid {
            const domain_270: string;
            export { domain_270 as domain };
            const superclasses_270: string[];
            export { superclasses_270 as superclasses };
            export namespace fields_270 {
                export namespace UAxes {
                    const type_656: string;
                    export { type_656 as type };
                    const reference_656: boolean;
                    export { reference_656 as reference };
                    const many_656: boolean;
                    export { many_656 as many };
                    const inverse_656: boolean;
                    export { inverse_656 as inverse };
                }
                export namespace VAxes {
                    const type_657: string;
                    export { type_657 as type };
                    const reference_657: boolean;
                    export { reference_657 as reference };
                    const many_657: boolean;
                    export { many_657 as many };
                    const inverse_657: boolean;
                    export { inverse_657 as inverse };
                }
                export namespace WAxes {
                    const type_658: string;
                    export { type_658 as type };
                    const reference_658: boolean;
                    export { reference_658 as reference };
                    const many_658: boolean;
                    export { many_658 as many };
                    const inverse_658: boolean;
                    export { inverse_658 as inverse };
                }
                export namespace ContainedInStructure_2 {
                    const type_659: string;
                    export { type_659 as type };
                    const reference_659: boolean;
                    export { reference_659 as reference };
                    const many_659: boolean;
                    export { many_659 as many };
                    const inverse_659: boolean;
                    export { inverse_659 as inverse };
                }
                export { ContainedInStructure_2 as ContainedInStructure };
            }
            export { fields_270 as fields };
        }
        namespace IfcGridAxis {
            const domain_271: string;
            export { domain_271 as domain };
            const superclasses_271: any[];
            export { superclasses_271 as superclasses };
            export namespace fields_271 {
                export namespace AxisTag {
                    const type_660: string;
                    export { type_660 as type };
                    const reference_660: boolean;
                    export { reference_660 as reference };
                    const many_660: boolean;
                    export { many_660 as many };
                    const inverse_660: boolean;
                    export { inverse_660 as inverse };
                }
                export namespace AxisCurve {
                    const type_661: string;
                    export { type_661 as type };
                    const reference_661: boolean;
                    export { reference_661 as reference };
                    const many_661: boolean;
                    export { many_661 as many };
                    const inverse_661: boolean;
                    export { inverse_661 as inverse };
                }
                export namespace SameSense_3 {
                    const type_662: string;
                    export { type_662 as type };
                    const reference_662: boolean;
                    export { reference_662 as reference };
                    const many_662: boolean;
                    export { many_662 as many };
                    const inverse_662: boolean;
                    export { inverse_662 as inverse };
                }
                export { SameSense_3 as SameSense };
                export namespace PartOfW {
                    const type_663: string;
                    export { type_663 as type };
                    const reference_663: boolean;
                    export { reference_663 as reference };
                    const many_663: boolean;
                    export { many_663 as many };
                    const inverse_663: boolean;
                    export { inverse_663 as inverse };
                }
                export namespace PartOfV {
                    const type_664: string;
                    export { type_664 as type };
                    const reference_664: boolean;
                    export { reference_664 as reference };
                    const many_664: boolean;
                    export { many_664 as many };
                    const inverse_664: boolean;
                    export { inverse_664 as inverse };
                }
                export namespace PartOfU {
                    const type_665: string;
                    export { type_665 as type };
                    const reference_665: boolean;
                    export { reference_665 as reference };
                    const many_665: boolean;
                    export { many_665 as many };
                    const inverse_665: boolean;
                    export { inverse_665 as inverse };
                }
                export namespace HasIntersections {
                    const type_666: string;
                    export { type_666 as type };
                    const reference_666: boolean;
                    export { reference_666 as reference };
                    const many_666: boolean;
                    export { many_666 as many };
                    const inverse_666: boolean;
                    export { inverse_666 as inverse };
                }
            }
            export { fields_271 as fields };
        }
        namespace IfcGridPlacement {
            const domain_272: string;
            export { domain_272 as domain };
            const superclasses_272: string[];
            export { superclasses_272 as superclasses };
            export namespace fields_272 {
                namespace PlacementLocation {
                    const type_667: string;
                    export { type_667 as type };
                    const reference_667: boolean;
                    export { reference_667 as reference };
                    const many_667: boolean;
                    export { many_667 as many };
                    const inverse_667: boolean;
                    export { inverse_667 as inverse };
                }
                namespace PlacementRefDirection {
                    const type_668: string;
                    export { type_668 as type };
                    const reference_668: boolean;
                    export { reference_668 as reference };
                    const many_668: boolean;
                    export { many_668 as many };
                    const inverse_668: boolean;
                    export { inverse_668 as inverse };
                }
            }
            export { fields_272 as fields };
        }
        namespace IfcGroup {
            const domain_273: string;
            export { domain_273 as domain };
            const superclasses_273: string[];
            export { superclasses_273 as superclasses };
            export namespace fields_273 {
                namespace IsGroupedBy {
                    const type_669: string;
                    export { type_669 as type };
                    const reference_669: boolean;
                    export { reference_669 as reference };
                    const many_669: boolean;
                    export { many_669 as many };
                    const inverse_669: boolean;
                    export { inverse_669 as inverse };
                }
            }
            export { fields_273 as fields };
        }
        namespace IfcHalfSpaceSolid {
            const domain_274: string;
            export { domain_274 as domain };
            const superclasses_274: string[];
            export { superclasses_274 as superclasses };
            export namespace fields_274 {
                export namespace BaseSurface {
                    const type_670: string;
                    export { type_670 as type };
                    const reference_670: boolean;
                    export { reference_670 as reference };
                    const many_670: boolean;
                    export { many_670 as many };
                    const inverse_670: boolean;
                    export { inverse_670 as inverse };
                }
                export namespace AgreementFlag {
                    const type_671: string;
                    export { type_671 as type };
                    const reference_671: boolean;
                    export { reference_671 as reference };
                    const many_671: boolean;
                    export { many_671 as many };
                    const inverse_671: boolean;
                    export { inverse_671 as inverse };
                }
                export namespace Dim_12 {
                    const type_672: string;
                    export { type_672 as type };
                    const reference_672: boolean;
                    export { reference_672 as reference };
                    const many_672: boolean;
                    export { many_672 as many };
                    const inverse_672: boolean;
                    export { inverse_672 as inverse };
                }
                export { Dim_12 as Dim };
            }
            export { fields_274 as fields };
        }
        namespace IfcHeatExchangerType {
            const domain_275: string;
            export { domain_275 as domain };
            const superclasses_275: string[];
            export { superclasses_275 as superclasses };
            export namespace fields_275 {
                export namespace PredefinedType_44 {
                    const type_673: string;
                    export { type_673 as type };
                    const reference_673: boolean;
                    export { reference_673 as reference };
                    const many_673: boolean;
                    export { many_673 as many };
                    const inverse_673: boolean;
                    export { inverse_673 as inverse };
                }
                export { PredefinedType_44 as PredefinedType };
            }
            export { fields_275 as fields };
        }
        namespace IfcHumidifierType {
            const domain_276: string;
            export { domain_276 as domain };
            const superclasses_276: string[];
            export { superclasses_276 as superclasses };
            export namespace fields_276 {
                export namespace PredefinedType_45 {
                    const type_674: string;
                    export { type_674 as type };
                    const reference_674: boolean;
                    export { reference_674 as reference };
                    const many_674: boolean;
                    export { many_674 as many };
                    const inverse_674: boolean;
                    export { inverse_674 as inverse };
                }
                export { PredefinedType_45 as PredefinedType };
            }
            export { fields_276 as fields };
        }
        namespace IfcHygroscopicMaterialProperties {
            const domain_277: string;
            export { domain_277 as domain };
            const superclasses_277: string[];
            export { superclasses_277 as superclasses };
            export namespace fields_277 {
                namespace UpperVaporResistanceFactor {
                    const type_675: string;
                    export { type_675 as type };
                    const reference_675: boolean;
                    export { reference_675 as reference };
                    const many_675: boolean;
                    export { many_675 as many };
                    const inverse_675: boolean;
                    export { inverse_675 as inverse };
                }
                namespace UpperVaporResistanceFactorAsString {
                    const type_676: string;
                    export { type_676 as type };
                    const reference_676: boolean;
                    export { reference_676 as reference };
                    const many_676: boolean;
                    export { many_676 as many };
                    const inverse_676: boolean;
                    export { inverse_676 as inverse };
                }
                namespace LowerVaporResistanceFactor {
                    const type_677: string;
                    export { type_677 as type };
                    const reference_677: boolean;
                    export { reference_677 as reference };
                    const many_677: boolean;
                    export { many_677 as many };
                    const inverse_677: boolean;
                    export { inverse_677 as inverse };
                }
                namespace LowerVaporResistanceFactorAsString {
                    const type_678: string;
                    export { type_678 as type };
                    const reference_678: boolean;
                    export { reference_678 as reference };
                    const many_678: boolean;
                    export { many_678 as many };
                    const inverse_678: boolean;
                    export { inverse_678 as inverse };
                }
                namespace IsothermalMoistureCapacity {
                    const type_679: string;
                    export { type_679 as type };
                    const reference_679: boolean;
                    export { reference_679 as reference };
                    const many_679: boolean;
                    export { many_679 as many };
                    const inverse_679: boolean;
                    export { inverse_679 as inverse };
                }
                namespace IsothermalMoistureCapacityAsString {
                    const type_680: string;
                    export { type_680 as type };
                    const reference_680: boolean;
                    export { reference_680 as reference };
                    const many_680: boolean;
                    export { many_680 as many };
                    const inverse_680: boolean;
                    export { inverse_680 as inverse };
                }
                namespace VaporPermeability {
                    const type_681: string;
                    export { type_681 as type };
                    const reference_681: boolean;
                    export { reference_681 as reference };
                    const many_681: boolean;
                    export { many_681 as many };
                    const inverse_681: boolean;
                    export { inverse_681 as inverse };
                }
                namespace VaporPermeabilityAsString {
                    const type_682: string;
                    export { type_682 as type };
                    const reference_682: boolean;
                    export { reference_682 as reference };
                    const many_682: boolean;
                    export { many_682 as many };
                    const inverse_682: boolean;
                    export { inverse_682 as inverse };
                }
                namespace MoistureDiffusivity {
                    const type_683: string;
                    export { type_683 as type };
                    const reference_683: boolean;
                    export { reference_683 as reference };
                    const many_683: boolean;
                    export { many_683 as many };
                    const inverse_683: boolean;
                    export { inverse_683 as inverse };
                }
                namespace MoistureDiffusivityAsString {
                    const type_684: string;
                    export { type_684 as type };
                    const reference_684: boolean;
                    export { reference_684 as reference };
                    const many_684: boolean;
                    export { many_684 as many };
                    const inverse_684: boolean;
                    export { inverse_684 as inverse };
                }
            }
            export { fields_277 as fields };
        }
        namespace IfcIShapeProfileDef {
            const domain_278: string;
            export { domain_278 as domain };
            const superclasses_278: string[];
            export { superclasses_278 as superclasses };
            export namespace fields_278 {
                export namespace OverallWidth_1 {
                    const type_685: string;
                    export { type_685 as type };
                    const reference_685: boolean;
                    export { reference_685 as reference };
                    const many_685: boolean;
                    export { many_685 as many };
                    const inverse_685: boolean;
                    export { inverse_685 as inverse };
                }
                export { OverallWidth_1 as OverallWidth };
                export namespace OverallWidthAsString_1 {
                    const type_686: string;
                    export { type_686 as type };
                    const reference_686: boolean;
                    export { reference_686 as reference };
                    const many_686: boolean;
                    export { many_686 as many };
                    const inverse_686: boolean;
                    export { inverse_686 as inverse };
                }
                export { OverallWidthAsString_1 as OverallWidthAsString };
                export namespace OverallDepth {
                    const type_687: string;
                    export { type_687 as type };
                    const reference_687: boolean;
                    export { reference_687 as reference };
                    const many_687: boolean;
                    export { many_687 as many };
                    const inverse_687: boolean;
                    export { inverse_687 as inverse };
                }
                export namespace OverallDepthAsString {
                    const type_688: string;
                    export { type_688 as type };
                    const reference_688: boolean;
                    export { reference_688 as reference };
                    const many_688: boolean;
                    export { many_688 as many };
                    const inverse_688: boolean;
                    export { inverse_688 as inverse };
                }
                export namespace WebThickness_2 {
                    const type_689: string;
                    export { type_689 as type };
                    const reference_689: boolean;
                    export { reference_689 as reference };
                    const many_689: boolean;
                    export { many_689 as many };
                    const inverse_689: boolean;
                    export { inverse_689 as inverse };
                }
                export { WebThickness_2 as WebThickness };
                export namespace WebThicknessAsString_2 {
                    const type_690: string;
                    export { type_690 as type };
                    const reference_690: boolean;
                    export { reference_690 as reference };
                    const many_690: boolean;
                    export { many_690 as many };
                    const inverse_690: boolean;
                    export { inverse_690 as inverse };
                }
                export { WebThicknessAsString_2 as WebThicknessAsString };
                export namespace FlangeThickness {
                    const type_691: string;
                    export { type_691 as type };
                    const reference_691: boolean;
                    export { reference_691 as reference };
                    const many_691: boolean;
                    export { many_691 as many };
                    const inverse_691: boolean;
                    export { inverse_691 as inverse };
                }
                export namespace FlangeThicknessAsString {
                    const type_692: string;
                    export { type_692 as type };
                    const reference_692: boolean;
                    export { reference_692 as reference };
                    const many_692: boolean;
                    export { many_692 as many };
                    const inverse_692: boolean;
                    export { inverse_692 as inverse };
                }
                export namespace FilletRadius {
                    const type_693: string;
                    export { type_693 as type };
                    const reference_693: boolean;
                    export { reference_693 as reference };
                    const many_693: boolean;
                    export { many_693 as many };
                    const inverse_693: boolean;
                    export { inverse_693 as inverse };
                }
                export namespace FilletRadiusAsString {
                    const type_694: string;
                    export { type_694 as type };
                    const reference_694: boolean;
                    export { reference_694 as reference };
                    const many_694: boolean;
                    export { many_694 as many };
                    const inverse_694: boolean;
                    export { inverse_694 as inverse };
                }
            }
            export { fields_278 as fields };
        }
        namespace IfcImageTexture {
            const domain_279: string;
            export { domain_279 as domain };
            const superclasses_279: string[];
            export { superclasses_279 as superclasses };
            export namespace fields_279 {
                namespace UrlReference {
                    const type_695: string;
                    export { type_695 as type };
                    const reference_695: boolean;
                    export { reference_695 as reference };
                    const many_695: boolean;
                    export { many_695 as many };
                    const inverse_695: boolean;
                    export { inverse_695 as inverse };
                }
            }
            export { fields_279 as fields };
        }
        namespace IfcInventory {
            const domain_280: string;
            export { domain_280 as domain };
            const superclasses_280: string[];
            export { superclasses_280 as superclasses };
            export namespace fields_280 {
                export namespace InventoryType {
                    const type_696: string;
                    export { type_696 as type };
                    const reference_696: boolean;
                    export { reference_696 as reference };
                    const many_696: boolean;
                    export { many_696 as many };
                    const inverse_696: boolean;
                    export { inverse_696 as inverse };
                }
                export namespace Jurisdiction {
                    const type_697: string;
                    export { type_697 as type };
                    const reference_697: boolean;
                    export { reference_697 as reference };
                    const many_697: boolean;
                    export { many_697 as many };
                    const inverse_697: boolean;
                    export { inverse_697 as inverse };
                }
                export namespace ResponsiblePersons {
                    const type_698: string;
                    export { type_698 as type };
                    const reference_698: boolean;
                    export { reference_698 as reference };
                    const many_698: boolean;
                    export { many_698 as many };
                    const inverse_698: boolean;
                    export { inverse_698 as inverse };
                }
                export namespace LastUpdateDate {
                    const type_699: string;
                    export { type_699 as type };
                    const reference_699: boolean;
                    export { reference_699 as reference };
                    const many_699: boolean;
                    export { many_699 as many };
                    const inverse_699: boolean;
                    export { inverse_699 as inverse };
                }
                export namespace CurrentValue_1 {
                    const type_700: string;
                    export { type_700 as type };
                    const reference_700: boolean;
                    export { reference_700 as reference };
                    const many_700: boolean;
                    export { many_700 as many };
                    const inverse_700: boolean;
                    export { inverse_700 as inverse };
                }
                export { CurrentValue_1 as CurrentValue };
                export namespace OriginalValue_1 {
                    const type_701: string;
                    export { type_701 as type };
                    const reference_701: boolean;
                    export { reference_701 as reference };
                    const many_701: boolean;
                    export { many_701 as many };
                    const inverse_701: boolean;
                    export { inverse_701 as inverse };
                }
                export { OriginalValue_1 as OriginalValue };
            }
            export { fields_280 as fields };
        }
        namespace IfcIrregularTimeSeries {
            const domain_281: string;
            export { domain_281 as domain };
            const superclasses_281: string[];
            export { superclasses_281 as superclasses };
            export namespace fields_281 {
                namespace Values {
                    const type_702: string;
                    export { type_702 as type };
                    const reference_702: boolean;
                    export { reference_702 as reference };
                    const many_702: boolean;
                    export { many_702 as many };
                    const inverse_702: boolean;
                    export { inverse_702 as inverse };
                }
            }
            export { fields_281 as fields };
        }
        namespace IfcIrregularTimeSeriesValue {
            const domain_282: string;
            export { domain_282 as domain };
            const superclasses_282: any[];
            export { superclasses_282 as superclasses };
            export namespace fields_282 {
                namespace TimeStamp {
                    const type_703: string;
                    export { type_703 as type };
                    const reference_703: boolean;
                    export { reference_703 as reference };
                    const many_703: boolean;
                    export { many_703 as many };
                    const inverse_703: boolean;
                    export { inverse_703 as inverse };
                }
                namespace ListValues {
                    const type_704: string;
                    export { type_704 as type };
                    const reference_704: boolean;
                    export { reference_704 as reference };
                    const many_704: boolean;
                    export { many_704 as many };
                    const inverse_704: boolean;
                    export { inverse_704 as inverse };
                }
            }
            export { fields_282 as fields };
        }
        namespace IfcJunctionBoxType {
            const domain_283: string;
            export { domain_283 as domain };
            const superclasses_283: string[];
            export { superclasses_283 as superclasses };
            export namespace fields_283 {
                export namespace PredefinedType_46 {
                    const type_705: string;
                    export { type_705 as type };
                    const reference_705: boolean;
                    export { reference_705 as reference };
                    const many_705: boolean;
                    export { many_705 as many };
                    const inverse_705: boolean;
                    export { inverse_705 as inverse };
                }
                export { PredefinedType_46 as PredefinedType };
            }
            export { fields_283 as fields };
        }
        namespace IfcLShapeProfileDef {
            const domain_284: string;
            export { domain_284 as domain };
            const superclasses_284: string[];
            export { superclasses_284 as superclasses };
            export namespace fields_284 {
                export namespace Depth_2 {
                    const type_706: string;
                    export { type_706 as type };
                    const reference_706: boolean;
                    export { reference_706 as reference };
                    const many_706: boolean;
                    export { many_706 as many };
                    const inverse_706: boolean;
                    export { inverse_706 as inverse };
                }
                export { Depth_2 as Depth };
                export namespace DepthAsString_2 {
                    const type_707: string;
                    export { type_707 as type };
                    const reference_707: boolean;
                    export { reference_707 as reference };
                    const many_707: boolean;
                    export { many_707 as many };
                    const inverse_707: boolean;
                    export { inverse_707 as inverse };
                }
                export { DepthAsString_2 as DepthAsString };
                export namespace Width_2 {
                    const type_708: string;
                    export { type_708 as type };
                    const reference_708: boolean;
                    export { reference_708 as reference };
                    const many_708: boolean;
                    export { many_708 as many };
                    const inverse_708: boolean;
                    export { inverse_708 as inverse };
                }
                export { Width_2 as Width };
                export namespace WidthAsString_2 {
                    const type_709: string;
                    export { type_709 as type };
                    const reference_709: boolean;
                    export { reference_709 as reference };
                    const many_709: boolean;
                    export { many_709 as many };
                    const inverse_709: boolean;
                    export { inverse_709 as inverse };
                }
                export { WidthAsString_2 as WidthAsString };
                export namespace Thickness_1 {
                    const type_710: string;
                    export { type_710 as type };
                    const reference_710: boolean;
                    export { reference_710 as reference };
                    const many_710: boolean;
                    export { many_710 as many };
                    const inverse_710: boolean;
                    export { inverse_710 as inverse };
                }
                export { Thickness_1 as Thickness };
                export namespace ThicknessAsString_1 {
                    const type_711: string;
                    export { type_711 as type };
                    const reference_711: boolean;
                    export { reference_711 as reference };
                    const many_711: boolean;
                    export { many_711 as many };
                    const inverse_711: boolean;
                    export { inverse_711 as inverse };
                }
                export { ThicknessAsString_1 as ThicknessAsString };
                export namespace FilletRadius_1 {
                    const type_712: string;
                    export { type_712 as type };
                    const reference_712: boolean;
                    export { reference_712 as reference };
                    const many_712: boolean;
                    export { many_712 as many };
                    const inverse_712: boolean;
                    export { inverse_712 as inverse };
                }
                export { FilletRadius_1 as FilletRadius };
                export namespace FilletRadiusAsString_1 {
                    const type_713: string;
                    export { type_713 as type };
                    const reference_713: boolean;
                    export { reference_713 as reference };
                    const many_713: boolean;
                    export { many_713 as many };
                    const inverse_713: boolean;
                    export { inverse_713 as inverse };
                }
                export { FilletRadiusAsString_1 as FilletRadiusAsString };
                export namespace EdgeRadius {
                    const type_714: string;
                    export { type_714 as type };
                    const reference_714: boolean;
                    export { reference_714 as reference };
                    const many_714: boolean;
                    export { many_714 as many };
                    const inverse_714: boolean;
                    export { inverse_714 as inverse };
                }
                export namespace EdgeRadiusAsString {
                    const type_715: string;
                    export { type_715 as type };
                    const reference_715: boolean;
                    export { reference_715 as reference };
                    const many_715: boolean;
                    export { many_715 as many };
                    const inverse_715: boolean;
                    export { inverse_715 as inverse };
                }
                export namespace LegSlope {
                    const type_716: string;
                    export { type_716 as type };
                    const reference_716: boolean;
                    export { reference_716 as reference };
                    const many_716: boolean;
                    export { many_716 as many };
                    const inverse_716: boolean;
                    export { inverse_716 as inverse };
                }
                export namespace LegSlopeAsString {
                    const type_717: string;
                    export { type_717 as type };
                    const reference_717: boolean;
                    export { reference_717 as reference };
                    const many_717: boolean;
                    export { many_717 as many };
                    const inverse_717: boolean;
                    export { inverse_717 as inverse };
                }
                export namespace CentreOfGravityInX_1 {
                    const type_718: string;
                    export { type_718 as type };
                    const reference_718: boolean;
                    export { reference_718 as reference };
                    const many_718: boolean;
                    export { many_718 as many };
                    const inverse_718: boolean;
                    export { inverse_718 as inverse };
                }
                export { CentreOfGravityInX_1 as CentreOfGravityInX };
                export namespace CentreOfGravityInXAsString_1 {
                    const type_719: string;
                    export { type_719 as type };
                    const reference_719: boolean;
                    export { reference_719 as reference };
                    const many_719: boolean;
                    export { many_719 as many };
                    const inverse_719: boolean;
                    export { inverse_719 as inverse };
                }
                export { CentreOfGravityInXAsString_1 as CentreOfGravityInXAsString };
                export namespace CentreOfGravityInY_3 {
                    const type_720: string;
                    export { type_720 as type };
                    const reference_720: boolean;
                    export { reference_720 as reference };
                    const many_720: boolean;
                    export { many_720 as many };
                    const inverse_720: boolean;
                    export { inverse_720 as inverse };
                }
                export { CentreOfGravityInY_3 as CentreOfGravityInY };
                export namespace CentreOfGravityInYAsString_3 {
                    const type_721: string;
                    export { type_721 as type };
                    const reference_721: boolean;
                    export { reference_721 as reference };
                    const many_721: boolean;
                    export { many_721 as many };
                    const inverse_721: boolean;
                    export { inverse_721 as inverse };
                }
                export { CentreOfGravityInYAsString_3 as CentreOfGravityInYAsString };
            }
            export { fields_284 as fields };
        }
        namespace IfcLaborResource {
            const domain_285: string;
            export { domain_285 as domain };
            const superclasses_285: string[];
            export { superclasses_285 as superclasses };
            export namespace fields_285 {
                namespace SkillSet {
                    const type_722: string;
                    export { type_722 as type };
                    const reference_722: boolean;
                    export { reference_722 as reference };
                    const many_722: boolean;
                    export { many_722 as many };
                    const inverse_722: boolean;
                    export { inverse_722 as inverse };
                }
            }
            export { fields_285 as fields };
        }
        namespace IfcLampType {
            const domain_286: string;
            export { domain_286 as domain };
            const superclasses_286: string[];
            export { superclasses_286 as superclasses };
            export namespace fields_286 {
                export namespace PredefinedType_47 {
                    const type_723: string;
                    export { type_723 as type };
                    const reference_723: boolean;
                    export { reference_723 as reference };
                    const many_723: boolean;
                    export { many_723 as many };
                    const inverse_723: boolean;
                    export { inverse_723 as inverse };
                }
                export { PredefinedType_47 as PredefinedType };
            }
            export { fields_286 as fields };
        }
        namespace IfcLibraryInformation {
            const domain_287: string;
            export { domain_287 as domain };
            const superclasses_287: string[];
            export { superclasses_287 as superclasses };
            export namespace fields_287 {
                export namespace Name_18 {
                    const type_724: string;
                    export { type_724 as type };
                    const reference_724: boolean;
                    export { reference_724 as reference };
                    const many_724: boolean;
                    export { many_724 as many };
                    const inverse_724: boolean;
                    export { inverse_724 as inverse };
                }
                export { Name_18 as Name };
                export namespace Version_1 {
                    const type_725: string;
                    export { type_725 as type };
                    const reference_725: boolean;
                    export { reference_725 as reference };
                    const many_725: boolean;
                    export { many_725 as many };
                    const inverse_725: boolean;
                    export { inverse_725 as inverse };
                }
                export { Version_1 as Version };
                export namespace Publisher {
                    const type_726: string;
                    export { type_726 as type };
                    const reference_726: boolean;
                    export { reference_726 as reference };
                    const many_726: boolean;
                    export { many_726 as many };
                    const inverse_726: boolean;
                    export { inverse_726 as inverse };
                }
                export namespace VersionDate {
                    const type_727: string;
                    export { type_727 as type };
                    const reference_727: boolean;
                    export { reference_727 as reference };
                    const many_727: boolean;
                    export { many_727 as many };
                    const inverse_727: boolean;
                    export { inverse_727 as inverse };
                }
                export namespace LibraryReference {
                    const type_728: string;
                    export { type_728 as type };
                    const reference_728: boolean;
                    export { reference_728 as reference };
                    const many_728: boolean;
                    export { many_728 as many };
                    const inverse_728: boolean;
                    export { inverse_728 as inverse };
                }
            }
            export { fields_287 as fields };
        }
        namespace IfcLibraryReference {
            const domain_288: string;
            export { domain_288 as domain };
            const superclasses_288: string[];
            export { superclasses_288 as superclasses };
            export namespace fields_288 {
                namespace ReferenceIntoLibrary {
                    const type_729: string;
                    export { type_729 as type };
                    const reference_729: boolean;
                    export { reference_729 as reference };
                    const many_729: boolean;
                    export { many_729 as many };
                    const inverse_729: boolean;
                    export { inverse_729 as inverse };
                }
            }
            export { fields_288 as fields };
        }
        namespace IfcLightDistributionData {
            const domain_289: string;
            export { domain_289 as domain };
            const superclasses_289: any[];
            export { superclasses_289 as superclasses };
            export namespace fields_289 {
                namespace MainPlaneAngle {
                    const type_730: string;
                    export { type_730 as type };
                    const reference_730: boolean;
                    export { reference_730 as reference };
                    const many_730: boolean;
                    export { many_730 as many };
                    const inverse_730: boolean;
                    export { inverse_730 as inverse };
                }
                namespace MainPlaneAngleAsString {
                    const type_731: string;
                    export { type_731 as type };
                    const reference_731: boolean;
                    export { reference_731 as reference };
                    const many_731: boolean;
                    export { many_731 as many };
                    const inverse_731: boolean;
                    export { inverse_731 as inverse };
                }
                namespace SecondaryPlaneAngle {
                    const type_732: string;
                    export { type_732 as type };
                    const reference_732: boolean;
                    export { reference_732 as reference };
                    const many_732: boolean;
                    export { many_732 as many };
                    const inverse_732: boolean;
                    export { inverse_732 as inverse };
                }
                namespace SecondaryPlaneAngleAsString {
                    const type_733: string;
                    export { type_733 as type };
                    const reference_733: boolean;
                    export { reference_733 as reference };
                    const many_733: boolean;
                    export { many_733 as many };
                    const inverse_733: boolean;
                    export { inverse_733 as inverse };
                }
                namespace LuminousIntensity {
                    const type_734: string;
                    export { type_734 as type };
                    const reference_734: boolean;
                    export { reference_734 as reference };
                    const many_734: boolean;
                    export { many_734 as many };
                    const inverse_734: boolean;
                    export { inverse_734 as inverse };
                }
                namespace LuminousIntensityAsString {
                    const type_735: string;
                    export { type_735 as type };
                    const reference_735: boolean;
                    export { reference_735 as reference };
                    const many_735: boolean;
                    export { many_735 as many };
                    const inverse_735: boolean;
                    export { inverse_735 as inverse };
                }
            }
            export { fields_289 as fields };
        }
        namespace IfcLightFixtureType {
            const domain_290: string;
            export { domain_290 as domain };
            const superclasses_290: string[];
            export { superclasses_290 as superclasses };
            export namespace fields_290 {
                export namespace PredefinedType_48 {
                    const type_736: string;
                    export { type_736 as type };
                    const reference_736: boolean;
                    export { reference_736 as reference };
                    const many_736: boolean;
                    export { many_736 as many };
                    const inverse_736: boolean;
                    export { inverse_736 as inverse };
                }
                export { PredefinedType_48 as PredefinedType };
            }
            export { fields_290 as fields };
        }
        namespace IfcLightIntensityDistribution {
            const domain_291: string;
            export { domain_291 as domain };
            const superclasses_291: string[];
            export { superclasses_291 as superclasses };
            export namespace fields_291 {
                namespace LightDistributionCurve {
                    const type_737: string;
                    export { type_737 as type };
                    const reference_737: boolean;
                    export { reference_737 as reference };
                    const many_737: boolean;
                    export { many_737 as many };
                    const inverse_737: boolean;
                    export { inverse_737 as inverse };
                }
                namespace DistributionData {
                    const type_738: string;
                    export { type_738 as type };
                    const reference_738: boolean;
                    export { reference_738 as reference };
                    const many_738: boolean;
                    export { many_738 as many };
                    const inverse_738: boolean;
                    export { inverse_738 as inverse };
                }
            }
            export { fields_291 as fields };
        }
        namespace IfcLightSource {
            const domain_292: string;
            export { domain_292 as domain };
            const superclasses_292: string[];
            export { superclasses_292 as superclasses };
            export namespace fields_292 {
                export namespace Name_19 {
                    const type_739: string;
                    export { type_739 as type };
                    const reference_739: boolean;
                    export { reference_739 as reference };
                    const many_739: boolean;
                    export { many_739 as many };
                    const inverse_739: boolean;
                    export { inverse_739 as inverse };
                }
                export { Name_19 as Name };
                export namespace LightColour {
                    const type_740: string;
                    export { type_740 as type };
                    const reference_740: boolean;
                    export { reference_740 as reference };
                    const many_740: boolean;
                    export { many_740 as many };
                    const inverse_740: boolean;
                    export { inverse_740 as inverse };
                }
                export namespace AmbientIntensity {
                    const type_741: string;
                    export { type_741 as type };
                    const reference_741: boolean;
                    export { reference_741 as reference };
                    const many_741: boolean;
                    export { many_741 as many };
                    const inverse_741: boolean;
                    export { inverse_741 as inverse };
                }
                export namespace AmbientIntensityAsString {
                    const type_742: string;
                    export { type_742 as type };
                    const reference_742: boolean;
                    export { reference_742 as reference };
                    const many_742: boolean;
                    export { many_742 as many };
                    const inverse_742: boolean;
                    export { inverse_742 as inverse };
                }
                export namespace Intensity {
                    const type_743: string;
                    export { type_743 as type };
                    const reference_743: boolean;
                    export { reference_743 as reference };
                    const many_743: boolean;
                    export { many_743 as many };
                    const inverse_743: boolean;
                    export { inverse_743 as inverse };
                }
                export namespace IntensityAsString {
                    const type_744: string;
                    export { type_744 as type };
                    const reference_744: boolean;
                    export { reference_744 as reference };
                    const many_744: boolean;
                    export { many_744 as many };
                    const inverse_744: boolean;
                    export { inverse_744 as inverse };
                }
            }
            export { fields_292 as fields };
        }
        namespace IfcLightSourceAmbient {
            const domain_293: string;
            export { domain_293 as domain };
            const superclasses_293: string[];
            export { superclasses_293 as superclasses };
            const fields_293: {};
            export { fields_293 as fields };
        }
        namespace IfcLightSourceDirectional {
            const domain_294: string;
            export { domain_294 as domain };
            const superclasses_294: string[];
            export { superclasses_294 as superclasses };
            export namespace fields_294 {
                export namespace Orientation_1 {
                    const type_745: string;
                    export { type_745 as type };
                    const reference_745: boolean;
                    export { reference_745 as reference };
                    const many_745: boolean;
                    export { many_745 as many };
                    const inverse_745: boolean;
                    export { inverse_745 as inverse };
                }
                export { Orientation_1 as Orientation };
            }
            export { fields_294 as fields };
        }
        namespace IfcLightSourceGoniometric {
            const domain_295: string;
            export { domain_295 as domain };
            const superclasses_295: string[];
            export { superclasses_295 as superclasses };
            export namespace fields_295 {
                export namespace Position_3 {
                    const type_746: string;
                    export { type_746 as type };
                    const reference_746: boolean;
                    export { reference_746 as reference };
                    const many_746: boolean;
                    export { many_746 as many };
                    const inverse_746: boolean;
                    export { inverse_746 as inverse };
                }
                export { Position_3 as Position };
                export namespace ColourAppearance {
                    const type_747: string;
                    export { type_747 as type };
                    const reference_747: boolean;
                    export { reference_747 as reference };
                    const many_747: boolean;
                    export { many_747 as many };
                    const inverse_747: boolean;
                    export { inverse_747 as inverse };
                }
                export namespace ColourTemperature {
                    const type_748: string;
                    export { type_748 as type };
                    const reference_748: boolean;
                    export { reference_748 as reference };
                    const many_748: boolean;
                    export { many_748 as many };
                    const inverse_748: boolean;
                    export { inverse_748 as inverse };
                }
                export namespace ColourTemperatureAsString {
                    const type_749: string;
                    export { type_749 as type };
                    const reference_749: boolean;
                    export { reference_749 as reference };
                    const many_749: boolean;
                    export { many_749 as many };
                    const inverse_749: boolean;
                    export { inverse_749 as inverse };
                }
                export namespace LuminousFlux {
                    const type_750: string;
                    export { type_750 as type };
                    const reference_750: boolean;
                    export { reference_750 as reference };
                    const many_750: boolean;
                    export { many_750 as many };
                    const inverse_750: boolean;
                    export { inverse_750 as inverse };
                }
                export namespace LuminousFluxAsString {
                    const type_751: string;
                    export { type_751 as type };
                    const reference_751: boolean;
                    export { reference_751 as reference };
                    const many_751: boolean;
                    export { many_751 as many };
                    const inverse_751: boolean;
                    export { inverse_751 as inverse };
                }
                export namespace LightEmissionSource {
                    const type_752: string;
                    export { type_752 as type };
                    const reference_752: boolean;
                    export { reference_752 as reference };
                    const many_752: boolean;
                    export { many_752 as many };
                    const inverse_752: boolean;
                    export { inverse_752 as inverse };
                }
                export namespace LightDistributionDataSource {
                    const type_753: string;
                    export { type_753 as type };
                    const reference_753: boolean;
                    export { reference_753 as reference };
                    const many_753: boolean;
                    export { many_753 as many };
                    const inverse_753: boolean;
                    export { inverse_753 as inverse };
                }
            }
            export { fields_295 as fields };
        }
        namespace IfcLightSourcePositional {
            const domain_296: string;
            export { domain_296 as domain };
            const superclasses_296: string[];
            export { superclasses_296 as superclasses };
            export namespace fields_296 {
                export namespace Position_4 {
                    const type_754: string;
                    export { type_754 as type };
                    const reference_754: boolean;
                    export { reference_754 as reference };
                    const many_754: boolean;
                    export { many_754 as many };
                    const inverse_754: boolean;
                    export { inverse_754 as inverse };
                }
                export { Position_4 as Position };
                export namespace Radius_4 {
                    const type_755: string;
                    export { type_755 as type };
                    const reference_755: boolean;
                    export { reference_755 as reference };
                    const many_755: boolean;
                    export { many_755 as many };
                    const inverse_755: boolean;
                    export { inverse_755 as inverse };
                }
                export { Radius_4 as Radius };
                export namespace RadiusAsString_4 {
                    const type_756: string;
                    export { type_756 as type };
                    const reference_756: boolean;
                    export { reference_756 as reference };
                    const many_756: boolean;
                    export { many_756 as many };
                    const inverse_756: boolean;
                    export { inverse_756 as inverse };
                }
                export { RadiusAsString_4 as RadiusAsString };
                export namespace ConstantAttenuation {
                    const type_757: string;
                    export { type_757 as type };
                    const reference_757: boolean;
                    export { reference_757 as reference };
                    const many_757: boolean;
                    export { many_757 as many };
                    const inverse_757: boolean;
                    export { inverse_757 as inverse };
                }
                export namespace ConstantAttenuationAsString {
                    const type_758: string;
                    export { type_758 as type };
                    const reference_758: boolean;
                    export { reference_758 as reference };
                    const many_758: boolean;
                    export { many_758 as many };
                    const inverse_758: boolean;
                    export { inverse_758 as inverse };
                }
                export namespace DistanceAttenuation {
                    const type_759: string;
                    export { type_759 as type };
                    const reference_759: boolean;
                    export { reference_759 as reference };
                    const many_759: boolean;
                    export { many_759 as many };
                    const inverse_759: boolean;
                    export { inverse_759 as inverse };
                }
                export namespace DistanceAttenuationAsString {
                    const type_760: string;
                    export { type_760 as type };
                    const reference_760: boolean;
                    export { reference_760 as reference };
                    const many_760: boolean;
                    export { many_760 as many };
                    const inverse_760: boolean;
                    export { inverse_760 as inverse };
                }
                export namespace QuadricAttenuation {
                    const type_761: string;
                    export { type_761 as type };
                    const reference_761: boolean;
                    export { reference_761 as reference };
                    const many_761: boolean;
                    export { many_761 as many };
                    const inverse_761: boolean;
                    export { inverse_761 as inverse };
                }
                export namespace QuadricAttenuationAsString {
                    const type_762: string;
                    export { type_762 as type };
                    const reference_762: boolean;
                    export { reference_762 as reference };
                    const many_762: boolean;
                    export { many_762 as many };
                    const inverse_762: boolean;
                    export { inverse_762 as inverse };
                }
            }
            export { fields_296 as fields };
        }
        namespace IfcLightSourceSpot {
            const domain_297: string;
            export { domain_297 as domain };
            const superclasses_297: string[];
            export { superclasses_297 as superclasses };
            export namespace fields_297 {
                export namespace Orientation_2 {
                    const type_763: string;
                    export { type_763 as type };
                    const reference_763: boolean;
                    export { reference_763 as reference };
                    const many_763: boolean;
                    export { many_763 as many };
                    const inverse_763: boolean;
                    export { inverse_763 as inverse };
                }
                export { Orientation_2 as Orientation };
                export namespace ConcentrationExponent {
                    const type_764: string;
                    export { type_764 as type };
                    const reference_764: boolean;
                    export { reference_764 as reference };
                    const many_764: boolean;
                    export { many_764 as many };
                    const inverse_764: boolean;
                    export { inverse_764 as inverse };
                }
                export namespace ConcentrationExponentAsString {
                    const type_765: string;
                    export { type_765 as type };
                    const reference_765: boolean;
                    export { reference_765 as reference };
                    const many_765: boolean;
                    export { many_765 as many };
                    const inverse_765: boolean;
                    export { inverse_765 as inverse };
                }
                export namespace SpreadAngle {
                    const type_766: string;
                    export { type_766 as type };
                    const reference_766: boolean;
                    export { reference_766 as reference };
                    const many_766: boolean;
                    export { many_766 as many };
                    const inverse_766: boolean;
                    export { inverse_766 as inverse };
                }
                export namespace SpreadAngleAsString {
                    const type_767: string;
                    export { type_767 as type };
                    const reference_767: boolean;
                    export { reference_767 as reference };
                    const many_767: boolean;
                    export { many_767 as many };
                    const inverse_767: boolean;
                    export { inverse_767 as inverse };
                }
                export namespace BeamWidthAngle {
                    const type_768: string;
                    export { type_768 as type };
                    const reference_768: boolean;
                    export { reference_768 as reference };
                    const many_768: boolean;
                    export { many_768 as many };
                    const inverse_768: boolean;
                    export { inverse_768 as inverse };
                }
                export namespace BeamWidthAngleAsString {
                    const type_769: string;
                    export { type_769 as type };
                    const reference_769: boolean;
                    export { reference_769 as reference };
                    const many_769: boolean;
                    export { many_769 as many };
                    const inverse_769: boolean;
                    export { inverse_769 as inverse };
                }
            }
            export { fields_297 as fields };
        }
        namespace IfcLine {
            const domain_298: string;
            export { domain_298 as domain };
            const superclasses_298: string[];
            export { superclasses_298 as superclasses };
            export namespace fields_298 {
                namespace Pnt {
                    const type_770: string;
                    export { type_770 as type };
                    const reference_770: boolean;
                    export { reference_770 as reference };
                    const many_770: boolean;
                    export { many_770 as many };
                    const inverse_770: boolean;
                    export { inverse_770 as inverse };
                }
                namespace Dir {
                    const type_771: string;
                    export { type_771 as type };
                    const reference_771: boolean;
                    export { reference_771 as reference };
                    const many_771: boolean;
                    export { many_771 as many };
                    const inverse_771: boolean;
                    export { inverse_771 as inverse };
                }
            }
            export { fields_298 as fields };
        }
        namespace IfcLinearDimension {
            const domain_299: string;
            export { domain_299 as domain };
            const superclasses_299: string[];
            export { superclasses_299 as superclasses };
            const fields_299: {};
            export { fields_299 as fields };
        }
        namespace IfcLocalPlacement {
            const domain_300: string;
            export { domain_300 as domain };
            const superclasses_300: string[];
            export { superclasses_300 as superclasses };
            export namespace fields_300 {
                namespace PlacementRelTo {
                    const type_772: string;
                    export { type_772 as type };
                    const reference_772: boolean;
                    export { reference_772 as reference };
                    const many_772: boolean;
                    export { many_772 as many };
                    const inverse_772: boolean;
                    export { inverse_772 as inverse };
                }
                namespace RelativePlacement {
                    const type_773: string;
                    export { type_773 as type };
                    const reference_773: boolean;
                    export { reference_773 as reference };
                    const many_773: boolean;
                    export { many_773 as many };
                    const inverse_773: boolean;
                    export { inverse_773 as inverse };
                }
            }
            export { fields_300 as fields };
        }
        namespace IfcLocalTime {
            const domain_301: string;
            export { domain_301 as domain };
            const superclasses_301: string[];
            export { superclasses_301 as superclasses };
            export namespace fields_301 {
                namespace HourComponent {
                    const type_774: string;
                    export { type_774 as type };
                    const reference_774: boolean;
                    export { reference_774 as reference };
                    const many_774: boolean;
                    export { many_774 as many };
                    const inverse_774: boolean;
                    export { inverse_774 as inverse };
                }
                namespace MinuteComponent {
                    const type_775: string;
                    export { type_775 as type };
                    const reference_775: boolean;
                    export { reference_775 as reference };
                    const many_775: boolean;
                    export { many_775 as many };
                    const inverse_775: boolean;
                    export { inverse_775 as inverse };
                }
                namespace SecondComponent {
                    const type_776: string;
                    export { type_776 as type };
                    const reference_776: boolean;
                    export { reference_776 as reference };
                    const many_776: boolean;
                    export { many_776 as many };
                    const inverse_776: boolean;
                    export { inverse_776 as inverse };
                }
                namespace SecondComponentAsString {
                    const type_777: string;
                    export { type_777 as type };
                    const reference_777: boolean;
                    export { reference_777 as reference };
                    const many_777: boolean;
                    export { many_777 as many };
                    const inverse_777: boolean;
                    export { inverse_777 as inverse };
                }
                namespace Zone {
                    const type_778: string;
                    export { type_778 as type };
                    const reference_778: boolean;
                    export { reference_778 as reference };
                    const many_778: boolean;
                    export { many_778 as many };
                    const inverse_778: boolean;
                    export { inverse_778 as inverse };
                }
                namespace DaylightSavingOffset {
                    const type_779: string;
                    export { type_779 as type };
                    const reference_779: boolean;
                    export { reference_779 as reference };
                    const many_779: boolean;
                    export { many_779 as many };
                    const inverse_779: boolean;
                    export { inverse_779 as inverse };
                }
            }
            export { fields_301 as fields };
        }
        namespace IfcLoop {
            const domain_302: string;
            export { domain_302 as domain };
            const superclasses_302: string[];
            export { superclasses_302 as superclasses };
            const fields_302: {};
            export { fields_302 as fields };
        }
        namespace IfcManifoldSolidBrep {
            const domain_303: string;
            export { domain_303 as domain };
            const superclasses_303: string[];
            export { superclasses_303 as superclasses };
            export namespace fields_303 {
                namespace Outer {
                    const type_780: string;
                    export { type_780 as type };
                    const reference_780: boolean;
                    export { reference_780 as reference };
                    const many_780: boolean;
                    export { many_780 as many };
                    const inverse_780: boolean;
                    export { inverse_780 as inverse };
                }
            }
            export { fields_303 as fields };
        }
        namespace IfcMappedItem {
            const domain_304: string;
            export { domain_304 as domain };
            const superclasses_304: string[];
            export { superclasses_304 as superclasses };
            export namespace fields_304 {
                namespace MappingSource {
                    const type_781: string;
                    export { type_781 as type };
                    const reference_781: boolean;
                    export { reference_781 as reference };
                    const many_781: boolean;
                    export { many_781 as many };
                    const inverse_781: boolean;
                    export { inverse_781 as inverse };
                }
                namespace MappingTarget {
                    const type_782: string;
                    export { type_782 as type };
                    const reference_782: boolean;
                    export { reference_782 as reference };
                    const many_782: boolean;
                    export { many_782 as many };
                    const inverse_782: boolean;
                    export { inverse_782 as inverse };
                }
            }
            export { fields_304 as fields };
        }
        namespace IfcMaterial {
            const domain_305: string;
            export { domain_305 as domain };
            const superclasses_305: string[];
            export { superclasses_305 as superclasses };
            export namespace fields_305 {
                export namespace Name_20 {
                    const type_783: string;
                    export { type_783 as type };
                    const reference_783: boolean;
                    export { reference_783 as reference };
                    const many_783: boolean;
                    export { many_783 as many };
                    const inverse_783: boolean;
                    export { inverse_783 as inverse };
                }
                export { Name_20 as Name };
                export namespace HasRepresentation {
                    const type_784: string;
                    export { type_784 as type };
                    const reference_784: boolean;
                    export { reference_784 as reference };
                    const many_784: boolean;
                    export { many_784 as many };
                    const inverse_784: boolean;
                    export { inverse_784 as inverse };
                }
                export namespace ClassifiedAs_1 {
                    const type_785: string;
                    export { type_785 as type };
                    const reference_785: boolean;
                    export { reference_785 as reference };
                    const many_785: boolean;
                    export { many_785 as many };
                    const inverse_785: boolean;
                    export { inverse_785 as inverse };
                }
                export { ClassifiedAs_1 as ClassifiedAs };
            }
            export { fields_305 as fields };
        }
        namespace IfcMaterialClassificationRelationship {
            const domain_306: string;
            export { domain_306 as domain };
            const superclasses_306: any[];
            export { superclasses_306 as superclasses };
            export namespace fields_306 {
                namespace MaterialClassifications {
                    const type_786: string;
                    export { type_786 as type };
                    const reference_786: boolean;
                    export { reference_786 as reference };
                    const many_786: boolean;
                    export { many_786 as many };
                    const inverse_786: boolean;
                    export { inverse_786 as inverse };
                }
                namespace ClassifiedMaterial {
                    const type_787: string;
                    export { type_787 as type };
                    const reference_787: boolean;
                    export { reference_787 as reference };
                    const many_787: boolean;
                    export { many_787 as many };
                    const inverse_787: boolean;
                    export { inverse_787 as inverse };
                }
            }
            export { fields_306 as fields };
        }
        namespace IfcMaterialDefinitionRepresentation {
            const domain_307: string;
            export { domain_307 as domain };
            const superclasses_307: string[];
            export { superclasses_307 as superclasses };
            export namespace fields_307 {
                namespace RepresentedMaterial {
                    const type_788: string;
                    export { type_788 as type };
                    const reference_788: boolean;
                    export { reference_788 as reference };
                    const many_788: boolean;
                    export { many_788 as many };
                    const inverse_788: boolean;
                    export { inverse_788 as inverse };
                }
            }
            export { fields_307 as fields };
        }
        namespace IfcMaterialLayer {
            const domain_308: string;
            export { domain_308 as domain };
            const superclasses_308: string[];
            export { superclasses_308 as superclasses };
            export namespace fields_308 {
                namespace Material {
                    const type_789: string;
                    export { type_789 as type };
                    const reference_789: boolean;
                    export { reference_789 as reference };
                    const many_789: boolean;
                    export { many_789 as many };
                    const inverse_789: boolean;
                    export { inverse_789 as inverse };
                }
                namespace LayerThickness {
                    const type_790: string;
                    export { type_790 as type };
                    const reference_790: boolean;
                    export { reference_790 as reference };
                    const many_790: boolean;
                    export { many_790 as many };
                    const inverse_790: boolean;
                    export { inverse_790 as inverse };
                }
                namespace LayerThicknessAsString {
                    const type_791: string;
                    export { type_791 as type };
                    const reference_791: boolean;
                    export { reference_791 as reference };
                    const many_791: boolean;
                    export { many_791 as many };
                    const inverse_791: boolean;
                    export { inverse_791 as inverse };
                }
                namespace IsVentilated {
                    const type_792: string;
                    export { type_792 as type };
                    const reference_792: boolean;
                    export { reference_792 as reference };
                    const many_792: boolean;
                    export { many_792 as many };
                    const inverse_792: boolean;
                    export { inverse_792 as inverse };
                }
                namespace ToMaterialLayerSet {
                    const type_793: string;
                    export { type_793 as type };
                    const reference_793: boolean;
                    export { reference_793 as reference };
                    const many_793: boolean;
                    export { many_793 as many };
                    const inverse_793: boolean;
                    export { inverse_793 as inverse };
                }
            }
            export { fields_308 as fields };
        }
        namespace IfcMaterialLayerSet {
            const domain_309: string;
            export { domain_309 as domain };
            const superclasses_309: string[];
            export { superclasses_309 as superclasses };
            export namespace fields_309 {
                namespace MaterialLayers {
                    const type_794: string;
                    export { type_794 as type };
                    const reference_794: boolean;
                    export { reference_794 as reference };
                    const many_794: boolean;
                    export { many_794 as many };
                    const inverse_794: boolean;
                    export { inverse_794 as inverse };
                }
                namespace LayerSetName {
                    const type_795: string;
                    export { type_795 as type };
                    const reference_795: boolean;
                    export { reference_795 as reference };
                    const many_795: boolean;
                    export { many_795 as many };
                    const inverse_795: boolean;
                    export { inverse_795 as inverse };
                }
                namespace TotalThickness {
                    const type_796: string;
                    export { type_796 as type };
                    const reference_796: boolean;
                    export { reference_796 as reference };
                    const many_796: boolean;
                    export { many_796 as many };
                    const inverse_796: boolean;
                    export { inverse_796 as inverse };
                }
                namespace TotalThicknessAsString {
                    const type_797: string;
                    export { type_797 as type };
                    const reference_797: boolean;
                    export { reference_797 as reference };
                    const many_797: boolean;
                    export { many_797 as many };
                    const inverse_797: boolean;
                    export { inverse_797 as inverse };
                }
            }
            export { fields_309 as fields };
        }
        namespace IfcMaterialLayerSetUsage {
            const domain_310: string;
            export { domain_310 as domain };
            const superclasses_310: string[];
            export { superclasses_310 as superclasses };
            export namespace fields_310 {
                namespace ForLayerSet {
                    const type_798: string;
                    export { type_798 as type };
                    const reference_798: boolean;
                    export { reference_798 as reference };
                    const many_798: boolean;
                    export { many_798 as many };
                    const inverse_798: boolean;
                    export { inverse_798 as inverse };
                }
                namespace LayerSetDirection {
                    const type_799: string;
                    export { type_799 as type };
                    const reference_799: boolean;
                    export { reference_799 as reference };
                    const many_799: boolean;
                    export { many_799 as many };
                    const inverse_799: boolean;
                    export { inverse_799 as inverse };
                }
                namespace DirectionSense {
                    const type_800: string;
                    export { type_800 as type };
                    const reference_800: boolean;
                    export { reference_800 as reference };
                    const many_800: boolean;
                    export { many_800 as many };
                    const inverse_800: boolean;
                    export { inverse_800 as inverse };
                }
                namespace OffsetFromReferenceLine {
                    const type_801: string;
                    export { type_801 as type };
                    const reference_801: boolean;
                    export { reference_801 as reference };
                    const many_801: boolean;
                    export { many_801 as many };
                    const inverse_801: boolean;
                    export { inverse_801 as inverse };
                }
                namespace OffsetFromReferenceLineAsString {
                    const type_802: string;
                    export { type_802 as type };
                    const reference_802: boolean;
                    export { reference_802 as reference };
                    const many_802: boolean;
                    export { many_802 as many };
                    const inverse_802: boolean;
                    export { inverse_802 as inverse };
                }
            }
            export { fields_310 as fields };
        }
        namespace IfcMaterialList {
            const domain_311: string;
            export { domain_311 as domain };
            const superclasses_311: string[];
            export { superclasses_311 as superclasses };
            export namespace fields_311 {
                namespace Materials {
                    const type_803: string;
                    export { type_803 as type };
                    const reference_803: boolean;
                    export { reference_803 as reference };
                    const many_803: boolean;
                    export { many_803 as many };
                    const inverse_803: boolean;
                    export { inverse_803 as inverse };
                }
            }
            export { fields_311 as fields };
        }
        namespace IfcMaterialProperties {
            const domain_312: string;
            export { domain_312 as domain };
            const superclasses_312: any[];
            export { superclasses_312 as superclasses };
            export namespace fields_312 {
                export namespace Material_1 {
                    const type_804: string;
                    export { type_804 as type };
                    const reference_804: boolean;
                    export { reference_804 as reference };
                    const many_804: boolean;
                    export { many_804 as many };
                    const inverse_804: boolean;
                    export { inverse_804 as inverse };
                }
                export { Material_1 as Material };
            }
            export { fields_312 as fields };
        }
        namespace IfcMeasureWithUnit {
            const domain_313: string;
            export { domain_313 as domain };
            const superclasses_313: string[];
            export { superclasses_313 as superclasses };
            export namespace fields_313 {
                namespace ValueComponent {
                    const type_805: string;
                    export { type_805 as type };
                    const reference_805: boolean;
                    export { reference_805 as reference };
                    const many_805: boolean;
                    export { many_805 as many };
                    const inverse_805: boolean;
                    export { inverse_805 as inverse };
                }
                namespace UnitComponent {
                    const type_806: string;
                    export { type_806 as type };
                    const reference_806: boolean;
                    export { reference_806 as reference };
                    const many_806: boolean;
                    export { many_806 as many };
                    const inverse_806: boolean;
                    export { inverse_806 as inverse };
                }
            }
            export { fields_313 as fields };
        }
        namespace IfcMechanicalConcreteMaterialProperties {
            const domain_314: string;
            export { domain_314 as domain };
            const superclasses_314: string[];
            export { superclasses_314 as superclasses };
            export namespace fields_314 {
                namespace CompressiveStrength {
                    const type_807: string;
                    export { type_807 as type };
                    const reference_807: boolean;
                    export { reference_807 as reference };
                    const many_807: boolean;
                    export { many_807 as many };
                    const inverse_807: boolean;
                    export { inverse_807 as inverse };
                }
                namespace CompressiveStrengthAsString {
                    const type_808: string;
                    export { type_808 as type };
                    const reference_808: boolean;
                    export { reference_808 as reference };
                    const many_808: boolean;
                    export { many_808 as many };
                    const inverse_808: boolean;
                    export { inverse_808 as inverse };
                }
                namespace MaxAggregateSize {
                    const type_809: string;
                    export { type_809 as type };
                    const reference_809: boolean;
                    export { reference_809 as reference };
                    const many_809: boolean;
                    export { many_809 as many };
                    const inverse_809: boolean;
                    export { inverse_809 as inverse };
                }
                namespace MaxAggregateSizeAsString {
                    const type_810: string;
                    export { type_810 as type };
                    const reference_810: boolean;
                    export { reference_810 as reference };
                    const many_810: boolean;
                    export { many_810 as many };
                    const inverse_810: boolean;
                    export { inverse_810 as inverse };
                }
                namespace AdmixturesDescription {
                    const type_811: string;
                    export { type_811 as type };
                    const reference_811: boolean;
                    export { reference_811 as reference };
                    const many_811: boolean;
                    export { many_811 as many };
                    const inverse_811: boolean;
                    export { inverse_811 as inverse };
                }
                namespace Workability {
                    const type_812: string;
                    export { type_812 as type };
                    const reference_812: boolean;
                    export { reference_812 as reference };
                    const many_812: boolean;
                    export { many_812 as many };
                    const inverse_812: boolean;
                    export { inverse_812 as inverse };
                }
                namespace ProtectivePoreRatio {
                    const type_813: string;
                    export { type_813 as type };
                    const reference_813: boolean;
                    export { reference_813 as reference };
                    const many_813: boolean;
                    export { many_813 as many };
                    const inverse_813: boolean;
                    export { inverse_813 as inverse };
                }
                namespace ProtectivePoreRatioAsString {
                    const type_814: string;
                    export { type_814 as type };
                    const reference_814: boolean;
                    export { reference_814 as reference };
                    const many_814: boolean;
                    export { many_814 as many };
                    const inverse_814: boolean;
                    export { inverse_814 as inverse };
                }
                namespace WaterImpermeability {
                    const type_815: string;
                    export { type_815 as type };
                    const reference_815: boolean;
                    export { reference_815 as reference };
                    const many_815: boolean;
                    export { many_815 as many };
                    const inverse_815: boolean;
                    export { inverse_815 as inverse };
                }
            }
            export { fields_314 as fields };
        }
        namespace IfcMechanicalFastener {
            const domain_315: string;
            export { domain_315 as domain };
            const superclasses_315: string[];
            export { superclasses_315 as superclasses };
            export namespace fields_315 {
                namespace NominalDiameter {
                    const type_816: string;
                    export { type_816 as type };
                    const reference_816: boolean;
                    export { reference_816 as reference };
                    const many_816: boolean;
                    export { many_816 as many };
                    const inverse_816: boolean;
                    export { inverse_816 as inverse };
                }
                namespace NominalDiameterAsString {
                    const type_817: string;
                    export { type_817 as type };
                    const reference_817: boolean;
                    export { reference_817 as reference };
                    const many_817: boolean;
                    export { many_817 as many };
                    const inverse_817: boolean;
                    export { inverse_817 as inverse };
                }
                namespace NominalLength {
                    const type_818: string;
                    export { type_818 as type };
                    const reference_818: boolean;
                    export { reference_818 as reference };
                    const many_818: boolean;
                    export { many_818 as many };
                    const inverse_818: boolean;
                    export { inverse_818 as inverse };
                }
                namespace NominalLengthAsString {
                    const type_819: string;
                    export { type_819 as type };
                    const reference_819: boolean;
                    export { reference_819 as reference };
                    const many_819: boolean;
                    export { many_819 as many };
                    const inverse_819: boolean;
                    export { inverse_819 as inverse };
                }
            }
            export { fields_315 as fields };
        }
        namespace IfcMechanicalFastenerType {
            const domain_316: string;
            export { domain_316 as domain };
            const superclasses_316: string[];
            export { superclasses_316 as superclasses };
            const fields_316: {};
            export { fields_316 as fields };
        }
        namespace IfcMechanicalMaterialProperties {
            const domain_317: string;
            export { domain_317 as domain };
            const superclasses_317: string[];
            export { superclasses_317 as superclasses };
            export namespace fields_317 {
                namespace DynamicViscosity {
                    const type_820: string;
                    export { type_820 as type };
                    const reference_820: boolean;
                    export { reference_820 as reference };
                    const many_820: boolean;
                    export { many_820 as many };
                    const inverse_820: boolean;
                    export { inverse_820 as inverse };
                }
                namespace DynamicViscosityAsString {
                    const type_821: string;
                    export { type_821 as type };
                    const reference_821: boolean;
                    export { reference_821 as reference };
                    const many_821: boolean;
                    export { many_821 as many };
                    const inverse_821: boolean;
                    export { inverse_821 as inverse };
                }
                namespace YoungModulus {
                    const type_822: string;
                    export { type_822 as type };
                    const reference_822: boolean;
                    export { reference_822 as reference };
                    const many_822: boolean;
                    export { many_822 as many };
                    const inverse_822: boolean;
                    export { inverse_822 as inverse };
                }
                namespace YoungModulusAsString {
                    const type_823: string;
                    export { type_823 as type };
                    const reference_823: boolean;
                    export { reference_823 as reference };
                    const many_823: boolean;
                    export { many_823 as many };
                    const inverse_823: boolean;
                    export { inverse_823 as inverse };
                }
                namespace ShearModulus {
                    const type_824: string;
                    export { type_824 as type };
                    const reference_824: boolean;
                    export { reference_824 as reference };
                    const many_824: boolean;
                    export { many_824 as many };
                    const inverse_824: boolean;
                    export { inverse_824 as inverse };
                }
                namespace ShearModulusAsString {
                    const type_825: string;
                    export { type_825 as type };
                    const reference_825: boolean;
                    export { reference_825 as reference };
                    const many_825: boolean;
                    export { many_825 as many };
                    const inverse_825: boolean;
                    export { inverse_825 as inverse };
                }
                namespace PoissonRatio {
                    const type_826: string;
                    export { type_826 as type };
                    const reference_826: boolean;
                    export { reference_826 as reference };
                    const many_826: boolean;
                    export { many_826 as many };
                    const inverse_826: boolean;
                    export { inverse_826 as inverse };
                }
                namespace PoissonRatioAsString {
                    const type_827: string;
                    export { type_827 as type };
                    const reference_827: boolean;
                    export { reference_827 as reference };
                    const many_827: boolean;
                    export { many_827 as many };
                    const inverse_827: boolean;
                    export { inverse_827 as inverse };
                }
                namespace ThermalExpansionCoefficient {
                    const type_828: string;
                    export { type_828 as type };
                    const reference_828: boolean;
                    export { reference_828 as reference };
                    const many_828: boolean;
                    export { many_828 as many };
                    const inverse_828: boolean;
                    export { inverse_828 as inverse };
                }
                namespace ThermalExpansionCoefficientAsString {
                    const type_829: string;
                    export { type_829 as type };
                    const reference_829: boolean;
                    export { reference_829 as reference };
                    const many_829: boolean;
                    export { many_829 as many };
                    const inverse_829: boolean;
                    export { inverse_829 as inverse };
                }
            }
            export { fields_317 as fields };
        }
        namespace IfcMechanicalSteelMaterialProperties {
            const domain_318: string;
            export { domain_318 as domain };
            const superclasses_318: string[];
            export { superclasses_318 as superclasses };
            export namespace fields_318 {
                namespace YieldStress {
                    const type_830: string;
                    export { type_830 as type };
                    const reference_830: boolean;
                    export { reference_830 as reference };
                    const many_830: boolean;
                    export { many_830 as many };
                    const inverse_830: boolean;
                    export { inverse_830 as inverse };
                }
                namespace YieldStressAsString {
                    const type_831: string;
                    export { type_831 as type };
                    const reference_831: boolean;
                    export { reference_831 as reference };
                    const many_831: boolean;
                    export { many_831 as many };
                    const inverse_831: boolean;
                    export { inverse_831 as inverse };
                }
                namespace UltimateStress {
                    const type_832: string;
                    export { type_832 as type };
                    const reference_832: boolean;
                    export { reference_832 as reference };
                    const many_832: boolean;
                    export { many_832 as many };
                    const inverse_832: boolean;
                    export { inverse_832 as inverse };
                }
                namespace UltimateStressAsString {
                    const type_833: string;
                    export { type_833 as type };
                    const reference_833: boolean;
                    export { reference_833 as reference };
                    const many_833: boolean;
                    export { many_833 as many };
                    const inverse_833: boolean;
                    export { inverse_833 as inverse };
                }
                namespace UltimateStrain {
                    const type_834: string;
                    export { type_834 as type };
                    const reference_834: boolean;
                    export { reference_834 as reference };
                    const many_834: boolean;
                    export { many_834 as many };
                    const inverse_834: boolean;
                    export { inverse_834 as inverse };
                }
                namespace UltimateStrainAsString {
                    const type_835: string;
                    export { type_835 as type };
                    const reference_835: boolean;
                    export { reference_835 as reference };
                    const many_835: boolean;
                    export { many_835 as many };
                    const inverse_835: boolean;
                    export { inverse_835 as inverse };
                }
                namespace HardeningModule {
                    const type_836: string;
                    export { type_836 as type };
                    const reference_836: boolean;
                    export { reference_836 as reference };
                    const many_836: boolean;
                    export { many_836 as many };
                    const inverse_836: boolean;
                    export { inverse_836 as inverse };
                }
                namespace HardeningModuleAsString {
                    const type_837: string;
                    export { type_837 as type };
                    const reference_837: boolean;
                    export { reference_837 as reference };
                    const many_837: boolean;
                    export { many_837 as many };
                    const inverse_837: boolean;
                    export { inverse_837 as inverse };
                }
                namespace ProportionalStress {
                    const type_838: string;
                    export { type_838 as type };
                    const reference_838: boolean;
                    export { reference_838 as reference };
                    const many_838: boolean;
                    export { many_838 as many };
                    const inverse_838: boolean;
                    export { inverse_838 as inverse };
                }
                namespace ProportionalStressAsString {
                    const type_839: string;
                    export { type_839 as type };
                    const reference_839: boolean;
                    export { reference_839 as reference };
                    const many_839: boolean;
                    export { many_839 as many };
                    const inverse_839: boolean;
                    export { inverse_839 as inverse };
                }
                namespace PlasticStrain {
                    const type_840: string;
                    export { type_840 as type };
                    const reference_840: boolean;
                    export { reference_840 as reference };
                    const many_840: boolean;
                    export { many_840 as many };
                    const inverse_840: boolean;
                    export { inverse_840 as inverse };
                }
                namespace PlasticStrainAsString {
                    const type_841: string;
                    export { type_841 as type };
                    const reference_841: boolean;
                    export { reference_841 as reference };
                    const many_841: boolean;
                    export { many_841 as many };
                    const inverse_841: boolean;
                    export { inverse_841 as inverse };
                }
                namespace Relaxations {
                    const type_842: string;
                    export { type_842 as type };
                    const reference_842: boolean;
                    export { reference_842 as reference };
                    const many_842: boolean;
                    export { many_842 as many };
                    const inverse_842: boolean;
                    export { inverse_842 as inverse };
                }
            }
            export { fields_318 as fields };
        }
        namespace IfcMember {
            const domain_319: string;
            export { domain_319 as domain };
            const superclasses_319: string[];
            export { superclasses_319 as superclasses };
            const fields_319: {};
            export { fields_319 as fields };
        }
        namespace IfcMemberType {
            const domain_320: string;
            export { domain_320 as domain };
            const superclasses_320: string[];
            export { superclasses_320 as superclasses };
            export namespace fields_320 {
                export namespace PredefinedType_49 {
                    const type_843: string;
                    export { type_843 as type };
                    const reference_843: boolean;
                    export { reference_843 as reference };
                    const many_843: boolean;
                    export { many_843 as many };
                    const inverse_843: boolean;
                    export { inverse_843 as inverse };
                }
                export { PredefinedType_49 as PredefinedType };
            }
            export { fields_320 as fields };
        }
        namespace IfcMetric {
            const domain_321: string;
            export { domain_321 as domain };
            const superclasses_321: string[];
            export { superclasses_321 as superclasses };
            export namespace fields_321 {
                namespace Benchmark {
                    const type_844: string;
                    export { type_844 as type };
                    const reference_844: boolean;
                    export { reference_844 as reference };
                    const many_844: boolean;
                    export { many_844 as many };
                    const inverse_844: boolean;
                    export { inverse_844 as inverse };
                }
                namespace ValueSource {
                    const type_845: string;
                    export { type_845 as type };
                    const reference_845: boolean;
                    export { reference_845 as reference };
                    const many_845: boolean;
                    export { many_845 as many };
                    const inverse_845: boolean;
                    export { inverse_845 as inverse };
                }
                namespace DataValue {
                    const type_846: string;
                    export { type_846 as type };
                    const reference_846: boolean;
                    export { reference_846 as reference };
                    const many_846: boolean;
                    export { many_846 as many };
                    const inverse_846: boolean;
                    export { inverse_846 as inverse };
                }
            }
            export { fields_321 as fields };
        }
        namespace IfcMonetaryUnit {
            const domain_322: string;
            export { domain_322 as domain };
            const superclasses_322: string[];
            export { superclasses_322 as superclasses };
            export namespace fields_322 {
                namespace Currency {
                    const type_847: string;
                    export { type_847 as type };
                    const reference_847: boolean;
                    export { reference_847 as reference };
                    const many_847: boolean;
                    export { many_847 as many };
                    const inverse_847: boolean;
                    export { inverse_847 as inverse };
                }
            }
            export { fields_322 as fields };
        }
        namespace IfcMotorConnectionType {
            const domain_323: string;
            export { domain_323 as domain };
            const superclasses_323: string[];
            export { superclasses_323 as superclasses };
            export namespace fields_323 {
                export namespace PredefinedType_50 {
                    const type_848: string;
                    export { type_848 as type };
                    const reference_848: boolean;
                    export { reference_848 as reference };
                    const many_848: boolean;
                    export { many_848 as many };
                    const inverse_848: boolean;
                    export { inverse_848 as inverse };
                }
                export { PredefinedType_50 as PredefinedType };
            }
            export { fields_323 as fields };
        }
        namespace IfcMove {
            const domain_324: string;
            export { domain_324 as domain };
            const superclasses_324: string[];
            export { superclasses_324 as superclasses };
            export namespace fields_324 {
                namespace MoveFrom {
                    const type_849: string;
                    export { type_849 as type };
                    const reference_849: boolean;
                    export { reference_849 as reference };
                    const many_849: boolean;
                    export { many_849 as many };
                    const inverse_849: boolean;
                    export { inverse_849 as inverse };
                }
                namespace MoveTo {
                    const type_850: string;
                    export { type_850 as type };
                    const reference_850: boolean;
                    export { reference_850 as reference };
                    const many_850: boolean;
                    export { many_850 as many };
                    const inverse_850: boolean;
                    export { inverse_850 as inverse };
                }
                namespace PunchList {
                    const type_851: string;
                    export { type_851 as type };
                    const reference_851: boolean;
                    export { reference_851 as reference };
                    const many_851: boolean;
                    export { many_851 as many };
                    const inverse_851: boolean;
                    export { inverse_851 as inverse };
                }
            }
            export { fields_324 as fields };
        }
        namespace IfcNamedUnit {
            const domain_325: string;
            export { domain_325 as domain };
            const superclasses_325: string[];
            export { superclasses_325 as superclasses };
            export namespace fields_325 {
                export namespace Dimensions {
                    const type_852: string;
                    export { type_852 as type };
                    const reference_852: boolean;
                    export { reference_852 as reference };
                    const many_852: boolean;
                    export { many_852 as many };
                    const inverse_852: boolean;
                    export { inverse_852 as inverse };
                }
                export namespace UnitType_1 {
                    const type_853: string;
                    export { type_853 as type };
                    const reference_853: boolean;
                    export { reference_853 as reference };
                    const many_853: boolean;
                    export { many_853 as many };
                    const inverse_853: boolean;
                    export { inverse_853 as inverse };
                }
                export { UnitType_1 as UnitType };
            }
            export { fields_325 as fields };
        }
        namespace IfcObject {
            const domain_326: string;
            export { domain_326 as domain };
            const superclasses_326: string[];
            export { superclasses_326 as superclasses };
            export namespace fields_326 {
                namespace ObjectType {
                    const type_854: string;
                    export { type_854 as type };
                    const reference_854: boolean;
                    export { reference_854 as reference };
                    const many_854: boolean;
                    export { many_854 as many };
                    const inverse_854: boolean;
                    export { inverse_854 as inverse };
                }
                namespace IsDefinedBy {
                    const type_855: string;
                    export { type_855 as type };
                    const reference_855: boolean;
                    export { reference_855 as reference };
                    const many_855: boolean;
                    export { many_855 as many };
                    const inverse_855: boolean;
                    export { inverse_855 as inverse };
                }
            }
            export { fields_326 as fields };
        }
        namespace IfcObjectDefinition {
            const domain_327: string;
            export { domain_327 as domain };
            const superclasses_327: string[];
            export { superclasses_327 as superclasses };
            export namespace fields_327 {
                namespace HasAssignments {
                    const type_856: string;
                    export { type_856 as type };
                    const reference_856: boolean;
                    export { reference_856 as reference };
                    const many_856: boolean;
                    export { many_856 as many };
                    const inverse_856: boolean;
                    export { inverse_856 as inverse };
                }
                namespace IsDecomposedBy {
                    const type_857: string;
                    export { type_857 as type };
                    const reference_857: boolean;
                    export { reference_857 as reference };
                    const many_857: boolean;
                    export { many_857 as many };
                    const inverse_857: boolean;
                    export { inverse_857 as inverse };
                }
                namespace Decomposes {
                    const type_858: string;
                    export { type_858 as type };
                    const reference_858: boolean;
                    export { reference_858 as reference };
                    const many_858: boolean;
                    export { many_858 as many };
                    const inverse_858: boolean;
                    export { inverse_858 as inverse };
                }
                namespace HasAssociations {
                    const type_859: string;
                    export { type_859 as type };
                    const reference_859: boolean;
                    export { reference_859 as reference };
                    const many_859: boolean;
                    export { many_859 as many };
                    const inverse_859: boolean;
                    export { inverse_859 as inverse };
                }
            }
            export { fields_327 as fields };
        }
        namespace IfcObjectPlacement {
            const domain_328: string;
            export { domain_328 as domain };
            const superclasses_328: any[];
            export { superclasses_328 as superclasses };
            export namespace fields_328 {
                namespace PlacesObject {
                    const type_860: string;
                    export { type_860 as type };
                    const reference_860: boolean;
                    export { reference_860 as reference };
                    const many_860: boolean;
                    export { many_860 as many };
                    const inverse_860: boolean;
                    export { inverse_860 as inverse };
                }
                namespace ReferencedByPlacements {
                    const type_861: string;
                    export { type_861 as type };
                    const reference_861: boolean;
                    export { reference_861 as reference };
                    const many_861: boolean;
                    export { many_861 as many };
                    const inverse_861: boolean;
                    export { inverse_861 as inverse };
                }
            }
            export { fields_328 as fields };
        }
        namespace IfcObjective {
            const domain_329: string;
            export { domain_329 as domain };
            const superclasses_329: string[];
            export { superclasses_329 as superclasses };
            export namespace fields_329 {
                namespace BenchmarkValues {
                    const type_862: string;
                    export { type_862 as type };
                    const reference_862: boolean;
                    export { reference_862 as reference };
                    const many_862: boolean;
                    export { many_862 as many };
                    const inverse_862: boolean;
                    export { inverse_862 as inverse };
                }
                namespace ResultValues {
                    const type_863: string;
                    export { type_863 as type };
                    const reference_863: boolean;
                    export { reference_863 as reference };
                    const many_863: boolean;
                    export { many_863 as many };
                    const inverse_863: boolean;
                    export { inverse_863 as inverse };
                }
                namespace ObjectiveQualifier {
                    const type_864: string;
                    export { type_864 as type };
                    const reference_864: boolean;
                    export { reference_864 as reference };
                    const many_864: boolean;
                    export { many_864 as many };
                    const inverse_864: boolean;
                    export { inverse_864 as inverse };
                }
                namespace UserDefinedQualifier {
                    const type_865: string;
                    export { type_865 as type };
                    const reference_865: boolean;
                    export { reference_865 as reference };
                    const many_865: boolean;
                    export { many_865 as many };
                    const inverse_865: boolean;
                    export { inverse_865 as inverse };
                }
            }
            export { fields_329 as fields };
        }
        namespace IfcOccupant {
            const domain_330: string;
            export { domain_330 as domain };
            const superclasses_330: string[];
            export { superclasses_330 as superclasses };
            export namespace fields_330 {
                export namespace PredefinedType_51 {
                    const type_866: string;
                    export { type_866 as type };
                    const reference_866: boolean;
                    export { reference_866 as reference };
                    const many_866: boolean;
                    export { many_866 as many };
                    const inverse_866: boolean;
                    export { inverse_866 as inverse };
                }
                export { PredefinedType_51 as PredefinedType };
            }
            export { fields_330 as fields };
        }
        namespace IfcOffsetCurve2D {
            const domain_331: string;
            export { domain_331 as domain };
            const superclasses_331: string[];
            export { superclasses_331 as superclasses };
            export namespace fields_331 {
                export namespace BasisCurve {
                    const type_867: string;
                    export { type_867 as type };
                    const reference_867: boolean;
                    export { reference_867 as reference };
                    const many_867: boolean;
                    export { many_867 as many };
                    const inverse_867: boolean;
                    export { inverse_867 as inverse };
                }
                export namespace Distance {
                    const type_868: string;
                    export { type_868 as type };
                    const reference_868: boolean;
                    export { reference_868 as reference };
                    const many_868: boolean;
                    export { many_868 as many };
                    const inverse_868: boolean;
                    export { inverse_868 as inverse };
                }
                export namespace DistanceAsString {
                    const type_869: string;
                    export { type_869 as type };
                    const reference_869: boolean;
                    export { reference_869 as reference };
                    const many_869: boolean;
                    export { many_869 as many };
                    const inverse_869: boolean;
                    export { inverse_869 as inverse };
                }
                export namespace SelfIntersect_2 {
                    const type_870: string;
                    export { type_870 as type };
                    const reference_870: boolean;
                    export { reference_870 as reference };
                    const many_870: boolean;
                    export { many_870 as many };
                    const inverse_870: boolean;
                    export { inverse_870 as inverse };
                }
                export { SelfIntersect_2 as SelfIntersect };
            }
            export { fields_331 as fields };
        }
        namespace IfcOffsetCurve3D {
            const domain_332: string;
            export { domain_332 as domain };
            const superclasses_332: string[];
            export { superclasses_332 as superclasses };
            export namespace fields_332 {
                export namespace BasisCurve_1 {
                    const type_871: string;
                    export { type_871 as type };
                    const reference_871: boolean;
                    export { reference_871 as reference };
                    const many_871: boolean;
                    export { many_871 as many };
                    const inverse_871: boolean;
                    export { inverse_871 as inverse };
                }
                export { BasisCurve_1 as BasisCurve };
                export namespace Distance_1 {
                    const type_872: string;
                    export { type_872 as type };
                    const reference_872: boolean;
                    export { reference_872 as reference };
                    const many_872: boolean;
                    export { many_872 as many };
                    const inverse_872: boolean;
                    export { inverse_872 as inverse };
                }
                export { Distance_1 as Distance };
                export namespace DistanceAsString_1 {
                    const type_873: string;
                    export { type_873 as type };
                    const reference_873: boolean;
                    export { reference_873 as reference };
                    const many_873: boolean;
                    export { many_873 as many };
                    const inverse_873: boolean;
                    export { inverse_873 as inverse };
                }
                export { DistanceAsString_1 as DistanceAsString };
                export namespace SelfIntersect_3 {
                    const type_874: string;
                    export { type_874 as type };
                    const reference_874: boolean;
                    export { reference_874 as reference };
                    const many_874: boolean;
                    export { many_874 as many };
                    const inverse_874: boolean;
                    export { inverse_874 as inverse };
                }
                export { SelfIntersect_3 as SelfIntersect };
                export namespace RefDirection_2 {
                    const type_875: string;
                    export { type_875 as type };
                    const reference_875: boolean;
                    export { reference_875 as reference };
                    const many_875: boolean;
                    export { many_875 as many };
                    const inverse_875: boolean;
                    export { inverse_875 as inverse };
                }
                export { RefDirection_2 as RefDirection };
            }
            export { fields_332 as fields };
        }
        namespace IfcOneDirectionRepeatFactor {
            const domain_333: string;
            export { domain_333 as domain };
            const superclasses_333: string[];
            export { superclasses_333 as superclasses };
            export namespace fields_333 {
                namespace RepeatFactor {
                    const type_876: string;
                    export { type_876 as type };
                    const reference_876: boolean;
                    export { reference_876 as reference };
                    const many_876: boolean;
                    export { many_876 as many };
                    const inverse_876: boolean;
                    export { inverse_876 as inverse };
                }
            }
            export { fields_333 as fields };
        }
        namespace IfcOpenShell {
            const domain_334: string;
            export { domain_334 as domain };
            const superclasses_334: string[];
            export { superclasses_334 as superclasses };
            const fields_334: {};
            export { fields_334 as fields };
        }
        namespace IfcOpeningElement {
            const domain_335: string;
            export { domain_335 as domain };
            const superclasses_335: string[];
            export { superclasses_335 as superclasses };
            export namespace fields_335 {
                namespace HasFillings {
                    const type_877: string;
                    export { type_877 as type };
                    const reference_877: boolean;
                    export { reference_877 as reference };
                    const many_877: boolean;
                    export { many_877 as many };
                    const inverse_877: boolean;
                    export { inverse_877 as inverse };
                }
            }
            export { fields_335 as fields };
        }
        namespace IfcOpticalMaterialProperties {
            const domain_336: string;
            export { domain_336 as domain };
            const superclasses_336: string[];
            export { superclasses_336 as superclasses };
            export namespace fields_336 {
                namespace VisibleTransmittance {
                    const type_878: string;
                    export { type_878 as type };
                    const reference_878: boolean;
                    export { reference_878 as reference };
                    const many_878: boolean;
                    export { many_878 as many };
                    const inverse_878: boolean;
                    export { inverse_878 as inverse };
                }
                namespace VisibleTransmittanceAsString {
                    const type_879: string;
                    export { type_879 as type };
                    const reference_879: boolean;
                    export { reference_879 as reference };
                    const many_879: boolean;
                    export { many_879 as many };
                    const inverse_879: boolean;
                    export { inverse_879 as inverse };
                }
                namespace SolarTransmittance {
                    const type_880: string;
                    export { type_880 as type };
                    const reference_880: boolean;
                    export { reference_880 as reference };
                    const many_880: boolean;
                    export { many_880 as many };
                    const inverse_880: boolean;
                    export { inverse_880 as inverse };
                }
                namespace SolarTransmittanceAsString {
                    const type_881: string;
                    export { type_881 as type };
                    const reference_881: boolean;
                    export { reference_881 as reference };
                    const many_881: boolean;
                    export { many_881 as many };
                    const inverse_881: boolean;
                    export { inverse_881 as inverse };
                }
                namespace ThermalIrTransmittance {
                    const type_882: string;
                    export { type_882 as type };
                    const reference_882: boolean;
                    export { reference_882 as reference };
                    const many_882: boolean;
                    export { many_882 as many };
                    const inverse_882: boolean;
                    export { inverse_882 as inverse };
                }
                namespace ThermalIrTransmittanceAsString {
                    const type_883: string;
                    export { type_883 as type };
                    const reference_883: boolean;
                    export { reference_883 as reference };
                    const many_883: boolean;
                    export { many_883 as many };
                    const inverse_883: boolean;
                    export { inverse_883 as inverse };
                }
                namespace ThermalIrEmissivityBack {
                    const type_884: string;
                    export { type_884 as type };
                    const reference_884: boolean;
                    export { reference_884 as reference };
                    const many_884: boolean;
                    export { many_884 as many };
                    const inverse_884: boolean;
                    export { inverse_884 as inverse };
                }
                namespace ThermalIrEmissivityBackAsString {
                    const type_885: string;
                    export { type_885 as type };
                    const reference_885: boolean;
                    export { reference_885 as reference };
                    const many_885: boolean;
                    export { many_885 as many };
                    const inverse_885: boolean;
                    export { inverse_885 as inverse };
                }
                namespace ThermalIrEmissivityFront {
                    const type_886: string;
                    export { type_886 as type };
                    const reference_886: boolean;
                    export { reference_886 as reference };
                    const many_886: boolean;
                    export { many_886 as many };
                    const inverse_886: boolean;
                    export { inverse_886 as inverse };
                }
                namespace ThermalIrEmissivityFrontAsString {
                    const type_887: string;
                    export { type_887 as type };
                    const reference_887: boolean;
                    export { reference_887 as reference };
                    const many_887: boolean;
                    export { many_887 as many };
                    const inverse_887: boolean;
                    export { inverse_887 as inverse };
                }
                namespace VisibleReflectanceBack {
                    const type_888: string;
                    export { type_888 as type };
                    const reference_888: boolean;
                    export { reference_888 as reference };
                    const many_888: boolean;
                    export { many_888 as many };
                    const inverse_888: boolean;
                    export { inverse_888 as inverse };
                }
                namespace VisibleReflectanceBackAsString {
                    const type_889: string;
                    export { type_889 as type };
                    const reference_889: boolean;
                    export { reference_889 as reference };
                    const many_889: boolean;
                    export { many_889 as many };
                    const inverse_889: boolean;
                    export { inverse_889 as inverse };
                }
                namespace VisibleReflectanceFront {
                    const type_890: string;
                    export { type_890 as type };
                    const reference_890: boolean;
                    export { reference_890 as reference };
                    const many_890: boolean;
                    export { many_890 as many };
                    const inverse_890: boolean;
                    export { inverse_890 as inverse };
                }
                namespace VisibleReflectanceFrontAsString {
                    const type_891: string;
                    export { type_891 as type };
                    const reference_891: boolean;
                    export { reference_891 as reference };
                    const many_891: boolean;
                    export { many_891 as many };
                    const inverse_891: boolean;
                    export { inverse_891 as inverse };
                }
                namespace SolarReflectanceFront {
                    const type_892: string;
                    export { type_892 as type };
                    const reference_892: boolean;
                    export { reference_892 as reference };
                    const many_892: boolean;
                    export { many_892 as many };
                    const inverse_892: boolean;
                    export { inverse_892 as inverse };
                }
                namespace SolarReflectanceFrontAsString {
                    const type_893: string;
                    export { type_893 as type };
                    const reference_893: boolean;
                    export { reference_893 as reference };
                    const many_893: boolean;
                    export { many_893 as many };
                    const inverse_893: boolean;
                    export { inverse_893 as inverse };
                }
                namespace SolarReflectanceBack {
                    const type_894: string;
                    export { type_894 as type };
                    const reference_894: boolean;
                    export { reference_894 as reference };
                    const many_894: boolean;
                    export { many_894 as many };
                    const inverse_894: boolean;
                    export { inverse_894 as inverse };
                }
                namespace SolarReflectanceBackAsString {
                    const type_895: string;
                    export { type_895 as type };
                    const reference_895: boolean;
                    export { reference_895 as reference };
                    const many_895: boolean;
                    export { many_895 as many };
                    const inverse_895: boolean;
                    export { inverse_895 as inverse };
                }
            }
            export { fields_336 as fields };
        }
        namespace IfcOrderAction {
            const domain_337: string;
            export { domain_337 as domain };
            const superclasses_337: string[];
            export { superclasses_337 as superclasses };
            export namespace fields_337 {
                namespace ActionID {
                    const type_896: string;
                    export { type_896 as type };
                    const reference_896: boolean;
                    export { reference_896 as reference };
                    const many_896: boolean;
                    export { many_896 as many };
                    const inverse_896: boolean;
                    export { inverse_896 as inverse };
                }
            }
            export { fields_337 as fields };
        }
        namespace IfcOrganization {
            const domain_338: string;
            export { domain_338 as domain };
            const superclasses_338: string[];
            export { superclasses_338 as superclasses };
            export namespace fields_338 {
                export namespace Id {
                    const type_897: string;
                    export { type_897 as type };
                    const reference_897: boolean;
                    export { reference_897 as reference };
                    const many_897: boolean;
                    export { many_897 as many };
                    const inverse_897: boolean;
                    export { inverse_897 as inverse };
                }
                export namespace Name_21 {
                    const type_898: string;
                    export { type_898 as type };
                    const reference_898: boolean;
                    export { reference_898 as reference };
                    const many_898: boolean;
                    export { many_898 as many };
                    const inverse_898: boolean;
                    export { inverse_898 as inverse };
                }
                export { Name_21 as Name };
                export namespace Description_12 {
                    const type_899: string;
                    export { type_899 as type };
                    const reference_899: boolean;
                    export { reference_899 as reference };
                    const many_899: boolean;
                    export { many_899 as many };
                    const inverse_899: boolean;
                    export { inverse_899 as inverse };
                }
                export { Description_12 as Description };
                export namespace Roles {
                    const type_900: string;
                    export { type_900 as type };
                    const reference_900: boolean;
                    export { reference_900 as reference };
                    const many_900: boolean;
                    export { many_900 as many };
                    const inverse_900: boolean;
                    export { inverse_900 as inverse };
                }
                export namespace Addresses {
                    const type_901: string;
                    export { type_901 as type };
                    const reference_901: boolean;
                    export { reference_901 as reference };
                    const many_901: boolean;
                    export { many_901 as many };
                    const inverse_901: boolean;
                    export { inverse_901 as inverse };
                }
                export namespace IsRelatedBy {
                    const type_902: string;
                    export { type_902 as type };
                    const reference_902: boolean;
                    export { reference_902 as reference };
                    const many_902: boolean;
                    export { many_902 as many };
                    const inverse_902: boolean;
                    export { inverse_902 as inverse };
                }
                export namespace Relates_1 {
                    const type_903: string;
                    export { type_903 as type };
                    const reference_903: boolean;
                    export { reference_903 as reference };
                    const many_903: boolean;
                    export { many_903 as many };
                    const inverse_903: boolean;
                    export { inverse_903 as inverse };
                }
                export { Relates_1 as Relates };
                export namespace Engages {
                    const type_904: string;
                    export { type_904 as type };
                    const reference_904: boolean;
                    export { reference_904 as reference };
                    const many_904: boolean;
                    export { many_904 as many };
                    const inverse_904: boolean;
                    export { inverse_904 as inverse };
                }
            }
            export { fields_338 as fields };
        }
        namespace IfcOrganizationRelationship {
            const domain_339: string;
            export { domain_339 as domain };
            const superclasses_339: any[];
            export { superclasses_339 as superclasses };
            export namespace fields_339 {
                export namespace Name_22 {
                    const type_905: string;
                    export { type_905 as type };
                    const reference_905: boolean;
                    export { reference_905 as reference };
                    const many_905: boolean;
                    export { many_905 as many };
                    const inverse_905: boolean;
                    export { inverse_905 as inverse };
                }
                export { Name_22 as Name };
                export namespace Description_13 {
                    const type_906: string;
                    export { type_906 as type };
                    const reference_906: boolean;
                    export { reference_906 as reference };
                    const many_906: boolean;
                    export { many_906 as many };
                    const inverse_906: boolean;
                    export { inverse_906 as inverse };
                }
                export { Description_13 as Description };
                export namespace RelatingOrganization {
                    const type_907: string;
                    export { type_907 as type };
                    const reference_907: boolean;
                    export { reference_907 as reference };
                    const many_907: boolean;
                    export { many_907 as many };
                    const inverse_907: boolean;
                    export { inverse_907 as inverse };
                }
                export namespace RelatedOrganizations {
                    const type_908: string;
                    export { type_908 as type };
                    const reference_908: boolean;
                    export { reference_908 as reference };
                    const many_908: boolean;
                    export { many_908 as many };
                    const inverse_908: boolean;
                    export { inverse_908 as inverse };
                }
            }
            export { fields_339 as fields };
        }
        namespace IfcOrientedEdge {
            const domain_340: string;
            export { domain_340 as domain };
            const superclasses_340: string[];
            export { superclasses_340 as superclasses };
            export namespace fields_340 {
                export namespace EdgeElement {
                    const type_909: string;
                    export { type_909 as type };
                    const reference_909: boolean;
                    export { reference_909 as reference };
                    const many_909: boolean;
                    export { many_909 as many };
                    const inverse_909: boolean;
                    export { inverse_909 as inverse };
                }
                export namespace Orientation_3 {
                    const type_910: string;
                    export { type_910 as type };
                    const reference_910: boolean;
                    export { reference_910 as reference };
                    const many_910: boolean;
                    export { many_910 as many };
                    const inverse_910: boolean;
                    export { inverse_910 as inverse };
                }
                export { Orientation_3 as Orientation };
            }
            export { fields_340 as fields };
        }
        namespace IfcOutletType {
            const domain_341: string;
            export { domain_341 as domain };
            const superclasses_341: string[];
            export { superclasses_341 as superclasses };
            export namespace fields_341 {
                export namespace PredefinedType_52 {
                    const type_911: string;
                    export { type_911 as type };
                    const reference_911: boolean;
                    export { reference_911 as reference };
                    const many_911: boolean;
                    export { many_911 as many };
                    const inverse_911: boolean;
                    export { inverse_911 as inverse };
                }
                export { PredefinedType_52 as PredefinedType };
            }
            export { fields_341 as fields };
        }
        namespace IfcOwnerHistory {
            const domain_342: string;
            export { domain_342 as domain };
            const superclasses_342: any[];
            export { superclasses_342 as superclasses };
            export namespace fields_342 {
                namespace OwningUser {
                    const type_912: string;
                    export { type_912 as type };
                    const reference_912: boolean;
                    export { reference_912 as reference };
                    const many_912: boolean;
                    export { many_912 as many };
                    const inverse_912: boolean;
                    export { inverse_912 as inverse };
                }
                namespace OwningApplication {
                    const type_913: string;
                    export { type_913 as type };
                    const reference_913: boolean;
                    export { reference_913 as reference };
                    const many_913: boolean;
                    export { many_913 as many };
                    const inverse_913: boolean;
                    export { inverse_913 as inverse };
                }
                namespace State {
                    const type_914: string;
                    export { type_914 as type };
                    const reference_914: boolean;
                    export { reference_914 as reference };
                    const many_914: boolean;
                    export { many_914 as many };
                    const inverse_914: boolean;
                    export { inverse_914 as inverse };
                }
                namespace ChangeAction {
                    const type_915: string;
                    export { type_915 as type };
                    const reference_915: boolean;
                    export { reference_915 as reference };
                    const many_915: boolean;
                    export { many_915 as many };
                    const inverse_915: boolean;
                    export { inverse_915 as inverse };
                }
                namespace LastModifiedDate {
                    const type_916: string;
                    export { type_916 as type };
                    const reference_916: boolean;
                    export { reference_916 as reference };
                    const many_916: boolean;
                    export { many_916 as many };
                    const inverse_916: boolean;
                    export { inverse_916 as inverse };
                }
                namespace LastModifyingUser {
                    const type_917: string;
                    export { type_917 as type };
                    const reference_917: boolean;
                    export { reference_917 as reference };
                    const many_917: boolean;
                    export { many_917 as many };
                    const inverse_917: boolean;
                    export { inverse_917 as inverse };
                }
                namespace LastModifyingApplication {
                    const type_918: string;
                    export { type_918 as type };
                    const reference_918: boolean;
                    export { reference_918 as reference };
                    const many_918: boolean;
                    export { many_918 as many };
                    const inverse_918: boolean;
                    export { inverse_918 as inverse };
                }
                namespace CreationDate {
                    const type_919: string;
                    export { type_919 as type };
                    const reference_919: boolean;
                    export { reference_919 as reference };
                    const many_919: boolean;
                    export { many_919 as many };
                    const inverse_919: boolean;
                    export { inverse_919 as inverse };
                }
            }
            export { fields_342 as fields };
        }
        namespace IfcParameterizedProfileDef {
            const domain_343: string;
            export { domain_343 as domain };
            const superclasses_343: string[];
            export { superclasses_343 as superclasses };
            export namespace fields_343 {
                export namespace Position_5 {
                    const type_920: string;
                    export { type_920 as type };
                    const reference_920: boolean;
                    export { reference_920 as reference };
                    const many_920: boolean;
                    export { many_920 as many };
                    const inverse_920: boolean;
                    export { inverse_920 as inverse };
                }
                export { Position_5 as Position };
            }
            export { fields_343 as fields };
        }
        namespace IfcPath {
            const domain_344: string;
            export { domain_344 as domain };
            const superclasses_344: string[];
            export { superclasses_344 as superclasses };
            export namespace fields_344 {
                export namespace EdgeList_1 {
                    const type_921: string;
                    export { type_921 as type };
                    const reference_921: boolean;
                    export { reference_921 as reference };
                    const many_921: boolean;
                    export { many_921 as many };
                    const inverse_921: boolean;
                    export { inverse_921 as inverse };
                }
                export { EdgeList_1 as EdgeList };
            }
            export { fields_344 as fields };
        }
        namespace IfcPerformanceHistory {
            const domain_345: string;
            export { domain_345 as domain };
            const superclasses_345: string[];
            export { superclasses_345 as superclasses };
            export namespace fields_345 {
                namespace LifeCyclePhase {
                    const type_922: string;
                    export { type_922 as type };
                    const reference_922: boolean;
                    export { reference_922 as reference };
                    const many_922: boolean;
                    export { many_922 as many };
                    const inverse_922: boolean;
                    export { inverse_922 as inverse };
                }
            }
            export { fields_345 as fields };
        }
        namespace IfcPermeableCoveringProperties {
            const domain_346: string;
            export { domain_346 as domain };
            const superclasses_346: string[];
            export { superclasses_346 as superclasses };
            export namespace fields_346 {
                export namespace OperationType_1 {
                    const type_923: string;
                    export { type_923 as type };
                    const reference_923: boolean;
                    export { reference_923 as reference };
                    const many_923: boolean;
                    export { many_923 as many };
                    const inverse_923: boolean;
                    export { inverse_923 as inverse };
                }
                export { OperationType_1 as OperationType };
                export namespace PanelPosition_1 {
                    const type_924: string;
                    export { type_924 as type };
                    const reference_924: boolean;
                    export { reference_924 as reference };
                    const many_924: boolean;
                    export { many_924 as many };
                    const inverse_924: boolean;
                    export { inverse_924 as inverse };
                }
                export { PanelPosition_1 as PanelPosition };
                export namespace FrameDepth {
                    const type_925: string;
                    export { type_925 as type };
                    const reference_925: boolean;
                    export { reference_925 as reference };
                    const many_925: boolean;
                    export { many_925 as many };
                    const inverse_925: boolean;
                    export { inverse_925 as inverse };
                }
                export namespace FrameDepthAsString {
                    const type_926: string;
                    export { type_926 as type };
                    const reference_926: boolean;
                    export { reference_926 as reference };
                    const many_926: boolean;
                    export { many_926 as many };
                    const inverse_926: boolean;
                    export { inverse_926 as inverse };
                }
                export namespace FrameThickness {
                    const type_927: string;
                    export { type_927 as type };
                    const reference_927: boolean;
                    export { reference_927 as reference };
                    const many_927: boolean;
                    export { many_927 as many };
                    const inverse_927: boolean;
                    export { inverse_927 as inverse };
                }
                export namespace FrameThicknessAsString {
                    const type_928: string;
                    export { type_928 as type };
                    const reference_928: boolean;
                    export { reference_928 as reference };
                    const many_928: boolean;
                    export { many_928 as many };
                    const inverse_928: boolean;
                    export { inverse_928 as inverse };
                }
                export namespace ShapeAspectStyle_2 {
                    const type_929: string;
                    export { type_929 as type };
                    const reference_929: boolean;
                    export { reference_929 as reference };
                    const many_929: boolean;
                    export { many_929 as many };
                    const inverse_929: boolean;
                    export { inverse_929 as inverse };
                }
                export { ShapeAspectStyle_2 as ShapeAspectStyle };
            }
            export { fields_346 as fields };
        }
        namespace IfcPermit {
            const domain_347: string;
            export { domain_347 as domain };
            const superclasses_347: string[];
            export { superclasses_347 as superclasses };
            export namespace fields_347 {
                namespace PermitID {
                    const type_930: string;
                    export { type_930 as type };
                    const reference_930: boolean;
                    export { reference_930 as reference };
                    const many_930: boolean;
                    export { many_930 as many };
                    const inverse_930: boolean;
                    export { inverse_930 as inverse };
                }
            }
            export { fields_347 as fields };
        }
        namespace IfcPerson {
            const domain_348: string;
            export { domain_348 as domain };
            const superclasses_348: string[];
            export { superclasses_348 as superclasses };
            export namespace fields_348 {
                export namespace Id_1 {
                    const type_931: string;
                    export { type_931 as type };
                    const reference_931: boolean;
                    export { reference_931 as reference };
                    const many_931: boolean;
                    export { many_931 as many };
                    const inverse_931: boolean;
                    export { inverse_931 as inverse };
                }
                export { Id_1 as Id };
                export namespace FamilyName {
                    const type_932: string;
                    export { type_932 as type };
                    const reference_932: boolean;
                    export { reference_932 as reference };
                    const many_932: boolean;
                    export { many_932 as many };
                    const inverse_932: boolean;
                    export { inverse_932 as inverse };
                }
                export namespace GivenName {
                    const type_933: string;
                    export { type_933 as type };
                    const reference_933: boolean;
                    export { reference_933 as reference };
                    const many_933: boolean;
                    export { many_933 as many };
                    const inverse_933: boolean;
                    export { inverse_933 as inverse };
                }
                export namespace MiddleNames {
                    const type_934: string;
                    export { type_934 as type };
                    const reference_934: boolean;
                    export { reference_934 as reference };
                    const many_934: boolean;
                    export { many_934 as many };
                    const inverse_934: boolean;
                    export { inverse_934 as inverse };
                }
                export namespace PrefixTitles {
                    const type_935: string;
                    export { type_935 as type };
                    const reference_935: boolean;
                    export { reference_935 as reference };
                    const many_935: boolean;
                    export { many_935 as many };
                    const inverse_935: boolean;
                    export { inverse_935 as inverse };
                }
                export namespace SuffixTitles {
                    const type_936: string;
                    export { type_936 as type };
                    const reference_936: boolean;
                    export { reference_936 as reference };
                    const many_936: boolean;
                    export { many_936 as many };
                    const inverse_936: boolean;
                    export { inverse_936 as inverse };
                }
                export namespace Roles_1 {
                    const type_937: string;
                    export { type_937 as type };
                    const reference_937: boolean;
                    export { reference_937 as reference };
                    const many_937: boolean;
                    export { many_937 as many };
                    const inverse_937: boolean;
                    export { inverse_937 as inverse };
                }
                export { Roles_1 as Roles };
                export namespace Addresses_1 {
                    const type_938: string;
                    export { type_938 as type };
                    const reference_938: boolean;
                    export { reference_938 as reference };
                    const many_938: boolean;
                    export { many_938 as many };
                    const inverse_938: boolean;
                    export { inverse_938 as inverse };
                }
                export { Addresses_1 as Addresses };
                export namespace EngagedIn {
                    const type_939: string;
                    export { type_939 as type };
                    const reference_939: boolean;
                    export { reference_939 as reference };
                    const many_939: boolean;
                    export { many_939 as many };
                    const inverse_939: boolean;
                    export { inverse_939 as inverse };
                }
            }
            export { fields_348 as fields };
        }
        namespace IfcPersonAndOrganization {
            const domain_349: string;
            export { domain_349 as domain };
            const superclasses_349: string[];
            export { superclasses_349 as superclasses };
            export namespace fields_349 {
                export namespace ThePerson {
                    const type_940: string;
                    export { type_940 as type };
                    const reference_940: boolean;
                    export { reference_940 as reference };
                    const many_940: boolean;
                    export { many_940 as many };
                    const inverse_940: boolean;
                    export { inverse_940 as inverse };
                }
                export namespace TheOrganization {
                    const type_941: string;
                    export { type_941 as type };
                    const reference_941: boolean;
                    export { reference_941 as reference };
                    const many_941: boolean;
                    export { many_941 as many };
                    const inverse_941: boolean;
                    export { inverse_941 as inverse };
                }
                export namespace Roles_2 {
                    const type_942: string;
                    export { type_942 as type };
                    const reference_942: boolean;
                    export { reference_942 as reference };
                    const many_942: boolean;
                    export { many_942 as many };
                    const inverse_942: boolean;
                    export { inverse_942 as inverse };
                }
                export { Roles_2 as Roles };
            }
            export { fields_349 as fields };
        }
        namespace IfcPhysicalComplexQuantity {
            const domain_350: string;
            export { domain_350 as domain };
            const superclasses_350: string[];
            export { superclasses_350 as superclasses };
            export namespace fields_350 {
                namespace HasQuantities {
                    const type_943: string;
                    export { type_943 as type };
                    const reference_943: boolean;
                    export { reference_943 as reference };
                    const many_943: boolean;
                    export { many_943 as many };
                    const inverse_943: boolean;
                    export { inverse_943 as inverse };
                }
                namespace Discrimination {
                    const type_944: string;
                    export { type_944 as type };
                    const reference_944: boolean;
                    export { reference_944 as reference };
                    const many_944: boolean;
                    export { many_944 as many };
                    const inverse_944: boolean;
                    export { inverse_944 as inverse };
                }
                namespace Quality {
                    const type_945: string;
                    export { type_945 as type };
                    const reference_945: boolean;
                    export { reference_945 as reference };
                    const many_945: boolean;
                    export { many_945 as many };
                    const inverse_945: boolean;
                    export { inverse_945 as inverse };
                }
                namespace Usage {
                    const type_946: string;
                    export { type_946 as type };
                    const reference_946: boolean;
                    export { reference_946 as reference };
                    const many_946: boolean;
                    export { many_946 as many };
                    const inverse_946: boolean;
                    export { inverse_946 as inverse };
                }
            }
            export { fields_350 as fields };
        }
        namespace IfcPhysicalQuantity {
            const domain_351: string;
            export { domain_351 as domain };
            const superclasses_351: any[];
            export { superclasses_351 as superclasses };
            export namespace fields_351 {
                export namespace Name_23 {
                    const type_947: string;
                    export { type_947 as type };
                    const reference_947: boolean;
                    export { reference_947 as reference };
                    const many_947: boolean;
                    export { many_947 as many };
                    const inverse_947: boolean;
                    export { inverse_947 as inverse };
                }
                export { Name_23 as Name };
                export namespace Description_14 {
                    const type_948: string;
                    export { type_948 as type };
                    const reference_948: boolean;
                    export { reference_948 as reference };
                    const many_948: boolean;
                    export { many_948 as many };
                    const inverse_948: boolean;
                    export { inverse_948 as inverse };
                }
                export { Description_14 as Description };
                export namespace PartOfComplex {
                    const type_949: string;
                    export { type_949 as type };
                    const reference_949: boolean;
                    export { reference_949 as reference };
                    const many_949: boolean;
                    export { many_949 as many };
                    const inverse_949: boolean;
                    export { inverse_949 as inverse };
                }
            }
            export { fields_351 as fields };
        }
        namespace IfcPhysicalSimpleQuantity {
            const domain_352: string;
            export { domain_352 as domain };
            const superclasses_352: string[];
            export { superclasses_352 as superclasses };
            export namespace fields_352 {
                export namespace Unit_1 {
                    const type_950: string;
                    export { type_950 as type };
                    const reference_950: boolean;
                    export { reference_950 as reference };
                    const many_950: boolean;
                    export { many_950 as many };
                    const inverse_950: boolean;
                    export { inverse_950 as inverse };
                }
                export { Unit_1 as Unit };
            }
            export { fields_352 as fields };
        }
        namespace IfcPile {
            const domain_353: string;
            export { domain_353 as domain };
            const superclasses_353: string[];
            export { superclasses_353 as superclasses };
            export namespace fields_353 {
                export namespace PredefinedType_53 {
                    const type_951: string;
                    export { type_951 as type };
                    const reference_951: boolean;
                    export { reference_951 as reference };
                    const many_951: boolean;
                    export { many_951 as many };
                    const inverse_951: boolean;
                    export { inverse_951 as inverse };
                }
                export { PredefinedType_53 as PredefinedType };
                export namespace ConstructionType_1 {
                    const type_952: string;
                    export { type_952 as type };
                    const reference_952: boolean;
                    export { reference_952 as reference };
                    const many_952: boolean;
                    export { many_952 as many };
                    const inverse_952: boolean;
                    export { inverse_952 as inverse };
                }
                export { ConstructionType_1 as ConstructionType };
            }
            export { fields_353 as fields };
        }
        namespace IfcPipeFittingType {
            const domain_354: string;
            export { domain_354 as domain };
            const superclasses_354: string[];
            export { superclasses_354 as superclasses };
            export namespace fields_354 {
                export namespace PredefinedType_54 {
                    const type_953: string;
                    export { type_953 as type };
                    const reference_953: boolean;
                    export { reference_953 as reference };
                    const many_953: boolean;
                    export { many_953 as many };
                    const inverse_953: boolean;
                    export { inverse_953 as inverse };
                }
                export { PredefinedType_54 as PredefinedType };
            }
            export { fields_354 as fields };
        }
        namespace IfcPipeSegmentType {
            const domain_355: string;
            export { domain_355 as domain };
            const superclasses_355: string[];
            export { superclasses_355 as superclasses };
            export namespace fields_355 {
                export namespace PredefinedType_55 {
                    const type_954: string;
                    export { type_954 as type };
                    const reference_954: boolean;
                    export { reference_954 as reference };
                    const many_954: boolean;
                    export { many_954 as many };
                    const inverse_954: boolean;
                    export { inverse_954 as inverse };
                }
                export { PredefinedType_55 as PredefinedType };
            }
            export { fields_355 as fields };
        }
        namespace IfcPixelTexture {
            const domain_356: string;
            export { domain_356 as domain };
            const superclasses_356: string[];
            export { superclasses_356 as superclasses };
            export namespace fields_356 {
                export namespace Width_3 {
                    const type_955: string;
                    export { type_955 as type };
                    const reference_955: boolean;
                    export { reference_955 as reference };
                    const many_955: boolean;
                    export { many_955 as many };
                    const inverse_955: boolean;
                    export { inverse_955 as inverse };
                }
                export { Width_3 as Width };
                export namespace Height_1 {
                    const type_956: string;
                    export { type_956 as type };
                    const reference_956: boolean;
                    export { reference_956 as reference };
                    const many_956: boolean;
                    export { many_956 as many };
                    const inverse_956: boolean;
                    export { inverse_956 as inverse };
                }
                export { Height_1 as Height };
                export namespace ColourComponents {
                    const type_957: string;
                    export { type_957 as type };
                    const reference_957: boolean;
                    export { reference_957 as reference };
                    const many_957: boolean;
                    export { many_957 as many };
                    const inverse_957: boolean;
                    export { inverse_957 as inverse };
                }
                export namespace Pixel {
                    const type_958: string;
                    export { type_958 as type };
                    const reference_958: boolean;
                    export { reference_958 as reference };
                    const many_958: boolean;
                    export { many_958 as many };
                    const inverse_958: boolean;
                    export { inverse_958 as inverse };
                }
            }
            export { fields_356 as fields };
        }
        namespace IfcPlacement {
            const domain_357: string;
            export { domain_357 as domain };
            const superclasses_357: string[];
            export { superclasses_357 as superclasses };
            export namespace fields_357 {
                export namespace Location_1 {
                    const type_959: string;
                    export { type_959 as type };
                    const reference_959: boolean;
                    export { reference_959 as reference };
                    const many_959: boolean;
                    export { many_959 as many };
                    const inverse_959: boolean;
                    export { inverse_959 as inverse };
                }
                export { Location_1 as Location };
                export namespace Dim_13 {
                    const type_960: string;
                    export { type_960 as type };
                    const reference_960: boolean;
                    export { reference_960 as reference };
                    const many_960: boolean;
                    export { many_960 as many };
                    const inverse_960: boolean;
                    export { inverse_960 as inverse };
                }
                export { Dim_13 as Dim };
            }
            export { fields_357 as fields };
        }
        namespace IfcPlanarBox {
            const domain_358: string;
            export { domain_358 as domain };
            const superclasses_358: string[];
            export { superclasses_358 as superclasses };
            export namespace fields_358 {
                namespace Placement {
                    const type_961: string;
                    export { type_961 as type };
                    const reference_961: boolean;
                    export { reference_961 as reference };
                    const many_961: boolean;
                    export { many_961 as many };
                    const inverse_961: boolean;
                    export { inverse_961 as inverse };
                }
            }
            export { fields_358 as fields };
        }
        namespace IfcPlanarExtent {
            const domain_359: string;
            export { domain_359 as domain };
            const superclasses_359: string[];
            export { superclasses_359 as superclasses };
            export namespace fields_359 {
                namespace SizeInX {
                    const type_962: string;
                    export { type_962 as type };
                    const reference_962: boolean;
                    export { reference_962 as reference };
                    const many_962: boolean;
                    export { many_962 as many };
                    const inverse_962: boolean;
                    export { inverse_962 as inverse };
                }
                namespace SizeInXAsString {
                    const type_963: string;
                    export { type_963 as type };
                    const reference_963: boolean;
                    export { reference_963 as reference };
                    const many_963: boolean;
                    export { many_963 as many };
                    const inverse_963: boolean;
                    export { inverse_963 as inverse };
                }
                namespace SizeInY {
                    const type_964: string;
                    export { type_964 as type };
                    const reference_964: boolean;
                    export { reference_964 as reference };
                    const many_964: boolean;
                    export { many_964 as many };
                    const inverse_964: boolean;
                    export { inverse_964 as inverse };
                }
                namespace SizeInYAsString {
                    const type_965: string;
                    export { type_965 as type };
                    const reference_965: boolean;
                    export { reference_965 as reference };
                    const many_965: boolean;
                    export { many_965 as many };
                    const inverse_965: boolean;
                    export { inverse_965 as inverse };
                }
            }
            export { fields_359 as fields };
        }
        namespace IfcPlane {
            const domain_360: string;
            export { domain_360 as domain };
            const superclasses_360: string[];
            export { superclasses_360 as superclasses };
            const fields_360: {};
            export { fields_360 as fields };
        }
        namespace IfcPlate {
            const domain_361: string;
            export { domain_361 as domain };
            const superclasses_361: string[];
            export { superclasses_361 as superclasses };
            const fields_361: {};
            export { fields_361 as fields };
        }
        namespace IfcPlateType {
            const domain_362: string;
            export { domain_362 as domain };
            const superclasses_362: string[];
            export { superclasses_362 as superclasses };
            export namespace fields_362 {
                export namespace PredefinedType_56 {
                    const type_966: string;
                    export { type_966 as type };
                    const reference_966: boolean;
                    export { reference_966 as reference };
                    const many_966: boolean;
                    export { many_966 as many };
                    const inverse_966: boolean;
                    export { inverse_966 as inverse };
                }
                export { PredefinedType_56 as PredefinedType };
            }
            export { fields_362 as fields };
        }
        namespace IfcPoint {
            const domain_363: string;
            export { domain_363 as domain };
            const superclasses_363: string[];
            export { superclasses_363 as superclasses };
            const fields_363: {};
            export { fields_363 as fields };
        }
        namespace IfcPointOnCurve {
            const domain_364: string;
            export { domain_364 as domain };
            const superclasses_364: string[];
            export { superclasses_364 as superclasses };
            export namespace fields_364 {
                export namespace BasisCurve_2 {
                    const type_967: string;
                    export { type_967 as type };
                    const reference_967: boolean;
                    export { reference_967 as reference };
                    const many_967: boolean;
                    export { many_967 as many };
                    const inverse_967: boolean;
                    export { inverse_967 as inverse };
                }
                export { BasisCurve_2 as BasisCurve };
                export namespace PointParameter {
                    const type_968: string;
                    export { type_968 as type };
                    const reference_968: boolean;
                    export { reference_968 as reference };
                    const many_968: boolean;
                    export { many_968 as many };
                    const inverse_968: boolean;
                    export { inverse_968 as inverse };
                }
                export namespace PointParameterAsString {
                    const type_969: string;
                    export { type_969 as type };
                    const reference_969: boolean;
                    export { reference_969 as reference };
                    const many_969: boolean;
                    export { many_969 as many };
                    const inverse_969: boolean;
                    export { inverse_969 as inverse };
                }
                export namespace Dim_14 {
                    const type_970: string;
                    export { type_970 as type };
                    const reference_970: boolean;
                    export { reference_970 as reference };
                    const many_970: boolean;
                    export { many_970 as many };
                    const inverse_970: boolean;
                    export { inverse_970 as inverse };
                }
                export { Dim_14 as Dim };
            }
            export { fields_364 as fields };
        }
        namespace IfcPointOnSurface {
            const domain_365: string;
            export { domain_365 as domain };
            const superclasses_365: string[];
            export { superclasses_365 as superclasses };
            export namespace fields_365 {
                export namespace BasisSurface_1 {
                    const type_971: string;
                    export { type_971 as type };
                    const reference_971: boolean;
                    export { reference_971 as reference };
                    const many_971: boolean;
                    export { many_971 as many };
                    const inverse_971: boolean;
                    export { inverse_971 as inverse };
                }
                export { BasisSurface_1 as BasisSurface };
                export namespace PointParameterU {
                    const type_972: string;
                    export { type_972 as type };
                    const reference_972: boolean;
                    export { reference_972 as reference };
                    const many_972: boolean;
                    export { many_972 as many };
                    const inverse_972: boolean;
                    export { inverse_972 as inverse };
                }
                export namespace PointParameterUAsString {
                    const type_973: string;
                    export { type_973 as type };
                    const reference_973: boolean;
                    export { reference_973 as reference };
                    const many_973: boolean;
                    export { many_973 as many };
                    const inverse_973: boolean;
                    export { inverse_973 as inverse };
                }
                export namespace PointParameterV {
                    const type_974: string;
                    export { type_974 as type };
                    const reference_974: boolean;
                    export { reference_974 as reference };
                    const many_974: boolean;
                    export { many_974 as many };
                    const inverse_974: boolean;
                    export { inverse_974 as inverse };
                }
                export namespace PointParameterVAsString {
                    const type_975: string;
                    export { type_975 as type };
                    const reference_975: boolean;
                    export { reference_975 as reference };
                    const many_975: boolean;
                    export { many_975 as many };
                    const inverse_975: boolean;
                    export { inverse_975 as inverse };
                }
                export namespace Dim_15 {
                    const type_976: string;
                    export { type_976 as type };
                    const reference_976: boolean;
                    export { reference_976 as reference };
                    const many_976: boolean;
                    export { many_976 as many };
                    const inverse_976: boolean;
                    export { inverse_976 as inverse };
                }
                export { Dim_15 as Dim };
            }
            export { fields_365 as fields };
        }
        namespace IfcPolyLoop {
            const domain_366: string;
            export { domain_366 as domain };
            const superclasses_366: string[];
            export { superclasses_366 as superclasses };
            export namespace fields_366 {
                namespace Polygon {
                    const type_977: string;
                    export { type_977 as type };
                    const reference_977: boolean;
                    export { reference_977 as reference };
                    const many_977: boolean;
                    export { many_977 as many };
                    const inverse_977: boolean;
                    export { inverse_977 as inverse };
                }
            }
            export { fields_366 as fields };
        }
        namespace IfcPolygonalBoundedHalfSpace {
            const domain_367: string;
            export { domain_367 as domain };
            const superclasses_367: string[];
            export { superclasses_367 as superclasses };
            export namespace fields_367 {
                export namespace Position_6 {
                    const type_978: string;
                    export { type_978 as type };
                    const reference_978: boolean;
                    export { reference_978 as reference };
                    const many_978: boolean;
                    export { many_978 as many };
                    const inverse_978: boolean;
                    export { inverse_978 as inverse };
                }
                export { Position_6 as Position };
                export namespace PolygonalBoundary {
                    const type_979: string;
                    export { type_979 as type };
                    const reference_979: boolean;
                    export { reference_979 as reference };
                    const many_979: boolean;
                    export { many_979 as many };
                    const inverse_979: boolean;
                    export { inverse_979 as inverse };
                }
            }
            export { fields_367 as fields };
        }
        namespace IfcPolyline {
            const domain_368: string;
            export { domain_368 as domain };
            const superclasses_368: string[];
            export { superclasses_368 as superclasses };
            export namespace fields_368 {
                namespace Points {
                    const type_980: string;
                    export { type_980 as type };
                    const reference_980: boolean;
                    export { reference_980 as reference };
                    const many_980: boolean;
                    export { many_980 as many };
                    const inverse_980: boolean;
                    export { inverse_980 as inverse };
                }
            }
            export { fields_368 as fields };
        }
        namespace IfcPort {
            const domain_369: string;
            export { domain_369 as domain };
            const superclasses_369: string[];
            export { superclasses_369 as superclasses };
            export namespace fields_369 {
                export namespace ContainedIn {
                    const type_981: string;
                    export { type_981 as type };
                    const reference_981: boolean;
                    export { reference_981 as reference };
                    const many_981: boolean;
                    export { many_981 as many };
                    const inverse_981: boolean;
                    export { inverse_981 as inverse };
                }
                export namespace ConnectedFrom_1 {
                    const type_982: string;
                    export { type_982 as type };
                    const reference_982: boolean;
                    export { reference_982 as reference };
                    const many_982: boolean;
                    export { many_982 as many };
                    const inverse_982: boolean;
                    export { inverse_982 as inverse };
                }
                export { ConnectedFrom_1 as ConnectedFrom };
                export namespace ConnectedTo_1 {
                    const type_983: string;
                    export { type_983 as type };
                    const reference_983: boolean;
                    export { reference_983 as reference };
                    const many_983: boolean;
                    export { many_983 as many };
                    const inverse_983: boolean;
                    export { inverse_983 as inverse };
                }
                export { ConnectedTo_1 as ConnectedTo };
            }
            export { fields_369 as fields };
        }
        namespace IfcPostalAddress {
            const domain_370: string;
            export { domain_370 as domain };
            const superclasses_370: string[];
            export { superclasses_370 as superclasses };
            export namespace fields_370 {
                namespace InternalLocation {
                    const type_984: string;
                    export { type_984 as type };
                    const reference_984: boolean;
                    export { reference_984 as reference };
                    const many_984: boolean;
                    export { many_984 as many };
                    const inverse_984: boolean;
                    export { inverse_984 as inverse };
                }
                namespace AddressLines {
                    const type_985: string;
                    export { type_985 as type };
                    const reference_985: boolean;
                    export { reference_985 as reference };
                    const many_985: boolean;
                    export { many_985 as many };
                    const inverse_985: boolean;
                    export { inverse_985 as inverse };
                }
                namespace PostalBox {
                    const type_986: string;
                    export { type_986 as type };
                    const reference_986: boolean;
                    export { reference_986 as reference };
                    const many_986: boolean;
                    export { many_986 as many };
                    const inverse_986: boolean;
                    export { inverse_986 as inverse };
                }
                namespace Town {
                    const type_987: string;
                    export { type_987 as type };
                    const reference_987: boolean;
                    export { reference_987 as reference };
                    const many_987: boolean;
                    export { many_987 as many };
                    const inverse_987: boolean;
                    export { inverse_987 as inverse };
                }
                namespace Region {
                    const type_988: string;
                    export { type_988 as type };
                    const reference_988: boolean;
                    export { reference_988 as reference };
                    const many_988: boolean;
                    export { many_988 as many };
                    const inverse_988: boolean;
                    export { inverse_988 as inverse };
                }
                namespace PostalCode {
                    const type_989: string;
                    export { type_989 as type };
                    const reference_989: boolean;
                    export { reference_989 as reference };
                    const many_989: boolean;
                    export { many_989 as many };
                    const inverse_989: boolean;
                    export { inverse_989 as inverse };
                }
                namespace Country {
                    const type_990: string;
                    export { type_990 as type };
                    const reference_990: boolean;
                    export { reference_990 as reference };
                    const many_990: boolean;
                    export { many_990 as many };
                    const inverse_990: boolean;
                    export { inverse_990 as inverse };
                }
            }
            export { fields_370 as fields };
        }
        namespace IfcPreDefinedColour {
            const domain_371: string;
            export { domain_371 as domain };
            const superclasses_371: string[];
            export { superclasses_371 as superclasses };
            const fields_371: {};
            export { fields_371 as fields };
        }
        namespace IfcPreDefinedCurveFont {
            const domain_372: string;
            export { domain_372 as domain };
            const superclasses_372: string[];
            export { superclasses_372 as superclasses };
            const fields_372: {};
            export { fields_372 as fields };
        }
        namespace IfcPreDefinedDimensionSymbol {
            const domain_373: string;
            export { domain_373 as domain };
            const superclasses_373: string[];
            export { superclasses_373 as superclasses };
            const fields_373: {};
            export { fields_373 as fields };
        }
        namespace IfcPreDefinedItem {
            const domain_374: string;
            export { domain_374 as domain };
            const superclasses_374: any[];
            export { superclasses_374 as superclasses };
            export namespace fields_374 {
                export namespace Name_24 {
                    const type_991: string;
                    export { type_991 as type };
                    const reference_991: boolean;
                    export { reference_991 as reference };
                    const many_991: boolean;
                    export { many_991 as many };
                    const inverse_991: boolean;
                    export { inverse_991 as inverse };
                }
                export { Name_24 as Name };
            }
            export { fields_374 as fields };
        }
        namespace IfcPreDefinedPointMarkerSymbol {
            const domain_375: string;
            export { domain_375 as domain };
            const superclasses_375: string[];
            export { superclasses_375 as superclasses };
            const fields_375: {};
            export { fields_375 as fields };
        }
        namespace IfcPreDefinedSymbol {
            const domain_376: string;
            export { domain_376 as domain };
            const superclasses_376: string[];
            export { superclasses_376 as superclasses };
            const fields_376: {};
            export { fields_376 as fields };
        }
        namespace IfcPreDefinedTerminatorSymbol {
            const domain_377: string;
            export { domain_377 as domain };
            const superclasses_377: string[];
            export { superclasses_377 as superclasses };
            const fields_377: {};
            export { fields_377 as fields };
        }
        namespace IfcPreDefinedTextFont {
            const domain_378: string;
            export { domain_378 as domain };
            const superclasses_378: string[];
            export { superclasses_378 as superclasses };
            const fields_378: {};
            export { fields_378 as fields };
        }
        namespace IfcPresentationLayerAssignment {
            const domain_379: string;
            export { domain_379 as domain };
            const superclasses_379: any[];
            export { superclasses_379 as superclasses };
            export namespace fields_379 {
                export namespace Name_25 {
                    const type_992: string;
                    export { type_992 as type };
                    const reference_992: boolean;
                    export { reference_992 as reference };
                    const many_992: boolean;
                    export { many_992 as many };
                    const inverse_992: boolean;
                    export { inverse_992 as inverse };
                }
                export { Name_25 as Name };
                export namespace Description_15 {
                    const type_993: string;
                    export { type_993 as type };
                    const reference_993: boolean;
                    export { reference_993 as reference };
                    const many_993: boolean;
                    export { many_993 as many };
                    const inverse_993: boolean;
                    export { inverse_993 as inverse };
                }
                export { Description_15 as Description };
                export namespace AssignedItems {
                    const type_994: string;
                    export { type_994 as type };
                    const reference_994: boolean;
                    export { reference_994 as reference };
                    const many_994: boolean;
                    export { many_994 as many };
                    const inverse_994: boolean;
                    export { inverse_994 as inverse };
                }
                export namespace Identifier_1 {
                    const type_995: string;
                    export { type_995 as type };
                    const reference_995: boolean;
                    export { reference_995 as reference };
                    const many_995: boolean;
                    export { many_995 as many };
                    const inverse_995: boolean;
                    export { inverse_995 as inverse };
                }
                export { Identifier_1 as Identifier };
            }
            export { fields_379 as fields };
        }
        namespace IfcPresentationLayerWithStyle {
            const domain_380: string;
            export { domain_380 as domain };
            const superclasses_380: string[];
            export { superclasses_380 as superclasses };
            export namespace fields_380 {
                namespace LayerOn {
                    const type_996: string;
                    export { type_996 as type };
                    const reference_996: boolean;
                    export { reference_996 as reference };
                    const many_996: boolean;
                    export { many_996 as many };
                    const inverse_996: boolean;
                    export { inverse_996 as inverse };
                }
                namespace LayerFrozen {
                    const type_997: string;
                    export { type_997 as type };
                    const reference_997: boolean;
                    export { reference_997 as reference };
                    const many_997: boolean;
                    export { many_997 as many };
                    const inverse_997: boolean;
                    export { inverse_997 as inverse };
                }
                namespace LayerBlocked {
                    const type_998: string;
                    export { type_998 as type };
                    const reference_998: boolean;
                    export { reference_998 as reference };
                    const many_998: boolean;
                    export { many_998 as many };
                    const inverse_998: boolean;
                    export { inverse_998 as inverse };
                }
                namespace LayerStyles {
                    const type_999: string;
                    export { type_999 as type };
                    const reference_999: boolean;
                    export { reference_999 as reference };
                    const many_999: boolean;
                    export { many_999 as many };
                    const inverse_999: boolean;
                    export { inverse_999 as inverse };
                }
            }
            export { fields_380 as fields };
        }
        namespace IfcPresentationStyle {
            const domain_381: string;
            export { domain_381 as domain };
            const superclasses_381: any[];
            export { superclasses_381 as superclasses };
            export namespace fields_381 {
                export namespace Name_26 {
                    const type_1000: string;
                    export { type_1000 as type };
                    const reference_1000: boolean;
                    export { reference_1000 as reference };
                    const many_1000: boolean;
                    export { many_1000 as many };
                    const inverse_1000: boolean;
                    export { inverse_1000 as inverse };
                }
                export { Name_26 as Name };
            }
            export { fields_381 as fields };
        }
        namespace IfcPresentationStyleAssignment {
            const domain_382: string;
            export { domain_382 as domain };
            const superclasses_382: any[];
            export { superclasses_382 as superclasses };
            export namespace fields_382 {
                namespace Styles {
                    const type_1001: string;
                    export { type_1001 as type };
                    const reference_1001: boolean;
                    export { reference_1001 as reference };
                    const many_1001: boolean;
                    export { many_1001 as many };
                    const inverse_1001: boolean;
                    export { inverse_1001 as inverse };
                }
            }
            export { fields_382 as fields };
        }
        namespace IfcProcedure {
            const domain_383: string;
            export { domain_383 as domain };
            const superclasses_383: string[];
            export { superclasses_383 as superclasses };
            export namespace fields_383 {
                namespace ProcedureID {
                    const type_1002: string;
                    export { type_1002 as type };
                    const reference_1002: boolean;
                    export { reference_1002 as reference };
                    const many_1002: boolean;
                    export { many_1002 as many };
                    const inverse_1002: boolean;
                    export { inverse_1002 as inverse };
                }
                namespace ProcedureType {
                    const type_1003: string;
                    export { type_1003 as type };
                    const reference_1003: boolean;
                    export { reference_1003 as reference };
                    const many_1003: boolean;
                    export { many_1003 as many };
                    const inverse_1003: boolean;
                    export { inverse_1003 as inverse };
                }
                namespace UserDefinedProcedureType {
                    const type_1004: string;
                    export { type_1004 as type };
                    const reference_1004: boolean;
                    export { reference_1004 as reference };
                    const many_1004: boolean;
                    export { many_1004 as many };
                    const inverse_1004: boolean;
                    export { inverse_1004 as inverse };
                }
            }
            export { fields_383 as fields };
        }
        namespace IfcProcess {
            const domain_384: string;
            export { domain_384 as domain };
            const superclasses_384: string[];
            export { superclasses_384 as superclasses };
            export namespace fields_384 {
                namespace OperatesOn {
                    const type_1005: string;
                    export { type_1005 as type };
                    const reference_1005: boolean;
                    export { reference_1005 as reference };
                    const many_1005: boolean;
                    export { many_1005 as many };
                    const inverse_1005: boolean;
                    export { inverse_1005 as inverse };
                }
                namespace IsSuccessorFrom {
                    const type_1006: string;
                    export { type_1006 as type };
                    const reference_1006: boolean;
                    export { reference_1006 as reference };
                    const many_1006: boolean;
                    export { many_1006 as many };
                    const inverse_1006: boolean;
                    export { inverse_1006 as inverse };
                }
                namespace IsPredecessorTo {
                    const type_1007: string;
                    export { type_1007 as type };
                    const reference_1007: boolean;
                    export { reference_1007 as reference };
                    const many_1007: boolean;
                    export { many_1007 as many };
                    const inverse_1007: boolean;
                    export { inverse_1007 as inverse };
                }
            }
            export { fields_384 as fields };
        }
        namespace IfcProduct {
            const domain_385: string;
            export { domain_385 as domain };
            const superclasses_385: string[];
            export { superclasses_385 as superclasses };
            export namespace fields_385 {
                namespace ObjectPlacement {
                    const type_1008: string;
                    export { type_1008 as type };
                    const reference_1008: boolean;
                    export { reference_1008 as reference };
                    const many_1008: boolean;
                    export { many_1008 as many };
                    const inverse_1008: boolean;
                    export { inverse_1008 as inverse };
                }
                namespace Representation {
                    const type_1009: string;
                    export { type_1009 as type };
                    const reference_1009: boolean;
                    export { reference_1009 as reference };
                    const many_1009: boolean;
                    export { many_1009 as many };
                    const inverse_1009: boolean;
                    export { inverse_1009 as inverse };
                }
                namespace ReferencedBy {
                    const type_1010: string;
                    export { type_1010 as type };
                    const reference_1010: boolean;
                    export { reference_1010 as reference };
                    const many_1010: boolean;
                    export { many_1010 as many };
                    const inverse_1010: boolean;
                    export { inverse_1010 as inverse };
                }
                namespace geometry {
                    const type_1011: string;
                    export { type_1011 as type };
                    const reference_1011: boolean;
                    export { reference_1011 as reference };
                    const many_1011: boolean;
                    export { many_1011 as many };
                    const inverse_1011: boolean;
                    export { inverse_1011 as inverse };
                }
            }
            export { fields_385 as fields };
        }
        namespace IfcProductDefinitionShape {
            const domain_386: string;
            export { domain_386 as domain };
            const superclasses_386: string[];
            export { superclasses_386 as superclasses };
            export namespace fields_386 {
                namespace ShapeOfProduct {
                    const type_1012: string;
                    export { type_1012 as type };
                    const reference_1012: boolean;
                    export { reference_1012 as reference };
                    const many_1012: boolean;
                    export { many_1012 as many };
                    const inverse_1012: boolean;
                    export { inverse_1012 as inverse };
                }
                namespace HasShapeAspects {
                    const type_1013: string;
                    export { type_1013 as type };
                    const reference_1013: boolean;
                    export { reference_1013 as reference };
                    const many_1013: boolean;
                    export { many_1013 as many };
                    const inverse_1013: boolean;
                    export { inverse_1013 as inverse };
                }
            }
            export { fields_386 as fields };
        }
        namespace IfcProductRepresentation {
            const domain_387: string;
            export { domain_387 as domain };
            const superclasses_387: any[];
            export { superclasses_387 as superclasses };
            export namespace fields_387 {
                export namespace Name_27 {
                    const type_1014: string;
                    export { type_1014 as type };
                    const reference_1014: boolean;
                    export { reference_1014 as reference };
                    const many_1014: boolean;
                    export { many_1014 as many };
                    const inverse_1014: boolean;
                    export { inverse_1014 as inverse };
                }
                export { Name_27 as Name };
                export namespace Description_16 {
                    const type_1015: string;
                    export { type_1015 as type };
                    const reference_1015: boolean;
                    export { reference_1015 as reference };
                    const many_1015: boolean;
                    export { many_1015 as many };
                    const inverse_1015: boolean;
                    export { inverse_1015 as inverse };
                }
                export { Description_16 as Description };
                export namespace Representations {
                    const type_1016: string;
                    export { type_1016 as type };
                    const reference_1016: boolean;
                    export { reference_1016 as reference };
                    const many_1016: boolean;
                    export { many_1016 as many };
                    const inverse_1016: boolean;
                    export { inverse_1016 as inverse };
                }
            }
            export { fields_387 as fields };
        }
        namespace IfcProductsOfCombustionProperties {
            const domain_388: string;
            export { domain_388 as domain };
            const superclasses_388: string[];
            export { superclasses_388 as superclasses };
            export namespace fields_388 {
                namespace SpecificHeatCapacity {
                    const type_1017: string;
                    export { type_1017 as type };
                    const reference_1017: boolean;
                    export { reference_1017 as reference };
                    const many_1017: boolean;
                    export { many_1017 as many };
                    const inverse_1017: boolean;
                    export { inverse_1017 as inverse };
                }
                namespace SpecificHeatCapacityAsString {
                    const type_1018: string;
                    export { type_1018 as type };
                    const reference_1018: boolean;
                    export { reference_1018 as reference };
                    const many_1018: boolean;
                    export { many_1018 as many };
                    const inverse_1018: boolean;
                    export { inverse_1018 as inverse };
                }
                namespace N20Content {
                    const type_1019: string;
                    export { type_1019 as type };
                    const reference_1019: boolean;
                    export { reference_1019 as reference };
                    const many_1019: boolean;
                    export { many_1019 as many };
                    const inverse_1019: boolean;
                    export { inverse_1019 as inverse };
                }
                namespace N20ContentAsString {
                    const type_1020: string;
                    export { type_1020 as type };
                    const reference_1020: boolean;
                    export { reference_1020 as reference };
                    const many_1020: boolean;
                    export { many_1020 as many };
                    const inverse_1020: boolean;
                    export { inverse_1020 as inverse };
                }
                namespace COContent {
                    const type_1021: string;
                    export { type_1021 as type };
                    const reference_1021: boolean;
                    export { reference_1021 as reference };
                    const many_1021: boolean;
                    export { many_1021 as many };
                    const inverse_1021: boolean;
                    export { inverse_1021 as inverse };
                }
                namespace COContentAsString {
                    const type_1022: string;
                    export { type_1022 as type };
                    const reference_1022: boolean;
                    export { reference_1022 as reference };
                    const many_1022: boolean;
                    export { many_1022 as many };
                    const inverse_1022: boolean;
                    export { inverse_1022 as inverse };
                }
                namespace CO2Content {
                    const type_1023: string;
                    export { type_1023 as type };
                    const reference_1023: boolean;
                    export { reference_1023 as reference };
                    const many_1023: boolean;
                    export { many_1023 as many };
                    const inverse_1023: boolean;
                    export { inverse_1023 as inverse };
                }
                namespace CO2ContentAsString {
                    const type_1024: string;
                    export { type_1024 as type };
                    const reference_1024: boolean;
                    export { reference_1024 as reference };
                    const many_1024: boolean;
                    export { many_1024 as many };
                    const inverse_1024: boolean;
                    export { inverse_1024 as inverse };
                }
            }
            export { fields_388 as fields };
        }
        namespace IfcProfileDef {
            const domain_389: string;
            export { domain_389 as domain };
            const superclasses_389: any[];
            export { superclasses_389 as superclasses };
            export namespace fields_389 {
                namespace ProfileType {
                    const type_1025: string;
                    export { type_1025 as type };
                    const reference_1025: boolean;
                    export { reference_1025 as reference };
                    const many_1025: boolean;
                    export { many_1025 as many };
                    const inverse_1025: boolean;
                    export { inverse_1025 as inverse };
                }
                namespace ProfileName {
                    const type_1026: string;
                    export { type_1026 as type };
                    const reference_1026: boolean;
                    export { reference_1026 as reference };
                    const many_1026: boolean;
                    export { many_1026 as many };
                    const inverse_1026: boolean;
                    export { inverse_1026 as inverse };
                }
            }
            export { fields_389 as fields };
        }
        namespace IfcProfileProperties {
            const domain_390: string;
            export { domain_390 as domain };
            const superclasses_390: any[];
            export { superclasses_390 as superclasses };
            export namespace fields_390 {
                export namespace ProfileName_1 {
                    const type_1027: string;
                    export { type_1027 as type };
                    const reference_1027: boolean;
                    export { reference_1027 as reference };
                    const many_1027: boolean;
                    export { many_1027 as many };
                    const inverse_1027: boolean;
                    export { inverse_1027 as inverse };
                }
                export { ProfileName_1 as ProfileName };
                export namespace ProfileDefinition {
                    const type_1028: string;
                    export { type_1028 as type };
                    const reference_1028: boolean;
                    export { reference_1028 as reference };
                    const many_1028: boolean;
                    export { many_1028 as many };
                    const inverse_1028: boolean;
                    export { inverse_1028 as inverse };
                }
            }
            export { fields_390 as fields };
        }
        namespace IfcProject {
            const domain_391: string;
            export { domain_391 as domain };
            const superclasses_391: string[];
            export { superclasses_391 as superclasses };
            export namespace fields_391 {
                namespace LongName {
                    const type_1029: string;
                    export { type_1029 as type };
                    const reference_1029: boolean;
                    export { reference_1029 as reference };
                    const many_1029: boolean;
                    export { many_1029 as many };
                    const inverse_1029: boolean;
                    export { inverse_1029 as inverse };
                }
                namespace Phase {
                    const type_1030: string;
                    export { type_1030 as type };
                    const reference_1030: boolean;
                    export { reference_1030 as reference };
                    const many_1030: boolean;
                    export { many_1030 as many };
                    const inverse_1030: boolean;
                    export { inverse_1030 as inverse };
                }
                namespace RepresentationContexts {
                    const type_1031: string;
                    export { type_1031 as type };
                    const reference_1031: boolean;
                    export { reference_1031 as reference };
                    const many_1031: boolean;
                    export { many_1031 as many };
                    const inverse_1031: boolean;
                    export { inverse_1031 as inverse };
                }
                namespace UnitsInContext {
                    const type_1032: string;
                    export { type_1032 as type };
                    const reference_1032: boolean;
                    export { reference_1032 as reference };
                    const many_1032: boolean;
                    export { many_1032 as many };
                    const inverse_1032: boolean;
                    export { inverse_1032 as inverse };
                }
            }
            export { fields_391 as fields };
        }
        namespace IfcProjectOrder {
            const domain_392: string;
            export { domain_392 as domain };
            const superclasses_392: string[];
            export { superclasses_392 as superclasses };
            export namespace fields_392 {
                export namespace ID_1 {
                    const type_1033: string;
                    export { type_1033 as type };
                    const reference_1033: boolean;
                    export { reference_1033 as reference };
                    const many_1033: boolean;
                    export { many_1033 as many };
                    const inverse_1033: boolean;
                    export { inverse_1033 as inverse };
                }
                export { ID_1 as ID };
                export namespace PredefinedType_57 {
                    const type_1034: string;
                    export { type_1034 as type };
                    const reference_1034: boolean;
                    export { reference_1034 as reference };
                    const many_1034: boolean;
                    export { many_1034 as many };
                    const inverse_1034: boolean;
                    export { inverse_1034 as inverse };
                }
                export { PredefinedType_57 as PredefinedType };
                export namespace Status_2 {
                    const type_1035: string;
                    export { type_1035 as type };
                    const reference_1035: boolean;
                    export { reference_1035 as reference };
                    const many_1035: boolean;
                    export { many_1035 as many };
                    const inverse_1035: boolean;
                    export { inverse_1035 as inverse };
                }
                export { Status_2 as Status };
            }
            export { fields_392 as fields };
        }
        namespace IfcProjectOrderRecord {
            const domain_393: string;
            export { domain_393 as domain };
            const superclasses_393: string[];
            export { superclasses_393 as superclasses };
            export namespace fields_393 {
                export namespace Records {
                    const type_1036: string;
                    export { type_1036 as type };
                    const reference_1036: boolean;
                    export { reference_1036 as reference };
                    const many_1036: boolean;
                    export { many_1036 as many };
                    const inverse_1036: boolean;
                    export { inverse_1036 as inverse };
                }
                export namespace PredefinedType_58 {
                    const type_1037: string;
                    export { type_1037 as type };
                    const reference_1037: boolean;
                    export { reference_1037 as reference };
                    const many_1037: boolean;
                    export { many_1037 as many };
                    const inverse_1037: boolean;
                    export { inverse_1037 as inverse };
                }
                export { PredefinedType_58 as PredefinedType };
            }
            export { fields_393 as fields };
        }
        namespace IfcProjectionCurve {
            const domain_394: string;
            export { domain_394 as domain };
            const superclasses_394: string[];
            export { superclasses_394 as superclasses };
            const fields_394: {};
            export { fields_394 as fields };
        }
        namespace IfcProjectionElement {
            const domain_395: string;
            export { domain_395 as domain };
            const superclasses_395: string[];
            export { superclasses_395 as superclasses };
            const fields_395: {};
            export { fields_395 as fields };
        }
        namespace IfcProperty {
            const domain_396: string;
            export { domain_396 as domain };
            const superclasses_396: any[];
            export { superclasses_396 as superclasses };
            export namespace fields_396 {
                export namespace Name_28 {
                    const type_1038: string;
                    export { type_1038 as type };
                    const reference_1038: boolean;
                    export { reference_1038 as reference };
                    const many_1038: boolean;
                    export { many_1038 as many };
                    const inverse_1038: boolean;
                    export { inverse_1038 as inverse };
                }
                export { Name_28 as Name };
                export namespace Description_17 {
                    const type_1039: string;
                    export { type_1039 as type };
                    const reference_1039: boolean;
                    export { reference_1039 as reference };
                    const many_1039: boolean;
                    export { many_1039 as many };
                    const inverse_1039: boolean;
                    export { inverse_1039 as inverse };
                }
                export { Description_17 as Description };
                export namespace PropertyForDependance {
                    const type_1040: string;
                    export { type_1040 as type };
                    const reference_1040: boolean;
                    export { reference_1040 as reference };
                    const many_1040: boolean;
                    export { many_1040 as many };
                    const inverse_1040: boolean;
                    export { inverse_1040 as inverse };
                }
                export namespace PropertyDependsOn {
                    const type_1041: string;
                    export { type_1041 as type };
                    const reference_1041: boolean;
                    export { reference_1041 as reference };
                    const many_1041: boolean;
                    export { many_1041 as many };
                    const inverse_1041: boolean;
                    export { inverse_1041 as inverse };
                }
                export namespace PartOfComplex_1 {
                    const type_1042: string;
                    export { type_1042 as type };
                    const reference_1042: boolean;
                    export { reference_1042 as reference };
                    const many_1042: boolean;
                    export { many_1042 as many };
                    const inverse_1042: boolean;
                    export { inverse_1042 as inverse };
                }
                export { PartOfComplex_1 as PartOfComplex };
            }
            export { fields_396 as fields };
        }
        namespace IfcPropertyBoundedValue {
            const domain_397: string;
            export { domain_397 as domain };
            const superclasses_397: string[];
            export { superclasses_397 as superclasses };
            export namespace fields_397 {
                export namespace UpperBoundValue {
                    const type_1043: string;
                    export { type_1043 as type };
                    const reference_1043: boolean;
                    export { reference_1043 as reference };
                    const many_1043: boolean;
                    export { many_1043 as many };
                    const inverse_1043: boolean;
                    export { inverse_1043 as inverse };
                }
                export namespace LowerBoundValue {
                    const type_1044: string;
                    export { type_1044 as type };
                    const reference_1044: boolean;
                    export { reference_1044 as reference };
                    const many_1044: boolean;
                    export { many_1044 as many };
                    const inverse_1044: boolean;
                    export { inverse_1044 as inverse };
                }
                export namespace Unit_2 {
                    const type_1045: string;
                    export { type_1045 as type };
                    const reference_1045: boolean;
                    export { reference_1045 as reference };
                    const many_1045: boolean;
                    export { many_1045 as many };
                    const inverse_1045: boolean;
                    export { inverse_1045 as inverse };
                }
                export { Unit_2 as Unit };
            }
            export { fields_397 as fields };
        }
        namespace IfcPropertyConstraintRelationship {
            const domain_398: string;
            export { domain_398 as domain };
            const superclasses_398: any[];
            export { superclasses_398 as superclasses };
            export namespace fields_398 {
                export namespace RelatingConstraint_2 {
                    const type_1046: string;
                    export { type_1046 as type };
                    const reference_1046: boolean;
                    export { reference_1046 as reference };
                    const many_1046: boolean;
                    export { many_1046 as many };
                    const inverse_1046: boolean;
                    export { inverse_1046 as inverse };
                }
                export { RelatingConstraint_2 as RelatingConstraint };
                export namespace RelatedProperties {
                    const type_1047: string;
                    export { type_1047 as type };
                    const reference_1047: boolean;
                    export { reference_1047 as reference };
                    const many_1047: boolean;
                    export { many_1047 as many };
                    const inverse_1047: boolean;
                    export { inverse_1047 as inverse };
                }
                export namespace Name_29 {
                    const type_1048: string;
                    export { type_1048 as type };
                    const reference_1048: boolean;
                    export { reference_1048 as reference };
                    const many_1048: boolean;
                    export { many_1048 as many };
                    const inverse_1048: boolean;
                    export { inverse_1048 as inverse };
                }
                export { Name_29 as Name };
                export namespace Description_18 {
                    const type_1049: string;
                    export { type_1049 as type };
                    const reference_1049: boolean;
                    export { reference_1049 as reference };
                    const many_1049: boolean;
                    export { many_1049 as many };
                    const inverse_1049: boolean;
                    export { inverse_1049 as inverse };
                }
                export { Description_18 as Description };
            }
            export { fields_398 as fields };
        }
        namespace IfcPropertyDefinition {
            const domain_399: string;
            export { domain_399 as domain };
            const superclasses_399: string[];
            export { superclasses_399 as superclasses };
            export namespace fields_399 {
                export namespace HasAssociations_1 {
                    const type_1050: string;
                    export { type_1050 as type };
                    const reference_1050: boolean;
                    export { reference_1050 as reference };
                    const many_1050: boolean;
                    export { many_1050 as many };
                    const inverse_1050: boolean;
                    export { inverse_1050 as inverse };
                }
                export { HasAssociations_1 as HasAssociations };
            }
            export { fields_399 as fields };
        }
        namespace IfcPropertyDependencyRelationship {
            const domain_400: string;
            export { domain_400 as domain };
            const superclasses_400: any[];
            export { superclasses_400 as superclasses };
            export namespace fields_400 {
                export namespace DependingProperty {
                    const type_1051: string;
                    export { type_1051 as type };
                    const reference_1051: boolean;
                    export { reference_1051 as reference };
                    const many_1051: boolean;
                    export { many_1051 as many };
                    const inverse_1051: boolean;
                    export { inverse_1051 as inverse };
                }
                export namespace DependantProperty {
                    const type_1052: string;
                    export { type_1052 as type };
                    const reference_1052: boolean;
                    export { reference_1052 as reference };
                    const many_1052: boolean;
                    export { many_1052 as many };
                    const inverse_1052: boolean;
                    export { inverse_1052 as inverse };
                }
                export namespace Name_30 {
                    const type_1053: string;
                    export { type_1053 as type };
                    const reference_1053: boolean;
                    export { reference_1053 as reference };
                    const many_1053: boolean;
                    export { many_1053 as many };
                    const inverse_1053: boolean;
                    export { inverse_1053 as inverse };
                }
                export { Name_30 as Name };
                export namespace Description_19 {
                    const type_1054: string;
                    export { type_1054 as type };
                    const reference_1054: boolean;
                    export { reference_1054 as reference };
                    const many_1054: boolean;
                    export { many_1054 as many };
                    const inverse_1054: boolean;
                    export { inverse_1054 as inverse };
                }
                export { Description_19 as Description };
                export namespace Expression {
                    const type_1055: string;
                    export { type_1055 as type };
                    const reference_1055: boolean;
                    export { reference_1055 as reference };
                    const many_1055: boolean;
                    export { many_1055 as many };
                    const inverse_1055: boolean;
                    export { inverse_1055 as inverse };
                }
            }
            export { fields_400 as fields };
        }
        namespace IfcPropertyEnumeratedValue {
            const domain_401: string;
            export { domain_401 as domain };
            const superclasses_401: string[];
            export { superclasses_401 as superclasses };
            export namespace fields_401 {
                namespace EnumerationValues {
                    const type_1056: string;
                    export { type_1056 as type };
                    const reference_1056: boolean;
                    export { reference_1056 as reference };
                    const many_1056: boolean;
                    export { many_1056 as many };
                    const inverse_1056: boolean;
                    export { inverse_1056 as inverse };
                }
                namespace EnumerationReference {
                    const type_1057: string;
                    export { type_1057 as type };
                    const reference_1057: boolean;
                    export { reference_1057 as reference };
                    const many_1057: boolean;
                    export { many_1057 as many };
                    const inverse_1057: boolean;
                    export { inverse_1057 as inverse };
                }
            }
            export { fields_401 as fields };
        }
        namespace IfcPropertyEnumeration {
            const domain_402: string;
            export { domain_402 as domain };
            const superclasses_402: any[];
            export { superclasses_402 as superclasses };
            export namespace fields_402 {
                export namespace Name_31 {
                    const type_1058: string;
                    export { type_1058 as type };
                    const reference_1058: boolean;
                    export { reference_1058 as reference };
                    const many_1058: boolean;
                    export { many_1058 as many };
                    const inverse_1058: boolean;
                    export { inverse_1058 as inverse };
                }
                export { Name_31 as Name };
                export namespace EnumerationValues_1 {
                    const type_1059: string;
                    export { type_1059 as type };
                    const reference_1059: boolean;
                    export { reference_1059 as reference };
                    const many_1059: boolean;
                    export { many_1059 as many };
                    const inverse_1059: boolean;
                    export { inverse_1059 as inverse };
                }
                export { EnumerationValues_1 as EnumerationValues };
                export namespace Unit_3 {
                    const type_1060: string;
                    export { type_1060 as type };
                    const reference_1060: boolean;
                    export { reference_1060 as reference };
                    const many_1060: boolean;
                    export { many_1060 as many };
                    const inverse_1060: boolean;
                    export { inverse_1060 as inverse };
                }
                export { Unit_3 as Unit };
            }
            export { fields_402 as fields };
        }
        namespace IfcPropertyListValue {
            const domain_403: string;
            export { domain_403 as domain };
            const superclasses_403: string[];
            export { superclasses_403 as superclasses };
            export namespace fields_403 {
                export namespace ListValues_1 {
                    const type_1061: string;
                    export { type_1061 as type };
                    const reference_1061: boolean;
                    export { reference_1061 as reference };
                    const many_1061: boolean;
                    export { many_1061 as many };
                    const inverse_1061: boolean;
                    export { inverse_1061 as inverse };
                }
                export { ListValues_1 as ListValues };
                export namespace Unit_4 {
                    const type_1062: string;
                    export { type_1062 as type };
                    const reference_1062: boolean;
                    export { reference_1062 as reference };
                    const many_1062: boolean;
                    export { many_1062 as many };
                    const inverse_1062: boolean;
                    export { inverse_1062 as inverse };
                }
                export { Unit_4 as Unit };
            }
            export { fields_403 as fields };
        }
        namespace IfcPropertyReferenceValue {
            const domain_404: string;
            export { domain_404 as domain };
            const superclasses_404: string[];
            export { superclasses_404 as superclasses };
            export namespace fields_404 {
                export namespace UsageName_1 {
                    const type_1063: string;
                    export { type_1063 as type };
                    const reference_1063: boolean;
                    export { reference_1063 as reference };
                    const many_1063: boolean;
                    export { many_1063 as many };
                    const inverse_1063: boolean;
                    export { inverse_1063 as inverse };
                }
                export { UsageName_1 as UsageName };
                export namespace PropertyReference {
                    const type_1064: string;
                    export { type_1064 as type };
                    const reference_1064: boolean;
                    export { reference_1064 as reference };
                    const many_1064: boolean;
                    export { many_1064 as many };
                    const inverse_1064: boolean;
                    export { inverse_1064 as inverse };
                }
            }
            export { fields_404 as fields };
        }
        namespace IfcPropertySet {
            const domain_405: string;
            export { domain_405 as domain };
            const superclasses_405: string[];
            export { superclasses_405 as superclasses };
            export namespace fields_405 {
                export namespace HasProperties_1 {
                    const type_1065: string;
                    export { type_1065 as type };
                    const reference_1065: boolean;
                    export { reference_1065 as reference };
                    const many_1065: boolean;
                    export { many_1065 as many };
                    const inverse_1065: boolean;
                    export { inverse_1065 as inverse };
                }
                export { HasProperties_1 as HasProperties };
            }
            export { fields_405 as fields };
        }
        namespace IfcPropertySetDefinition {
            const domain_406: string;
            export { domain_406 as domain };
            const superclasses_406: string[];
            export { superclasses_406 as superclasses };
            export namespace fields_406 {
                namespace PropertyDefinitionOf {
                    const type_1066: string;
                    export { type_1066 as type };
                    const reference_1066: boolean;
                    export { reference_1066 as reference };
                    const many_1066: boolean;
                    export { many_1066 as many };
                    const inverse_1066: boolean;
                    export { inverse_1066 as inverse };
                }
                namespace DefinesType {
                    const type_1067: string;
                    export { type_1067 as type };
                    const reference_1067: boolean;
                    export { reference_1067 as reference };
                    const many_1067: boolean;
                    export { many_1067 as many };
                    const inverse_1067: boolean;
                    export { inverse_1067 as inverse };
                }
            }
            export { fields_406 as fields };
        }
        namespace IfcPropertySingleValue {
            const domain_407: string;
            export { domain_407 as domain };
            const superclasses_407: string[];
            export { superclasses_407 as superclasses };
            export namespace fields_407 {
                export namespace NominalValue {
                    const type_1068: string;
                    export { type_1068 as type };
                    const reference_1068: boolean;
                    export { reference_1068 as reference };
                    const many_1068: boolean;
                    export { many_1068 as many };
                    const inverse_1068: boolean;
                    export { inverse_1068 as inverse };
                }
                export namespace Unit_5 {
                    const type_1069: string;
                    export { type_1069 as type };
                    const reference_1069: boolean;
                    export { reference_1069 as reference };
                    const many_1069: boolean;
                    export { many_1069 as many };
                    const inverse_1069: boolean;
                    export { inverse_1069 as inverse };
                }
                export { Unit_5 as Unit };
            }
            export { fields_407 as fields };
        }
        namespace IfcPropertyTableValue {
            const domain_408: string;
            export { domain_408 as domain };
            const superclasses_408: string[];
            export { superclasses_408 as superclasses };
            export namespace fields_408 {
                export namespace DefiningValues {
                    const type_1070: string;
                    export { type_1070 as type };
                    const reference_1070: boolean;
                    export { reference_1070 as reference };
                    const many_1070: boolean;
                    export { many_1070 as many };
                    const inverse_1070: boolean;
                    export { inverse_1070 as inverse };
                }
                export namespace DefinedValues {
                    const type_1071: string;
                    export { type_1071 as type };
                    const reference_1071: boolean;
                    export { reference_1071 as reference };
                    const many_1071: boolean;
                    export { many_1071 as many };
                    const inverse_1071: boolean;
                    export { inverse_1071 as inverse };
                }
                export namespace Expression_1 {
                    const type_1072: string;
                    export { type_1072 as type };
                    const reference_1072: boolean;
                    export { reference_1072 as reference };
                    const many_1072: boolean;
                    export { many_1072 as many };
                    const inverse_1072: boolean;
                    export { inverse_1072 as inverse };
                }
                export { Expression_1 as Expression };
                export namespace DefiningUnit {
                    const type_1073: string;
                    export { type_1073 as type };
                    const reference_1073: boolean;
                    export { reference_1073 as reference };
                    const many_1073: boolean;
                    export { many_1073 as many };
                    const inverse_1073: boolean;
                    export { inverse_1073 as inverse };
                }
                export namespace DefinedUnit {
                    const type_1074: string;
                    export { type_1074 as type };
                    const reference_1074: boolean;
                    export { reference_1074 as reference };
                    const many_1074: boolean;
                    export { many_1074 as many };
                    const inverse_1074: boolean;
                    export { inverse_1074 as inverse };
                }
            }
            export { fields_408 as fields };
        }
        namespace IfcProtectiveDeviceType {
            const domain_409: string;
            export { domain_409 as domain };
            const superclasses_409: string[];
            export { superclasses_409 as superclasses };
            export namespace fields_409 {
                export namespace PredefinedType_59 {
                    const type_1075: string;
                    export { type_1075 as type };
                    const reference_1075: boolean;
                    export { reference_1075 as reference };
                    const many_1075: boolean;
                    export { many_1075 as many };
                    const inverse_1075: boolean;
                    export { inverse_1075 as inverse };
                }
                export { PredefinedType_59 as PredefinedType };
            }
            export { fields_409 as fields };
        }
        namespace IfcProxy {
            const domain_410: string;
            export { domain_410 as domain };
            const superclasses_410: string[];
            export { superclasses_410 as superclasses };
            export namespace fields_410 {
                export namespace ProxyType {
                    const type_1076: string;
                    export { type_1076 as type };
                    const reference_1076: boolean;
                    export { reference_1076 as reference };
                    const many_1076: boolean;
                    export { many_1076 as many };
                    const inverse_1076: boolean;
                    export { inverse_1076 as inverse };
                }
                export namespace Tag_1 {
                    const type_1077: string;
                    export { type_1077 as type };
                    const reference_1077: boolean;
                    export { reference_1077 as reference };
                    const many_1077: boolean;
                    export { many_1077 as many };
                    const inverse_1077: boolean;
                    export { inverse_1077 as inverse };
                }
                export { Tag_1 as Tag };
            }
            export { fields_410 as fields };
        }
        namespace IfcPumpType {
            const domain_411: string;
            export { domain_411 as domain };
            const superclasses_411: string[];
            export { superclasses_411 as superclasses };
            export namespace fields_411 {
                export namespace PredefinedType_60 {
                    const type_1078: string;
                    export { type_1078 as type };
                    const reference_1078: boolean;
                    export { reference_1078 as reference };
                    const many_1078: boolean;
                    export { many_1078 as many };
                    const inverse_1078: boolean;
                    export { inverse_1078 as inverse };
                }
                export { PredefinedType_60 as PredefinedType };
            }
            export { fields_411 as fields };
        }
        namespace IfcQuantityArea {
            const domain_412: string;
            export { domain_412 as domain };
            const superclasses_412: string[];
            export { superclasses_412 as superclasses };
            export namespace fields_412 {
                namespace AreaValue {
                    const type_1079: string;
                    export { type_1079 as type };
                    const reference_1079: boolean;
                    export { reference_1079 as reference };
                    const many_1079: boolean;
                    export { many_1079 as many };
                    const inverse_1079: boolean;
                    export { inverse_1079 as inverse };
                }
                namespace AreaValueAsString {
                    const type_1080: string;
                    export { type_1080 as type };
                    const reference_1080: boolean;
                    export { reference_1080 as reference };
                    const many_1080: boolean;
                    export { many_1080 as many };
                    const inverse_1080: boolean;
                    export { inverse_1080 as inverse };
                }
            }
            export { fields_412 as fields };
        }
        namespace IfcQuantityCount {
            const domain_413: string;
            export { domain_413 as domain };
            const superclasses_413: string[];
            export { superclasses_413 as superclasses };
            export namespace fields_413 {
                namespace CountValue {
                    const type_1081: string;
                    export { type_1081 as type };
                    const reference_1081: boolean;
                    export { reference_1081 as reference };
                    const many_1081: boolean;
                    export { many_1081 as many };
                    const inverse_1081: boolean;
                    export { inverse_1081 as inverse };
                }
                namespace CountValueAsString {
                    const type_1082: string;
                    export { type_1082 as type };
                    const reference_1082: boolean;
                    export { reference_1082 as reference };
                    const many_1082: boolean;
                    export { many_1082 as many };
                    const inverse_1082: boolean;
                    export { inverse_1082 as inverse };
                }
            }
            export { fields_413 as fields };
        }
        namespace IfcQuantityLength {
            const domain_414: string;
            export { domain_414 as domain };
            const superclasses_414: string[];
            export { superclasses_414 as superclasses };
            export namespace fields_414 {
                namespace LengthValue {
                    const type_1083: string;
                    export { type_1083 as type };
                    const reference_1083: boolean;
                    export { reference_1083 as reference };
                    const many_1083: boolean;
                    export { many_1083 as many };
                    const inverse_1083: boolean;
                    export { inverse_1083 as inverse };
                }
                namespace LengthValueAsString {
                    const type_1084: string;
                    export { type_1084 as type };
                    const reference_1084: boolean;
                    export { reference_1084 as reference };
                    const many_1084: boolean;
                    export { many_1084 as many };
                    const inverse_1084: boolean;
                    export { inverse_1084 as inverse };
                }
            }
            export { fields_414 as fields };
        }
        namespace IfcQuantityTime {
            const domain_415: string;
            export { domain_415 as domain };
            const superclasses_415: string[];
            export { superclasses_415 as superclasses };
            export namespace fields_415 {
                namespace TimeValue {
                    const type_1085: string;
                    export { type_1085 as type };
                    const reference_1085: boolean;
                    export { reference_1085 as reference };
                    const many_1085: boolean;
                    export { many_1085 as many };
                    const inverse_1085: boolean;
                    export { inverse_1085 as inverse };
                }
                namespace TimeValueAsString {
                    const type_1086: string;
                    export { type_1086 as type };
                    const reference_1086: boolean;
                    export { reference_1086 as reference };
                    const many_1086: boolean;
                    export { many_1086 as many };
                    const inverse_1086: boolean;
                    export { inverse_1086 as inverse };
                }
            }
            export { fields_415 as fields };
        }
        namespace IfcQuantityVolume {
            const domain_416: string;
            export { domain_416 as domain };
            const superclasses_416: string[];
            export { superclasses_416 as superclasses };
            export namespace fields_416 {
                namespace VolumeValue {
                    const type_1087: string;
                    export { type_1087 as type };
                    const reference_1087: boolean;
                    export { reference_1087 as reference };
                    const many_1087: boolean;
                    export { many_1087 as many };
                    const inverse_1087: boolean;
                    export { inverse_1087 as inverse };
                }
                namespace VolumeValueAsString {
                    const type_1088: string;
                    export { type_1088 as type };
                    const reference_1088: boolean;
                    export { reference_1088 as reference };
                    const many_1088: boolean;
                    export { many_1088 as many };
                    const inverse_1088: boolean;
                    export { inverse_1088 as inverse };
                }
            }
            export { fields_416 as fields };
        }
        namespace IfcQuantityWeight {
            const domain_417: string;
            export { domain_417 as domain };
            const superclasses_417: string[];
            export { superclasses_417 as superclasses };
            export namespace fields_417 {
                namespace WeightValue {
                    const type_1089: string;
                    export { type_1089 as type };
                    const reference_1089: boolean;
                    export { reference_1089 as reference };
                    const many_1089: boolean;
                    export { many_1089 as many };
                    const inverse_1089: boolean;
                    export { inverse_1089 as inverse };
                }
                namespace WeightValueAsString {
                    const type_1090: string;
                    export { type_1090 as type };
                    const reference_1090: boolean;
                    export { reference_1090 as reference };
                    const many_1090: boolean;
                    export { many_1090 as many };
                    const inverse_1090: boolean;
                    export { inverse_1090 as inverse };
                }
            }
            export { fields_417 as fields };
        }
        namespace IfcRadiusDimension {
            const domain_418: string;
            export { domain_418 as domain };
            const superclasses_418: string[];
            export { superclasses_418 as superclasses };
            const fields_418: {};
            export { fields_418 as fields };
        }
        namespace IfcRailing {
            const domain_419: string;
            export { domain_419 as domain };
            const superclasses_419: string[];
            export { superclasses_419 as superclasses };
            export namespace fields_419 {
                export namespace PredefinedType_61 {
                    const type_1091: string;
                    export { type_1091 as type };
                    const reference_1091: boolean;
                    export { reference_1091 as reference };
                    const many_1091: boolean;
                    export { many_1091 as many };
                    const inverse_1091: boolean;
                    export { inverse_1091 as inverse };
                }
                export { PredefinedType_61 as PredefinedType };
            }
            export { fields_419 as fields };
        }
        namespace IfcRailingType {
            const domain_420: string;
            export { domain_420 as domain };
            const superclasses_420: string[];
            export { superclasses_420 as superclasses };
            export namespace fields_420 {
                export namespace PredefinedType_62 {
                    const type_1092: string;
                    export { type_1092 as type };
                    const reference_1092: boolean;
                    export { reference_1092 as reference };
                    const many_1092: boolean;
                    export { many_1092 as many };
                    const inverse_1092: boolean;
                    export { inverse_1092 as inverse };
                }
                export { PredefinedType_62 as PredefinedType };
            }
            export { fields_420 as fields };
        }
        namespace IfcRamp {
            const domain_421: string;
            export { domain_421 as domain };
            const superclasses_421: string[];
            export { superclasses_421 as superclasses };
            export namespace fields_421 {
                namespace ShapeType {
                    const type_1093: string;
                    export { type_1093 as type };
                    const reference_1093: boolean;
                    export { reference_1093 as reference };
                    const many_1093: boolean;
                    export { many_1093 as many };
                    const inverse_1093: boolean;
                    export { inverse_1093 as inverse };
                }
            }
            export { fields_421 as fields };
        }
        namespace IfcRampFlight {
            const domain_422: string;
            export { domain_422 as domain };
            const superclasses_422: string[];
            export { superclasses_422 as superclasses };
            const fields_422: {};
            export { fields_422 as fields };
        }
        namespace IfcRampFlightType {
            const domain_423: string;
            export { domain_423 as domain };
            const superclasses_423: string[];
            export { superclasses_423 as superclasses };
            export namespace fields_423 {
                export namespace PredefinedType_63 {
                    const type_1094: string;
                    export { type_1094 as type };
                    const reference_1094: boolean;
                    export { reference_1094 as reference };
                    const many_1094: boolean;
                    export { many_1094 as many };
                    const inverse_1094: boolean;
                    export { inverse_1094 as inverse };
                }
                export { PredefinedType_63 as PredefinedType };
            }
            export { fields_423 as fields };
        }
        namespace IfcRationalBezierCurve {
            const domain_424: string;
            export { domain_424 as domain };
            const superclasses_424: string[];
            export { superclasses_424 as superclasses };
            export namespace fields_424 {
                namespace WeightsData {
                    const type_1095: string;
                    export { type_1095 as type };
                    const reference_1095: boolean;
                    export { reference_1095 as reference };
                    const many_1095: boolean;
                    export { many_1095 as many };
                    const inverse_1095: boolean;
                    export { inverse_1095 as inverse };
                }
                namespace WeightsDataAsString {
                    const type_1096: string;
                    export { type_1096 as type };
                    const reference_1096: boolean;
                    export { reference_1096 as reference };
                    const many_1096: boolean;
                    export { many_1096 as many };
                    const inverse_1096: boolean;
                    export { inverse_1096 as inverse };
                }
            }
            export { fields_424 as fields };
        }
        namespace IfcRectangleHollowProfileDef {
            const domain_425: string;
            export { domain_425 as domain };
            const superclasses_425: string[];
            export { superclasses_425 as superclasses };
            export namespace fields_425 {
                export namespace WallThickness_2 {
                    const type_1097: string;
                    export { type_1097 as type };
                    const reference_1097: boolean;
                    export { reference_1097 as reference };
                    const many_1097: boolean;
                    export { many_1097 as many };
                    const inverse_1097: boolean;
                    export { inverse_1097 as inverse };
                }
                export { WallThickness_2 as WallThickness };
                export namespace WallThicknessAsString_2 {
                    const type_1098: string;
                    export { type_1098 as type };
                    const reference_1098: boolean;
                    export { reference_1098 as reference };
                    const many_1098: boolean;
                    export { many_1098 as many };
                    const inverse_1098: boolean;
                    export { inverse_1098 as inverse };
                }
                export { WallThicknessAsString_2 as WallThicknessAsString };
                export namespace InnerFilletRadius {
                    const type_1099: string;
                    export { type_1099 as type };
                    const reference_1099: boolean;
                    export { reference_1099 as reference };
                    const many_1099: boolean;
                    export { many_1099 as many };
                    const inverse_1099: boolean;
                    export { inverse_1099 as inverse };
                }
                export namespace InnerFilletRadiusAsString {
                    const type_1100: string;
                    export { type_1100 as type };
                    const reference_1100: boolean;
                    export { reference_1100 as reference };
                    const many_1100: boolean;
                    export { many_1100 as many };
                    const inverse_1100: boolean;
                    export { inverse_1100 as inverse };
                }
                export namespace OuterFilletRadius {
                    const type_1101: string;
                    export { type_1101 as type };
                    const reference_1101: boolean;
                    export { reference_1101 as reference };
                    const many_1101: boolean;
                    export { many_1101 as many };
                    const inverse_1101: boolean;
                    export { inverse_1101 as inverse };
                }
                export namespace OuterFilletRadiusAsString {
                    const type_1102: string;
                    export { type_1102 as type };
                    const reference_1102: boolean;
                    export { reference_1102 as reference };
                    const many_1102: boolean;
                    export { many_1102 as many };
                    const inverse_1102: boolean;
                    export { inverse_1102 as inverse };
                }
            }
            export { fields_425 as fields };
        }
        namespace IfcRectangleProfileDef {
            const domain_426: string;
            export { domain_426 as domain };
            const superclasses_426: string[];
            export { superclasses_426 as superclasses };
            export namespace fields_426 {
                export namespace XDim_1 {
                    const type_1103: string;
                    export { type_1103 as type };
                    const reference_1103: boolean;
                    export { reference_1103 as reference };
                    const many_1103: boolean;
                    export { many_1103 as many };
                    const inverse_1103: boolean;
                    export { inverse_1103 as inverse };
                }
                export { XDim_1 as XDim };
                export namespace XDimAsString_1 {
                    const type_1104: string;
                    export { type_1104 as type };
                    const reference_1104: boolean;
                    export { reference_1104 as reference };
                    const many_1104: boolean;
                    export { many_1104 as many };
                    const inverse_1104: boolean;
                    export { inverse_1104 as inverse };
                }
                export { XDimAsString_1 as XDimAsString };
                export namespace YDim_1 {
                    const type_1105: string;
                    export { type_1105 as type };
                    const reference_1105: boolean;
                    export { reference_1105 as reference };
                    const many_1105: boolean;
                    export { many_1105 as many };
                    const inverse_1105: boolean;
                    export { inverse_1105 as inverse };
                }
                export { YDim_1 as YDim };
                export namespace YDimAsString_1 {
                    const type_1106: string;
                    export { type_1106 as type };
                    const reference_1106: boolean;
                    export { reference_1106 as reference };
                    const many_1106: boolean;
                    export { many_1106 as many };
                    const inverse_1106: boolean;
                    export { inverse_1106 as inverse };
                }
                export { YDimAsString_1 as YDimAsString };
            }
            export { fields_426 as fields };
        }
        namespace IfcRectangularPyramid {
            const domain_427: string;
            export { domain_427 as domain };
            const superclasses_427: string[];
            export { superclasses_427 as superclasses };
            export namespace fields_427 {
                export namespace XLength_1 {
                    const type_1107: string;
                    export { type_1107 as type };
                    const reference_1107: boolean;
                    export { reference_1107 as reference };
                    const many_1107: boolean;
                    export { many_1107 as many };
                    const inverse_1107: boolean;
                    export { inverse_1107 as inverse };
                }
                export { XLength_1 as XLength };
                export namespace XLengthAsString_1 {
                    const type_1108: string;
                    export { type_1108 as type };
                    const reference_1108: boolean;
                    export { reference_1108 as reference };
                    const many_1108: boolean;
                    export { many_1108 as many };
                    const inverse_1108: boolean;
                    export { inverse_1108 as inverse };
                }
                export { XLengthAsString_1 as XLengthAsString };
                export namespace YLength_1 {
                    const type_1109: string;
                    export { type_1109 as type };
                    const reference_1109: boolean;
                    export { reference_1109 as reference };
                    const many_1109: boolean;
                    export { many_1109 as many };
                    const inverse_1109: boolean;
                    export { inverse_1109 as inverse };
                }
                export { YLength_1 as YLength };
                export namespace YLengthAsString_1 {
                    const type_1110: string;
                    export { type_1110 as type };
                    const reference_1110: boolean;
                    export { reference_1110 as reference };
                    const many_1110: boolean;
                    export { many_1110 as many };
                    const inverse_1110: boolean;
                    export { inverse_1110 as inverse };
                }
                export { YLengthAsString_1 as YLengthAsString };
                export namespace Height_2 {
                    const type_1111: string;
                    export { type_1111 as type };
                    const reference_1111: boolean;
                    export { reference_1111 as reference };
                    const many_1111: boolean;
                    export { many_1111 as many };
                    const inverse_1111: boolean;
                    export { inverse_1111 as inverse };
                }
                export { Height_2 as Height };
                export namespace HeightAsString_1 {
                    const type_1112: string;
                    export { type_1112 as type };
                    const reference_1112: boolean;
                    export { reference_1112 as reference };
                    const many_1112: boolean;
                    export { many_1112 as many };
                    const inverse_1112: boolean;
                    export { inverse_1112 as inverse };
                }
                export { HeightAsString_1 as HeightAsString };
            }
            export { fields_427 as fields };
        }
        namespace IfcRectangularTrimmedSurface {
            const domain_428: string;
            export { domain_428 as domain };
            const superclasses_428: string[];
            export { superclasses_428 as superclasses };
            export namespace fields_428 {
                export namespace BasisSurface_2 {
                    const type_1113: string;
                    export { type_1113 as type };
                    const reference_1113: boolean;
                    export { reference_1113 as reference };
                    const many_1113: boolean;
                    export { many_1113 as many };
                    const inverse_1113: boolean;
                    export { inverse_1113 as inverse };
                }
                export { BasisSurface_2 as BasisSurface };
                export namespace U1 {
                    const type_1114: string;
                    export { type_1114 as type };
                    const reference_1114: boolean;
                    export { reference_1114 as reference };
                    const many_1114: boolean;
                    export { many_1114 as many };
                    const inverse_1114: boolean;
                    export { inverse_1114 as inverse };
                }
                export namespace U1AsString {
                    const type_1115: string;
                    export { type_1115 as type };
                    const reference_1115: boolean;
                    export { reference_1115 as reference };
                    const many_1115: boolean;
                    export { many_1115 as many };
                    const inverse_1115: boolean;
                    export { inverse_1115 as inverse };
                }
                export namespace V1 {
                    const type_1116: string;
                    export { type_1116 as type };
                    const reference_1116: boolean;
                    export { reference_1116 as reference };
                    const many_1116: boolean;
                    export { many_1116 as many };
                    const inverse_1116: boolean;
                    export { inverse_1116 as inverse };
                }
                export namespace V1AsString {
                    const type_1117: string;
                    export { type_1117 as type };
                    const reference_1117: boolean;
                    export { reference_1117 as reference };
                    const many_1117: boolean;
                    export { many_1117 as many };
                    const inverse_1117: boolean;
                    export { inverse_1117 as inverse };
                }
                export namespace U2 {
                    const type_1118: string;
                    export { type_1118 as type };
                    const reference_1118: boolean;
                    export { reference_1118 as reference };
                    const many_1118: boolean;
                    export { many_1118 as many };
                    const inverse_1118: boolean;
                    export { inverse_1118 as inverse };
                }
                export namespace U2AsString {
                    const type_1119: string;
                    export { type_1119 as type };
                    const reference_1119: boolean;
                    export { reference_1119 as reference };
                    const many_1119: boolean;
                    export { many_1119 as many };
                    const inverse_1119: boolean;
                    export { inverse_1119 as inverse };
                }
                export namespace V2 {
                    const type_1120: string;
                    export { type_1120 as type };
                    const reference_1120: boolean;
                    export { reference_1120 as reference };
                    const many_1120: boolean;
                    export { many_1120 as many };
                    const inverse_1120: boolean;
                    export { inverse_1120 as inverse };
                }
                export namespace V2AsString {
                    const type_1121: string;
                    export { type_1121 as type };
                    const reference_1121: boolean;
                    export { reference_1121 as reference };
                    const many_1121: boolean;
                    export { many_1121 as many };
                    const inverse_1121: boolean;
                    export { inverse_1121 as inverse };
                }
                export namespace Usense {
                    const type_1122: string;
                    export { type_1122 as type };
                    const reference_1122: boolean;
                    export { reference_1122 as reference };
                    const many_1122: boolean;
                    export { many_1122 as many };
                    const inverse_1122: boolean;
                    export { inverse_1122 as inverse };
                }
                export namespace Vsense {
                    const type_1123: string;
                    export { type_1123 as type };
                    const reference_1123: boolean;
                    export { reference_1123 as reference };
                    const many_1123: boolean;
                    export { many_1123 as many };
                    const inverse_1123: boolean;
                    export { inverse_1123 as inverse };
                }
                export namespace Dim_16 {
                    const type_1124: string;
                    export { type_1124 as type };
                    const reference_1124: boolean;
                    export { reference_1124 as reference };
                    const many_1124: boolean;
                    export { many_1124 as many };
                    const inverse_1124: boolean;
                    export { inverse_1124 as inverse };
                }
                export { Dim_16 as Dim };
            }
            export { fields_428 as fields };
        }
        namespace IfcReferencesValueDocument {
            const domain_429: string;
            export { domain_429 as domain };
            const superclasses_429: any[];
            export { superclasses_429 as superclasses };
            export namespace fields_429 {
                export namespace ReferencedDocument {
                    const type_1125: string;
                    export { type_1125 as type };
                    const reference_1125: boolean;
                    export { reference_1125 as reference };
                    const many_1125: boolean;
                    export { many_1125 as many };
                    const inverse_1125: boolean;
                    export { inverse_1125 as inverse };
                }
                export namespace ReferencingValues {
                    const type_1126: string;
                    export { type_1126 as type };
                    const reference_1126: boolean;
                    export { reference_1126 as reference };
                    const many_1126: boolean;
                    export { many_1126 as many };
                    const inverse_1126: boolean;
                    export { inverse_1126 as inverse };
                }
                export namespace Name_32 {
                    const type_1127: string;
                    export { type_1127 as type };
                    const reference_1127: boolean;
                    export { reference_1127 as reference };
                    const many_1127: boolean;
                    export { many_1127 as many };
                    const inverse_1127: boolean;
                    export { inverse_1127 as inverse };
                }
                export { Name_32 as Name };
                export namespace Description_20 {
                    const type_1128: string;
                    export { type_1128 as type };
                    const reference_1128: boolean;
                    export { reference_1128 as reference };
                    const many_1128: boolean;
                    export { many_1128 as many };
                    const inverse_1128: boolean;
                    export { inverse_1128 as inverse };
                }
                export { Description_20 as Description };
            }
            export { fields_429 as fields };
        }
        namespace IfcRegularTimeSeries {
            const domain_430: string;
            export { domain_430 as domain };
            const superclasses_430: string[];
            export { superclasses_430 as superclasses };
            export namespace fields_430 {
                export namespace TimeStep {
                    const type_1129: string;
                    export { type_1129 as type };
                    const reference_1129: boolean;
                    export { reference_1129 as reference };
                    const many_1129: boolean;
                    export { many_1129 as many };
                    const inverse_1129: boolean;
                    export { inverse_1129 as inverse };
                }
                export namespace TimeStepAsString {
                    const type_1130: string;
                    export { type_1130 as type };
                    const reference_1130: boolean;
                    export { reference_1130 as reference };
                    const many_1130: boolean;
                    export { many_1130 as many };
                    const inverse_1130: boolean;
                    export { inverse_1130 as inverse };
                }
                export namespace Values_1 {
                    const type_1131: string;
                    export { type_1131 as type };
                    const reference_1131: boolean;
                    export { reference_1131 as reference };
                    const many_1131: boolean;
                    export { many_1131 as many };
                    const inverse_1131: boolean;
                    export { inverse_1131 as inverse };
                }
                export { Values_1 as Values };
            }
            export { fields_430 as fields };
        }
        namespace IfcReinforcementBarProperties {
            const domain_431: string;
            export { domain_431 as domain };
            const superclasses_431: any[];
            export { superclasses_431 as superclasses };
            export namespace fields_431 {
                namespace TotalCrossSectionArea {
                    const type_1132: string;
                    export { type_1132 as type };
                    const reference_1132: boolean;
                    export { reference_1132 as reference };
                    const many_1132: boolean;
                    export { many_1132 as many };
                    const inverse_1132: boolean;
                    export { inverse_1132 as inverse };
                }
                namespace TotalCrossSectionAreaAsString {
                    const type_1133: string;
                    export { type_1133 as type };
                    const reference_1133: boolean;
                    export { reference_1133 as reference };
                    const many_1133: boolean;
                    export { many_1133 as many };
                    const inverse_1133: boolean;
                    export { inverse_1133 as inverse };
                }
                namespace SteelGrade {
                    const type_1134: string;
                    export { type_1134 as type };
                    const reference_1134: boolean;
                    export { reference_1134 as reference };
                    const many_1134: boolean;
                    export { many_1134 as many };
                    const inverse_1134: boolean;
                    export { inverse_1134 as inverse };
                }
                namespace BarSurface {
                    const type_1135: string;
                    export { type_1135 as type };
                    const reference_1135: boolean;
                    export { reference_1135 as reference };
                    const many_1135: boolean;
                    export { many_1135 as many };
                    const inverse_1135: boolean;
                    export { inverse_1135 as inverse };
                }
                namespace EffectiveDepth {
                    const type_1136: string;
                    export { type_1136 as type };
                    const reference_1136: boolean;
                    export { reference_1136 as reference };
                    const many_1136: boolean;
                    export { many_1136 as many };
                    const inverse_1136: boolean;
                    export { inverse_1136 as inverse };
                }
                namespace EffectiveDepthAsString {
                    const type_1137: string;
                    export { type_1137 as type };
                    const reference_1137: boolean;
                    export { reference_1137 as reference };
                    const many_1137: boolean;
                    export { many_1137 as many };
                    const inverse_1137: boolean;
                    export { inverse_1137 as inverse };
                }
                namespace NominalBarDiameter {
                    const type_1138: string;
                    export { type_1138 as type };
                    const reference_1138: boolean;
                    export { reference_1138 as reference };
                    const many_1138: boolean;
                    export { many_1138 as many };
                    const inverse_1138: boolean;
                    export { inverse_1138 as inverse };
                }
                namespace NominalBarDiameterAsString {
                    const type_1139: string;
                    export { type_1139 as type };
                    const reference_1139: boolean;
                    export { reference_1139 as reference };
                    const many_1139: boolean;
                    export { many_1139 as many };
                    const inverse_1139: boolean;
                    export { inverse_1139 as inverse };
                }
                namespace BarCount {
                    const type_1140: string;
                    export { type_1140 as type };
                    const reference_1140: boolean;
                    export { reference_1140 as reference };
                    const many_1140: boolean;
                    export { many_1140 as many };
                    const inverse_1140: boolean;
                    export { inverse_1140 as inverse };
                }
                namespace BarCountAsString {
                    const type_1141: string;
                    export { type_1141 as type };
                    const reference_1141: boolean;
                    export { reference_1141 as reference };
                    const many_1141: boolean;
                    export { many_1141 as many };
                    const inverse_1141: boolean;
                    export { inverse_1141 as inverse };
                }
            }
            export { fields_431 as fields };
        }
        namespace IfcReinforcementDefinitionProperties {
            const domain_432: string;
            export { domain_432 as domain };
            const superclasses_432: string[];
            export { superclasses_432 as superclasses };
            export namespace fields_432 {
                namespace DefinitionType {
                    const type_1142: string;
                    export { type_1142 as type };
                    const reference_1142: boolean;
                    export { reference_1142 as reference };
                    const many_1142: boolean;
                    export { many_1142 as many };
                    const inverse_1142: boolean;
                    export { inverse_1142 as inverse };
                }
                namespace ReinforcementSectionDefinitions {
                    const type_1143: string;
                    export { type_1143 as type };
                    const reference_1143: boolean;
                    export { reference_1143 as reference };
                    const many_1143: boolean;
                    export { many_1143 as many };
                    const inverse_1143: boolean;
                    export { inverse_1143 as inverse };
                }
            }
            export { fields_432 as fields };
        }
        namespace IfcReinforcingBar {
            const domain_433: string;
            export { domain_433 as domain };
            const superclasses_433: string[];
            export { superclasses_433 as superclasses };
            export namespace fields_433 {
                export namespace NominalDiameter_1 {
                    const type_1144: string;
                    export { type_1144 as type };
                    const reference_1144: boolean;
                    export { reference_1144 as reference };
                    const many_1144: boolean;
                    export { many_1144 as many };
                    const inverse_1144: boolean;
                    export { inverse_1144 as inverse };
                }
                export { NominalDiameter_1 as NominalDiameter };
                export namespace NominalDiameterAsString_1 {
                    const type_1145: string;
                    export { type_1145 as type };
                    const reference_1145: boolean;
                    export { reference_1145 as reference };
                    const many_1145: boolean;
                    export { many_1145 as many };
                    const inverse_1145: boolean;
                    export { inverse_1145 as inverse };
                }
                export { NominalDiameterAsString_1 as NominalDiameterAsString };
                export namespace CrossSectionArea_1 {
                    const type_1146: string;
                    export { type_1146 as type };
                    const reference_1146: boolean;
                    export { reference_1146 as reference };
                    const many_1146: boolean;
                    export { many_1146 as many };
                    const inverse_1146: boolean;
                    export { inverse_1146 as inverse };
                }
                export { CrossSectionArea_1 as CrossSectionArea };
                export namespace CrossSectionAreaAsString_1 {
                    const type_1147: string;
                    export { type_1147 as type };
                    const reference_1147: boolean;
                    export { reference_1147 as reference };
                    const many_1147: boolean;
                    export { many_1147 as many };
                    const inverse_1147: boolean;
                    export { inverse_1147 as inverse };
                }
                export { CrossSectionAreaAsString_1 as CrossSectionAreaAsString };
                export namespace BarLength {
                    const type_1148: string;
                    export { type_1148 as type };
                    const reference_1148: boolean;
                    export { reference_1148 as reference };
                    const many_1148: boolean;
                    export { many_1148 as many };
                    const inverse_1148: boolean;
                    export { inverse_1148 as inverse };
                }
                export namespace BarLengthAsString {
                    const type_1149: string;
                    export { type_1149 as type };
                    const reference_1149: boolean;
                    export { reference_1149 as reference };
                    const many_1149: boolean;
                    export { many_1149 as many };
                    const inverse_1149: boolean;
                    export { inverse_1149 as inverse };
                }
                export namespace BarRole {
                    const type_1150: string;
                    export { type_1150 as type };
                    const reference_1150: boolean;
                    export { reference_1150 as reference };
                    const many_1150: boolean;
                    export { many_1150 as many };
                    const inverse_1150: boolean;
                    export { inverse_1150 as inverse };
                }
                export namespace BarSurface_1 {
                    const type_1151: string;
                    export { type_1151 as type };
                    const reference_1151: boolean;
                    export { reference_1151 as reference };
                    const many_1151: boolean;
                    export { many_1151 as many };
                    const inverse_1151: boolean;
                    export { inverse_1151 as inverse };
                }
                export { BarSurface_1 as BarSurface };
            }
            export { fields_433 as fields };
        }
        namespace IfcReinforcingElement {
            const domain_434: string;
            export { domain_434 as domain };
            const superclasses_434: string[];
            export { superclasses_434 as superclasses };
            export namespace fields_434 {
                export namespace SteelGrade_1 {
                    const type_1152: string;
                    export { type_1152 as type };
                    const reference_1152: boolean;
                    export { reference_1152 as reference };
                    const many_1152: boolean;
                    export { many_1152 as many };
                    const inverse_1152: boolean;
                    export { inverse_1152 as inverse };
                }
                export { SteelGrade_1 as SteelGrade };
            }
            export { fields_434 as fields };
        }
        namespace IfcReinforcingMesh {
            const domain_435: string;
            export { domain_435 as domain };
            const superclasses_435: string[];
            export { superclasses_435 as superclasses };
            export namespace fields_435 {
                namespace MeshLength {
                    const type_1153: string;
                    export { type_1153 as type };
                    const reference_1153: boolean;
                    export { reference_1153 as reference };
                    const many_1153: boolean;
                    export { many_1153 as many };
                    const inverse_1153: boolean;
                    export { inverse_1153 as inverse };
                }
                namespace MeshLengthAsString {
                    const type_1154: string;
                    export { type_1154 as type };
                    const reference_1154: boolean;
                    export { reference_1154 as reference };
                    const many_1154: boolean;
                    export { many_1154 as many };
                    const inverse_1154: boolean;
                    export { inverse_1154 as inverse };
                }
                namespace MeshWidth {
                    const type_1155: string;
                    export { type_1155 as type };
                    const reference_1155: boolean;
                    export { reference_1155 as reference };
                    const many_1155: boolean;
                    export { many_1155 as many };
                    const inverse_1155: boolean;
                    export { inverse_1155 as inverse };
                }
                namespace MeshWidthAsString {
                    const type_1156: string;
                    export { type_1156 as type };
                    const reference_1156: boolean;
                    export { reference_1156 as reference };
                    const many_1156: boolean;
                    export { many_1156 as many };
                    const inverse_1156: boolean;
                    export { inverse_1156 as inverse };
                }
                namespace LongitudinalBarNominalDiameter {
                    const type_1157: string;
                    export { type_1157 as type };
                    const reference_1157: boolean;
                    export { reference_1157 as reference };
                    const many_1157: boolean;
                    export { many_1157 as many };
                    const inverse_1157: boolean;
                    export { inverse_1157 as inverse };
                }
                namespace LongitudinalBarNominalDiameterAsString {
                    const type_1158: string;
                    export { type_1158 as type };
                    const reference_1158: boolean;
                    export { reference_1158 as reference };
                    const many_1158: boolean;
                    export { many_1158 as many };
                    const inverse_1158: boolean;
                    export { inverse_1158 as inverse };
                }
                namespace TransverseBarNominalDiameter {
                    const type_1159: string;
                    export { type_1159 as type };
                    const reference_1159: boolean;
                    export { reference_1159 as reference };
                    const many_1159: boolean;
                    export { many_1159 as many };
                    const inverse_1159: boolean;
                    export { inverse_1159 as inverse };
                }
                namespace TransverseBarNominalDiameterAsString {
                    const type_1160: string;
                    export { type_1160 as type };
                    const reference_1160: boolean;
                    export { reference_1160 as reference };
                    const many_1160: boolean;
                    export { many_1160 as many };
                    const inverse_1160: boolean;
                    export { inverse_1160 as inverse };
                }
                namespace LongitudinalBarCrossSectionArea {
                    const type_1161: string;
                    export { type_1161 as type };
                    const reference_1161: boolean;
                    export { reference_1161 as reference };
                    const many_1161: boolean;
                    export { many_1161 as many };
                    const inverse_1161: boolean;
                    export { inverse_1161 as inverse };
                }
                namespace LongitudinalBarCrossSectionAreaAsString {
                    const type_1162: string;
                    export { type_1162 as type };
                    const reference_1162: boolean;
                    export { reference_1162 as reference };
                    const many_1162: boolean;
                    export { many_1162 as many };
                    const inverse_1162: boolean;
                    export { inverse_1162 as inverse };
                }
                namespace TransverseBarCrossSectionArea {
                    const type_1163: string;
                    export { type_1163 as type };
                    const reference_1163: boolean;
                    export { reference_1163 as reference };
                    const many_1163: boolean;
                    export { many_1163 as many };
                    const inverse_1163: boolean;
                    export { inverse_1163 as inverse };
                }
                namespace TransverseBarCrossSectionAreaAsString {
                    const type_1164: string;
                    export { type_1164 as type };
                    const reference_1164: boolean;
                    export { reference_1164 as reference };
                    const many_1164: boolean;
                    export { many_1164 as many };
                    const inverse_1164: boolean;
                    export { inverse_1164 as inverse };
                }
                namespace LongitudinalBarSpacing {
                    const type_1165: string;
                    export { type_1165 as type };
                    const reference_1165: boolean;
                    export { reference_1165 as reference };
                    const many_1165: boolean;
                    export { many_1165 as many };
                    const inverse_1165: boolean;
                    export { inverse_1165 as inverse };
                }
                namespace LongitudinalBarSpacingAsString {
                    const type_1166: string;
                    export { type_1166 as type };
                    const reference_1166: boolean;
                    export { reference_1166 as reference };
                    const many_1166: boolean;
                    export { many_1166 as many };
                    const inverse_1166: boolean;
                    export { inverse_1166 as inverse };
                }
                namespace TransverseBarSpacing {
                    const type_1167: string;
                    export { type_1167 as type };
                    const reference_1167: boolean;
                    export { reference_1167 as reference };
                    const many_1167: boolean;
                    export { many_1167 as many };
                    const inverse_1167: boolean;
                    export { inverse_1167 as inverse };
                }
                namespace TransverseBarSpacingAsString {
                    const type_1168: string;
                    export { type_1168 as type };
                    const reference_1168: boolean;
                    export { reference_1168 as reference };
                    const many_1168: boolean;
                    export { many_1168 as many };
                    const inverse_1168: boolean;
                    export { inverse_1168 as inverse };
                }
            }
            export { fields_435 as fields };
        }
        namespace IfcRelAggregates {
            const domain_436: string;
            export { domain_436 as domain };
            const superclasses_436: string[];
            export { superclasses_436 as superclasses };
            const fields_436: {};
            export { fields_436 as fields };
        }
        namespace IfcRelAssigns {
            const domain_437: string;
            export { domain_437 as domain };
            const superclasses_437: string[];
            export { superclasses_437 as superclasses };
            export namespace fields_437 {
                namespace RelatedObjects {
                    const type_1169: string;
                    export { type_1169 as type };
                    const reference_1169: boolean;
                    export { reference_1169 as reference };
                    const many_1169: boolean;
                    export { many_1169 as many };
                    const inverse_1169: boolean;
                    export { inverse_1169 as inverse };
                }
                namespace RelatedObjectsType {
                    const type_1170: string;
                    export { type_1170 as type };
                    const reference_1170: boolean;
                    export { reference_1170 as reference };
                    const many_1170: boolean;
                    export { many_1170 as many };
                    const inverse_1170: boolean;
                    export { inverse_1170 as inverse };
                }
            }
            export { fields_437 as fields };
        }
        namespace IfcRelAssignsTasks {
            const domain_438: string;
            export { domain_438 as domain };
            const superclasses_438: string[];
            export { superclasses_438 as superclasses };
            export namespace fields_438 {
                namespace TimeForTask {
                    const type_1171: string;
                    export { type_1171 as type };
                    const reference_1171: boolean;
                    export { reference_1171 as reference };
                    const many_1171: boolean;
                    export { many_1171 as many };
                    const inverse_1171: boolean;
                    export { inverse_1171 as inverse };
                }
            }
            export { fields_438 as fields };
        }
        namespace IfcRelAssignsToActor {
            const domain_439: string;
            export { domain_439 as domain };
            const superclasses_439: string[];
            export { superclasses_439 as superclasses };
            export namespace fields_439 {
                namespace RelatingActor {
                    const type_1172: string;
                    export { type_1172 as type };
                    const reference_1172: boolean;
                    export { reference_1172 as reference };
                    const many_1172: boolean;
                    export { many_1172 as many };
                    const inverse_1172: boolean;
                    export { inverse_1172 as inverse };
                }
                namespace ActingRole {
                    const type_1173: string;
                    export { type_1173 as type };
                    const reference_1173: boolean;
                    export { reference_1173 as reference };
                    const many_1173: boolean;
                    export { many_1173 as many };
                    const inverse_1173: boolean;
                    export { inverse_1173 as inverse };
                }
            }
            export { fields_439 as fields };
        }
        namespace IfcRelAssignsToControl {
            const domain_440: string;
            export { domain_440 as domain };
            const superclasses_440: string[];
            export { superclasses_440 as superclasses };
            export namespace fields_440 {
                namespace RelatingControl {
                    const type_1174: string;
                    export { type_1174 as type };
                    const reference_1174: boolean;
                    export { reference_1174 as reference };
                    const many_1174: boolean;
                    export { many_1174 as many };
                    const inverse_1174: boolean;
                    export { inverse_1174 as inverse };
                }
            }
            export { fields_440 as fields };
        }
        namespace IfcRelAssignsToGroup {
            const domain_441: string;
            export { domain_441 as domain };
            const superclasses_441: string[];
            export { superclasses_441 as superclasses };
            export namespace fields_441 {
                namespace RelatingGroup {
                    const type_1175: string;
                    export { type_1175 as type };
                    const reference_1175: boolean;
                    export { reference_1175 as reference };
                    const many_1175: boolean;
                    export { many_1175 as many };
                    const inverse_1175: boolean;
                    export { inverse_1175 as inverse };
                }
            }
            export { fields_441 as fields };
        }
        namespace IfcRelAssignsToProcess {
            const domain_442: string;
            export { domain_442 as domain };
            const superclasses_442: string[];
            export { superclasses_442 as superclasses };
            export namespace fields_442 {
                namespace RelatingProcess {
                    const type_1176: string;
                    export { type_1176 as type };
                    const reference_1176: boolean;
                    export { reference_1176 as reference };
                    const many_1176: boolean;
                    export { many_1176 as many };
                    const inverse_1176: boolean;
                    export { inverse_1176 as inverse };
                }
                namespace QuantityInProcess {
                    const type_1177: string;
                    export { type_1177 as type };
                    const reference_1177: boolean;
                    export { reference_1177 as reference };
                    const many_1177: boolean;
                    export { many_1177 as many };
                    const inverse_1177: boolean;
                    export { inverse_1177 as inverse };
                }
            }
            export { fields_442 as fields };
        }
        namespace IfcRelAssignsToProduct {
            const domain_443: string;
            export { domain_443 as domain };
            const superclasses_443: string[];
            export { superclasses_443 as superclasses };
            export namespace fields_443 {
                namespace RelatingProduct {
                    const type_1178: string;
                    export { type_1178 as type };
                    const reference_1178: boolean;
                    export { reference_1178 as reference };
                    const many_1178: boolean;
                    export { many_1178 as many };
                    const inverse_1178: boolean;
                    export { inverse_1178 as inverse };
                }
            }
            export { fields_443 as fields };
        }
        namespace IfcRelAssignsToProjectOrder {
            const domain_444: string;
            export { domain_444 as domain };
            const superclasses_444: string[];
            export { superclasses_444 as superclasses };
            const fields_444: {};
            export { fields_444 as fields };
        }
        namespace IfcRelAssignsToResource {
            const domain_445: string;
            export { domain_445 as domain };
            const superclasses_445: string[];
            export { superclasses_445 as superclasses };
            export namespace fields_445 {
                namespace RelatingResource {
                    const type_1179: string;
                    export { type_1179 as type };
                    const reference_1179: boolean;
                    export { reference_1179 as reference };
                    const many_1179: boolean;
                    export { many_1179 as many };
                    const inverse_1179: boolean;
                    export { inverse_1179 as inverse };
                }
            }
            export { fields_445 as fields };
        }
        namespace IfcRelAssociates {
            const domain_446: string;
            export { domain_446 as domain };
            const superclasses_446: string[];
            export { superclasses_446 as superclasses };
            export namespace fields_446 {
                export namespace RelatedObjects_1 {
                    const type_1180: string;
                    export { type_1180 as type };
                    const reference_1180: boolean;
                    export { reference_1180 as reference };
                    const many_1180: boolean;
                    export { many_1180 as many };
                    const inverse_1180: boolean;
                    export { inverse_1180 as inverse };
                }
                export { RelatedObjects_1 as RelatedObjects };
            }
            export { fields_446 as fields };
        }
        namespace IfcRelAssociatesAppliedValue {
            const domain_447: string;
            export { domain_447 as domain };
            const superclasses_447: string[];
            export { superclasses_447 as superclasses };
            export namespace fields_447 {
                namespace RelatingAppliedValue {
                    const type_1181: string;
                    export { type_1181 as type };
                    const reference_1181: boolean;
                    export { reference_1181 as reference };
                    const many_1181: boolean;
                    export { many_1181 as many };
                    const inverse_1181: boolean;
                    export { inverse_1181 as inverse };
                }
            }
            export { fields_447 as fields };
        }
        namespace IfcRelAssociatesApproval {
            const domain_448: string;
            export { domain_448 as domain };
            const superclasses_448: string[];
            export { superclasses_448 as superclasses };
            export namespace fields_448 {
                export namespace RelatingApproval_1 {
                    const type_1182: string;
                    export { type_1182 as type };
                    const reference_1182: boolean;
                    export { reference_1182 as reference };
                    const many_1182: boolean;
                    export { many_1182 as many };
                    const inverse_1182: boolean;
                    export { inverse_1182 as inverse };
                }
                export { RelatingApproval_1 as RelatingApproval };
            }
            export { fields_448 as fields };
        }
        namespace IfcRelAssociatesClassification {
            const domain_449: string;
            export { domain_449 as domain };
            const superclasses_449: string[];
            export { superclasses_449 as superclasses };
            export namespace fields_449 {
                namespace RelatingClassification {
                    const type_1183: string;
                    export { type_1183 as type };
                    const reference_1183: boolean;
                    export { reference_1183 as reference };
                    const many_1183: boolean;
                    export { many_1183 as many };
                    const inverse_1183: boolean;
                    export { inverse_1183 as inverse };
                }
            }
            export { fields_449 as fields };
        }
        namespace IfcRelAssociatesConstraint {
            const domain_450: string;
            export { domain_450 as domain };
            const superclasses_450: string[];
            export { superclasses_450 as superclasses };
            export namespace fields_450 {
                export namespace Intent {
                    const type_1184: string;
                    export { type_1184 as type };
                    const reference_1184: boolean;
                    export { reference_1184 as reference };
                    const many_1184: boolean;
                    export { many_1184 as many };
                    const inverse_1184: boolean;
                    export { inverse_1184 as inverse };
                }
                export namespace RelatingConstraint_3 {
                    const type_1185: string;
                    export { type_1185 as type };
                    const reference_1185: boolean;
                    export { reference_1185 as reference };
                    const many_1185: boolean;
                    export { many_1185 as many };
                    const inverse_1185: boolean;
                    export { inverse_1185 as inverse };
                }
                export { RelatingConstraint_3 as RelatingConstraint };
            }
            export { fields_450 as fields };
        }
        namespace IfcRelAssociatesDocument {
            const domain_451: string;
            export { domain_451 as domain };
            const superclasses_451: string[];
            export { superclasses_451 as superclasses };
            export namespace fields_451 {
                export namespace RelatingDocument_1 {
                    const type_1186: string;
                    export { type_1186 as type };
                    const reference_1186: boolean;
                    export { reference_1186 as reference };
                    const many_1186: boolean;
                    export { many_1186 as many };
                    const inverse_1186: boolean;
                    export { inverse_1186 as inverse };
                }
                export { RelatingDocument_1 as RelatingDocument };
            }
            export { fields_451 as fields };
        }
        namespace IfcRelAssociatesLibrary {
            const domain_452: string;
            export { domain_452 as domain };
            const superclasses_452: string[];
            export { superclasses_452 as superclasses };
            export namespace fields_452 {
                namespace RelatingLibrary {
                    const type_1187: string;
                    export { type_1187 as type };
                    const reference_1187: boolean;
                    export { reference_1187 as reference };
                    const many_1187: boolean;
                    export { many_1187 as many };
                    const inverse_1187: boolean;
                    export { inverse_1187 as inverse };
                }
            }
            export { fields_452 as fields };
        }
        namespace IfcRelAssociatesMaterial {
            const domain_453: string;
            export { domain_453 as domain };
            const superclasses_453: string[];
            export { superclasses_453 as superclasses };
            export namespace fields_453 {
                namespace RelatingMaterial {
                    const type_1188: string;
                    export { type_1188 as type };
                    const reference_1188: boolean;
                    export { reference_1188 as reference };
                    const many_1188: boolean;
                    export { many_1188 as many };
                    const inverse_1188: boolean;
                    export { inverse_1188 as inverse };
                }
            }
            export { fields_453 as fields };
        }
        namespace IfcRelAssociatesProfileProperties {
            const domain_454: string;
            export { domain_454 as domain };
            const superclasses_454: string[];
            export { superclasses_454 as superclasses };
            export namespace fields_454 {
                namespace RelatingProfileProperties {
                    const type_1189: string;
                    export { type_1189 as type };
                    const reference_1189: boolean;
                    export { reference_1189 as reference };
                    const many_1189: boolean;
                    export { many_1189 as many };
                    const inverse_1189: boolean;
                    export { inverse_1189 as inverse };
                }
                namespace ProfileSectionLocation {
                    const type_1190: string;
                    export { type_1190 as type };
                    const reference_1190: boolean;
                    export { reference_1190 as reference };
                    const many_1190: boolean;
                    export { many_1190 as many };
                    const inverse_1190: boolean;
                    export { inverse_1190 as inverse };
                }
                namespace ProfileOrientation {
                    const type_1191: string;
                    export { type_1191 as type };
                    const reference_1191: boolean;
                    export { reference_1191 as reference };
                    const many_1191: boolean;
                    export { many_1191 as many };
                    const inverse_1191: boolean;
                    export { inverse_1191 as inverse };
                }
            }
            export { fields_454 as fields };
        }
        namespace IfcRelConnects {
            const domain_455: string;
            export { domain_455 as domain };
            const superclasses_455: string[];
            export { superclasses_455 as superclasses };
            const fields_455: {};
            export { fields_455 as fields };
        }
        namespace IfcRelConnectsElements {
            const domain_456: string;
            export { domain_456 as domain };
            const superclasses_456: string[];
            export { superclasses_456 as superclasses };
            export namespace fields_456 {
                namespace ConnectionGeometry {
                    const type_1192: string;
                    export { type_1192 as type };
                    const reference_1192: boolean;
                    export { reference_1192 as reference };
                    const many_1192: boolean;
                    export { many_1192 as many };
                    const inverse_1192: boolean;
                    export { inverse_1192 as inverse };
                }
                namespace RelatingElement {
                    const type_1193: string;
                    export { type_1193 as type };
                    const reference_1193: boolean;
                    export { reference_1193 as reference };
                    const many_1193: boolean;
                    export { many_1193 as many };
                    const inverse_1193: boolean;
                    export { inverse_1193 as inverse };
                }
                namespace RelatedElement {
                    const type_1194: string;
                    export { type_1194 as type };
                    const reference_1194: boolean;
                    export { reference_1194 as reference };
                    const many_1194: boolean;
                    export { many_1194 as many };
                    const inverse_1194: boolean;
                    export { inverse_1194 as inverse };
                }
            }
            export { fields_456 as fields };
        }
        namespace IfcRelConnectsPathElements {
            const domain_457: string;
            export { domain_457 as domain };
            const superclasses_457: string[];
            export { superclasses_457 as superclasses };
            export namespace fields_457 {
                namespace RelatingPriorities {
                    const type_1195: string;
                    export { type_1195 as type };
                    const reference_1195: boolean;
                    export { reference_1195 as reference };
                    const many_1195: boolean;
                    export { many_1195 as many };
                    const inverse_1195: boolean;
                    export { inverse_1195 as inverse };
                }
                namespace RelatedPriorities {
                    const type_1196: string;
                    export { type_1196 as type };
                    const reference_1196: boolean;
                    export { reference_1196 as reference };
                    const many_1196: boolean;
                    export { many_1196 as many };
                    const inverse_1196: boolean;
                    export { inverse_1196 as inverse };
                }
                namespace RelatedConnectionType {
                    const type_1197: string;
                    export { type_1197 as type };
                    const reference_1197: boolean;
                    export { reference_1197 as reference };
                    const many_1197: boolean;
                    export { many_1197 as many };
                    const inverse_1197: boolean;
                    export { inverse_1197 as inverse };
                }
                namespace RelatingConnectionType {
                    const type_1198: string;
                    export { type_1198 as type };
                    const reference_1198: boolean;
                    export { reference_1198 as reference };
                    const many_1198: boolean;
                    export { many_1198 as many };
                    const inverse_1198: boolean;
                    export { inverse_1198 as inverse };
                }
            }
            export { fields_457 as fields };
        }
        namespace IfcRelConnectsPortToElement {
            const domain_458: string;
            export { domain_458 as domain };
            const superclasses_458: string[];
            export { superclasses_458 as superclasses };
            export namespace fields_458 {
                export namespace RelatingPort {
                    const type_1199: string;
                    export { type_1199 as type };
                    const reference_1199: boolean;
                    export { reference_1199 as reference };
                    const many_1199: boolean;
                    export { many_1199 as many };
                    const inverse_1199: boolean;
                    export { inverse_1199 as inverse };
                }
                export namespace RelatedElement_1 {
                    const type_1200: string;
                    export { type_1200 as type };
                    const reference_1200: boolean;
                    export { reference_1200 as reference };
                    const many_1200: boolean;
                    export { many_1200 as many };
                    const inverse_1200: boolean;
                    export { inverse_1200 as inverse };
                }
                export { RelatedElement_1 as RelatedElement };
            }
            export { fields_458 as fields };
        }
        namespace IfcRelConnectsPorts {
            const domain_459: string;
            export { domain_459 as domain };
            const superclasses_459: string[];
            export { superclasses_459 as superclasses };
            export namespace fields_459 {
                export namespace RelatingPort_1 {
                    const type_1201: string;
                    export { type_1201 as type };
                    const reference_1201: boolean;
                    export { reference_1201 as reference };
                    const many_1201: boolean;
                    export { many_1201 as many };
                    const inverse_1201: boolean;
                    export { inverse_1201 as inverse };
                }
                export { RelatingPort_1 as RelatingPort };
                export namespace RelatedPort {
                    const type_1202: string;
                    export { type_1202 as type };
                    const reference_1202: boolean;
                    export { reference_1202 as reference };
                    const many_1202: boolean;
                    export { many_1202 as many };
                    const inverse_1202: boolean;
                    export { inverse_1202 as inverse };
                }
                export namespace RealizingElement {
                    const type_1203: string;
                    export { type_1203 as type };
                    const reference_1203: boolean;
                    export { reference_1203 as reference };
                    const many_1203: boolean;
                    export { many_1203 as many };
                    const inverse_1203: boolean;
                    export { inverse_1203 as inverse };
                }
            }
            export { fields_459 as fields };
        }
        namespace IfcRelConnectsStructuralActivity {
            const domain_460: string;
            export { domain_460 as domain };
            const superclasses_460: string[];
            export { superclasses_460 as superclasses };
            export namespace fields_460 {
                export namespace RelatingElement_1 {
                    const type_1204: string;
                    export { type_1204 as type };
                    const reference_1204: boolean;
                    export { reference_1204 as reference };
                    const many_1204: boolean;
                    export { many_1204 as many };
                    const inverse_1204: boolean;
                    export { inverse_1204 as inverse };
                }
                export { RelatingElement_1 as RelatingElement };
                export namespace RelatedStructuralActivity {
                    const type_1205: string;
                    export { type_1205 as type };
                    const reference_1205: boolean;
                    export { reference_1205 as reference };
                    const many_1205: boolean;
                    export { many_1205 as many };
                    const inverse_1205: boolean;
                    export { inverse_1205 as inverse };
                }
            }
            export { fields_460 as fields };
        }
        namespace IfcRelConnectsStructuralElement {
            const domain_461: string;
            export { domain_461 as domain };
            const superclasses_461: string[];
            export { superclasses_461 as superclasses };
            export namespace fields_461 {
                export namespace RelatingElement_2 {
                    const type_1206: string;
                    export { type_1206 as type };
                    const reference_1206: boolean;
                    export { reference_1206 as reference };
                    const many_1206: boolean;
                    export { many_1206 as many };
                    const inverse_1206: boolean;
                    export { inverse_1206 as inverse };
                }
                export { RelatingElement_2 as RelatingElement };
                export namespace RelatedStructuralMember {
                    const type_1207: string;
                    export { type_1207 as type };
                    const reference_1207: boolean;
                    export { reference_1207 as reference };
                    const many_1207: boolean;
                    export { many_1207 as many };
                    const inverse_1207: boolean;
                    export { inverse_1207 as inverse };
                }
            }
            export { fields_461 as fields };
        }
        namespace IfcRelConnectsStructuralMember {
            const domain_462: string;
            export { domain_462 as domain };
            const superclasses_462: string[];
            export { superclasses_462 as superclasses };
            export namespace fields_462 {
                namespace RelatingStructuralMember {
                    const type_1208: string;
                    export { type_1208 as type };
                    const reference_1208: boolean;
                    export { reference_1208 as reference };
                    const many_1208: boolean;
                    export { many_1208 as many };
                    const inverse_1208: boolean;
                    export { inverse_1208 as inverse };
                }
                namespace RelatedStructuralConnection {
                    const type_1209: string;
                    export { type_1209 as type };
                    const reference_1209: boolean;
                    export { reference_1209 as reference };
                    const many_1209: boolean;
                    export { many_1209 as many };
                    const inverse_1209: boolean;
                    export { inverse_1209 as inverse };
                }
                namespace AppliedCondition {
                    const type_1210: string;
                    export { type_1210 as type };
                    const reference_1210: boolean;
                    export { reference_1210 as reference };
                    const many_1210: boolean;
                    export { many_1210 as many };
                    const inverse_1210: boolean;
                    export { inverse_1210 as inverse };
                }
                namespace AdditionalConditions {
                    const type_1211: string;
                    export { type_1211 as type };
                    const reference_1211: boolean;
                    export { reference_1211 as reference };
                    const many_1211: boolean;
                    export { many_1211 as many };
                    const inverse_1211: boolean;
                    export { inverse_1211 as inverse };
                }
                namespace SupportedLength {
                    const type_1212: string;
                    export { type_1212 as type };
                    const reference_1212: boolean;
                    export { reference_1212 as reference };
                    const many_1212: boolean;
                    export { many_1212 as many };
                    const inverse_1212: boolean;
                    export { inverse_1212 as inverse };
                }
                namespace SupportedLengthAsString {
                    const type_1213: string;
                    export { type_1213 as type };
                    const reference_1213: boolean;
                    export { reference_1213 as reference };
                    const many_1213: boolean;
                    export { many_1213 as many };
                    const inverse_1213: boolean;
                    export { inverse_1213 as inverse };
                }
                namespace ConditionCoordinateSystem {
                    const type_1214: string;
                    export { type_1214 as type };
                    const reference_1214: boolean;
                    export { reference_1214 as reference };
                    const many_1214: boolean;
                    export { many_1214 as many };
                    const inverse_1214: boolean;
                    export { inverse_1214 as inverse };
                }
            }
            export { fields_462 as fields };
        }
        namespace IfcRelConnectsWithEccentricity {
            const domain_463: string;
            export { domain_463 as domain };
            const superclasses_463: string[];
            export { superclasses_463 as superclasses };
            export namespace fields_463 {
                namespace ConnectionConstraint {
                    const type_1215: string;
                    export { type_1215 as type };
                    const reference_1215: boolean;
                    export { reference_1215 as reference };
                    const many_1215: boolean;
                    export { many_1215 as many };
                    const inverse_1215: boolean;
                    export { inverse_1215 as inverse };
                }
            }
            export { fields_463 as fields };
        }
        namespace IfcRelConnectsWithRealizingElements {
            const domain_464: string;
            export { domain_464 as domain };
            const superclasses_464: string[];
            export { superclasses_464 as superclasses };
            export namespace fields_464 {
                namespace RealizingElements {
                    const type_1216: string;
                    export { type_1216 as type };
                    const reference_1216: boolean;
                    export { reference_1216 as reference };
                    const many_1216: boolean;
                    export { many_1216 as many };
                    const inverse_1216: boolean;
                    export { inverse_1216 as inverse };
                }
                namespace ConnectionType {
                    const type_1217: string;
                    export { type_1217 as type };
                    const reference_1217: boolean;
                    export { reference_1217 as reference };
                    const many_1217: boolean;
                    export { many_1217 as many };
                    const inverse_1217: boolean;
                    export { inverse_1217 as inverse };
                }
            }
            export { fields_464 as fields };
        }
        namespace IfcRelContainedInSpatialStructure {
            const domain_465: string;
            export { domain_465 as domain };
            const superclasses_465: string[];
            export { superclasses_465 as superclasses };
            export namespace fields_465 {
                namespace RelatedElements {
                    const type_1218: string;
                    export { type_1218 as type };
                    const reference_1218: boolean;
                    export { reference_1218 as reference };
                    const many_1218: boolean;
                    export { many_1218 as many };
                    const inverse_1218: boolean;
                    export { inverse_1218 as inverse };
                }
                namespace RelatingStructure {
                    const type_1219: string;
                    export { type_1219 as type };
                    const reference_1219: boolean;
                    export { reference_1219 as reference };
                    const many_1219: boolean;
                    export { many_1219 as many };
                    const inverse_1219: boolean;
                    export { inverse_1219 as inverse };
                }
            }
            export { fields_465 as fields };
        }
        namespace IfcRelCoversBldgElements {
            const domain_466: string;
            export { domain_466 as domain };
            const superclasses_466: string[];
            export { superclasses_466 as superclasses };
            export namespace fields_466 {
                namespace RelatingBuildingElement {
                    const type_1220: string;
                    export { type_1220 as type };
                    const reference_1220: boolean;
                    export { reference_1220 as reference };
                    const many_1220: boolean;
                    export { many_1220 as many };
                    const inverse_1220: boolean;
                    export { inverse_1220 as inverse };
                }
                namespace RelatedCoverings {
                    const type_1221: string;
                    export { type_1221 as type };
                    const reference_1221: boolean;
                    export { reference_1221 as reference };
                    const many_1221: boolean;
                    export { many_1221 as many };
                    const inverse_1221: boolean;
                    export { inverse_1221 as inverse };
                }
            }
            export { fields_466 as fields };
        }
        namespace IfcRelCoversSpaces {
            const domain_467: string;
            export { domain_467 as domain };
            const superclasses_467: string[];
            export { superclasses_467 as superclasses };
            export namespace fields_467 {
                export namespace RelatedSpace {
                    const type_1222: string;
                    export { type_1222 as type };
                    const reference_1222: boolean;
                    export { reference_1222 as reference };
                    const many_1222: boolean;
                    export { many_1222 as many };
                    const inverse_1222: boolean;
                    export { inverse_1222 as inverse };
                }
                export namespace RelatedCoverings_1 {
                    const type_1223: string;
                    export { type_1223 as type };
                    const reference_1223: boolean;
                    export { reference_1223 as reference };
                    const many_1223: boolean;
                    export { many_1223 as many };
                    const inverse_1223: boolean;
                    export { inverse_1223 as inverse };
                }
                export { RelatedCoverings_1 as RelatedCoverings };
            }
            export { fields_467 as fields };
        }
        namespace IfcRelDecomposes {
            const domain_468: string;
            export { domain_468 as domain };
            const superclasses_468: string[];
            export { superclasses_468 as superclasses };
            export namespace fields_468 {
                export namespace RelatingObject {
                    const type_1224: string;
                    export { type_1224 as type };
                    const reference_1224: boolean;
                    export { reference_1224 as reference };
                    const many_1224: boolean;
                    export { many_1224 as many };
                    const inverse_1224: boolean;
                    export { inverse_1224 as inverse };
                }
                export namespace RelatedObjects_2 {
                    const type_1225: string;
                    export { type_1225 as type };
                    const reference_1225: boolean;
                    export { reference_1225 as reference };
                    const many_1225: boolean;
                    export { many_1225 as many };
                    const inverse_1225: boolean;
                    export { inverse_1225 as inverse };
                }
                export { RelatedObjects_2 as RelatedObjects };
            }
            export { fields_468 as fields };
        }
        namespace IfcRelDefines {
            const domain_469: string;
            export { domain_469 as domain };
            const superclasses_469: string[];
            export { superclasses_469 as superclasses };
            export namespace fields_469 {
                export namespace RelatedObjects_3 {
                    const type_1226: string;
                    export { type_1226 as type };
                    const reference_1226: boolean;
                    export { reference_1226 as reference };
                    const many_1226: boolean;
                    export { many_1226 as many };
                    const inverse_1226: boolean;
                    export { inverse_1226 as inverse };
                }
                export { RelatedObjects_3 as RelatedObjects };
            }
            export { fields_469 as fields };
        }
        namespace IfcRelDefinesByProperties {
            const domain_470: string;
            export { domain_470 as domain };
            const superclasses_470: string[];
            export { superclasses_470 as superclasses };
            export namespace fields_470 {
                namespace RelatingPropertyDefinition {
                    const type_1227: string;
                    export { type_1227 as type };
                    const reference_1227: boolean;
                    export { reference_1227 as reference };
                    const many_1227: boolean;
                    export { many_1227 as many };
                    const inverse_1227: boolean;
                    export { inverse_1227 as inverse };
                }
            }
            export { fields_470 as fields };
        }
        namespace IfcRelDefinesByType {
            const domain_471: string;
            export { domain_471 as domain };
            const superclasses_471: string[];
            export { superclasses_471 as superclasses };
            export namespace fields_471 {
                namespace RelatingType {
                    const type_1228: string;
                    export { type_1228 as type };
                    const reference_1228: boolean;
                    export { reference_1228 as reference };
                    const many_1228: boolean;
                    export { many_1228 as many };
                    const inverse_1228: boolean;
                    export { inverse_1228 as inverse };
                }
            }
            export { fields_471 as fields };
        }
        namespace IfcRelFillsElement {
            const domain_472: string;
            export { domain_472 as domain };
            const superclasses_472: string[];
            export { superclasses_472 as superclasses };
            export namespace fields_472 {
                namespace RelatingOpeningElement {
                    const type_1229: string;
                    export { type_1229 as type };
                    const reference_1229: boolean;
                    export { reference_1229 as reference };
                    const many_1229: boolean;
                    export { many_1229 as many };
                    const inverse_1229: boolean;
                    export { inverse_1229 as inverse };
                }
                namespace RelatedBuildingElement {
                    const type_1230: string;
                    export { type_1230 as type };
                    const reference_1230: boolean;
                    export { reference_1230 as reference };
                    const many_1230: boolean;
                    export { many_1230 as many };
                    const inverse_1230: boolean;
                    export { inverse_1230 as inverse };
                }
            }
            export { fields_472 as fields };
        }
        namespace IfcRelFlowControlElements {
            const domain_473: string;
            export { domain_473 as domain };
            const superclasses_473: string[];
            export { superclasses_473 as superclasses };
            export namespace fields_473 {
                namespace RelatedControlElements {
                    const type_1231: string;
                    export { type_1231 as type };
                    const reference_1231: boolean;
                    export { reference_1231 as reference };
                    const many_1231: boolean;
                    export { many_1231 as many };
                    const inverse_1231: boolean;
                    export { inverse_1231 as inverse };
                }
                namespace RelatingFlowElement {
                    const type_1232: string;
                    export { type_1232 as type };
                    const reference_1232: boolean;
                    export { reference_1232 as reference };
                    const many_1232: boolean;
                    export { many_1232 as many };
                    const inverse_1232: boolean;
                    export { inverse_1232 as inverse };
                }
            }
            export { fields_473 as fields };
        }
        namespace IfcRelInteractionRequirements {
            const domain_474: string;
            export { domain_474 as domain };
            const superclasses_474: string[];
            export { superclasses_474 as superclasses };
            export namespace fields_474 {
                namespace DailyInteraction {
                    const type_1233: string;
                    export { type_1233 as type };
                    const reference_1233: boolean;
                    export { reference_1233 as reference };
                    const many_1233: boolean;
                    export { many_1233 as many };
                    const inverse_1233: boolean;
                    export { inverse_1233 as inverse };
                }
                namespace DailyInteractionAsString {
                    const type_1234: string;
                    export { type_1234 as type };
                    const reference_1234: boolean;
                    export { reference_1234 as reference };
                    const many_1234: boolean;
                    export { many_1234 as many };
                    const inverse_1234: boolean;
                    export { inverse_1234 as inverse };
                }
                namespace ImportanceRating {
                    const type_1235: string;
                    export { type_1235 as type };
                    const reference_1235: boolean;
                    export { reference_1235 as reference };
                    const many_1235: boolean;
                    export { many_1235 as many };
                    const inverse_1235: boolean;
                    export { inverse_1235 as inverse };
                }
                namespace ImportanceRatingAsString {
                    const type_1236: string;
                    export { type_1236 as type };
                    const reference_1236: boolean;
                    export { reference_1236 as reference };
                    const many_1236: boolean;
                    export { many_1236 as many };
                    const inverse_1236: boolean;
                    export { inverse_1236 as inverse };
                }
                namespace LocationOfInteraction {
                    const type_1237: string;
                    export { type_1237 as type };
                    const reference_1237: boolean;
                    export { reference_1237 as reference };
                    const many_1237: boolean;
                    export { many_1237 as many };
                    const inverse_1237: boolean;
                    export { inverse_1237 as inverse };
                }
                namespace RelatedSpaceProgram {
                    const type_1238: string;
                    export { type_1238 as type };
                    const reference_1238: boolean;
                    export { reference_1238 as reference };
                    const many_1238: boolean;
                    export { many_1238 as many };
                    const inverse_1238: boolean;
                    export { inverse_1238 as inverse };
                }
                namespace RelatingSpaceProgram {
                    const type_1239: string;
                    export { type_1239 as type };
                    const reference_1239: boolean;
                    export { reference_1239 as reference };
                    const many_1239: boolean;
                    export { many_1239 as many };
                    const inverse_1239: boolean;
                    export { inverse_1239 as inverse };
                }
            }
            export { fields_474 as fields };
        }
        namespace IfcRelNests {
            const domain_475: string;
            export { domain_475 as domain };
            const superclasses_475: string[];
            export { superclasses_475 as superclasses };
            const fields_475: {};
            export { fields_475 as fields };
        }
        namespace IfcRelOccupiesSpaces {
            const domain_476: string;
            export { domain_476 as domain };
            const superclasses_476: string[];
            export { superclasses_476 as superclasses };
            const fields_476: {};
            export { fields_476 as fields };
        }
        namespace IfcRelOverridesProperties {
            const domain_477: string;
            export { domain_477 as domain };
            const superclasses_477: string[];
            export { superclasses_477 as superclasses };
            export namespace fields_477 {
                namespace OverridingProperties {
                    const type_1240: string;
                    export { type_1240 as type };
                    const reference_1240: boolean;
                    export { reference_1240 as reference };
                    const many_1240: boolean;
                    export { many_1240 as many };
                    const inverse_1240: boolean;
                    export { inverse_1240 as inverse };
                }
            }
            export { fields_477 as fields };
        }
        namespace IfcRelProjectsElement {
            const domain_478: string;
            export { domain_478 as domain };
            const superclasses_478: string[];
            export { superclasses_478 as superclasses };
            export namespace fields_478 {
                export namespace RelatingElement_3 {
                    const type_1241: string;
                    export { type_1241 as type };
                    const reference_1241: boolean;
                    export { reference_1241 as reference };
                    const many_1241: boolean;
                    export { many_1241 as many };
                    const inverse_1241: boolean;
                    export { inverse_1241 as inverse };
                }
                export { RelatingElement_3 as RelatingElement };
                export namespace RelatedFeatureElement {
                    const type_1242: string;
                    export { type_1242 as type };
                    const reference_1242: boolean;
                    export { reference_1242 as reference };
                    const many_1242: boolean;
                    export { many_1242 as many };
                    const inverse_1242: boolean;
                    export { inverse_1242 as inverse };
                }
            }
            export { fields_478 as fields };
        }
        namespace IfcRelReferencedInSpatialStructure {
            const domain_479: string;
            export { domain_479 as domain };
            const superclasses_479: string[];
            export { superclasses_479 as superclasses };
            export namespace fields_479 {
                export namespace RelatedElements_1 {
                    const type_1243: string;
                    export { type_1243 as type };
                    const reference_1243: boolean;
                    export { reference_1243 as reference };
                    const many_1243: boolean;
                    export { many_1243 as many };
                    const inverse_1243: boolean;
                    export { inverse_1243 as inverse };
                }
                export { RelatedElements_1 as RelatedElements };
                export namespace RelatingStructure_1 {
                    const type_1244: string;
                    export { type_1244 as type };
                    const reference_1244: boolean;
                    export { reference_1244 as reference };
                    const many_1244: boolean;
                    export { many_1244 as many };
                    const inverse_1244: boolean;
                    export { inverse_1244 as inverse };
                }
                export { RelatingStructure_1 as RelatingStructure };
            }
            export { fields_479 as fields };
        }
        namespace IfcRelSchedulesCostItems {
            const domain_480: string;
            export { domain_480 as domain };
            const superclasses_480: string[];
            export { superclasses_480 as superclasses };
            const fields_480: {};
            export { fields_480 as fields };
        }
        namespace IfcRelSequence {
            const domain_481: string;
            export { domain_481 as domain };
            const superclasses_481: string[];
            export { superclasses_481 as superclasses };
            export namespace fields_481 {
                export namespace RelatingProcess_1 {
                    const type_1245: string;
                    export { type_1245 as type };
                    const reference_1245: boolean;
                    export { reference_1245 as reference };
                    const many_1245: boolean;
                    export { many_1245 as many };
                    const inverse_1245: boolean;
                    export { inverse_1245 as inverse };
                }
                export { RelatingProcess_1 as RelatingProcess };
                export namespace RelatedProcess {
                    const type_1246: string;
                    export { type_1246 as type };
                    const reference_1246: boolean;
                    export { reference_1246 as reference };
                    const many_1246: boolean;
                    export { many_1246 as many };
                    const inverse_1246: boolean;
                    export { inverse_1246 as inverse };
                }
                export namespace TimeLag {
                    const type_1247: string;
                    export { type_1247 as type };
                    const reference_1247: boolean;
                    export { reference_1247 as reference };
                    const many_1247: boolean;
                    export { many_1247 as many };
                    const inverse_1247: boolean;
                    export { inverse_1247 as inverse };
                }
                export namespace TimeLagAsString {
                    const type_1248: string;
                    export { type_1248 as type };
                    const reference_1248: boolean;
                    export { reference_1248 as reference };
                    const many_1248: boolean;
                    export { many_1248 as many };
                    const inverse_1248: boolean;
                    export { inverse_1248 as inverse };
                }
                export namespace SequenceType {
                    const type_1249: string;
                    export { type_1249 as type };
                    const reference_1249: boolean;
                    export { reference_1249 as reference };
                    const many_1249: boolean;
                    export { many_1249 as many };
                    const inverse_1249: boolean;
                    export { inverse_1249 as inverse };
                }
            }
            export { fields_481 as fields };
        }
        namespace IfcRelServicesBuildings {
            const domain_482: string;
            export { domain_482 as domain };
            const superclasses_482: string[];
            export { superclasses_482 as superclasses };
            export namespace fields_482 {
                namespace RelatingSystem {
                    const type_1250: string;
                    export { type_1250 as type };
                    const reference_1250: boolean;
                    export { reference_1250 as reference };
                    const many_1250: boolean;
                    export { many_1250 as many };
                    const inverse_1250: boolean;
                    export { inverse_1250 as inverse };
                }
                namespace RelatedBuildings {
                    const type_1251: string;
                    export { type_1251 as type };
                    const reference_1251: boolean;
                    export { reference_1251 as reference };
                    const many_1251: boolean;
                    export { many_1251 as many };
                    const inverse_1251: boolean;
                    export { inverse_1251 as inverse };
                }
            }
            export { fields_482 as fields };
        }
        namespace IfcRelSpaceBoundary {
            const domain_483: string;
            export { domain_483 as domain };
            const superclasses_483: string[];
            export { superclasses_483 as superclasses };
            export namespace fields_483 {
                export namespace RelatingSpace {
                    const type_1252: string;
                    export { type_1252 as type };
                    const reference_1252: boolean;
                    export { reference_1252 as reference };
                    const many_1252: boolean;
                    export { many_1252 as many };
                    const inverse_1252: boolean;
                    export { inverse_1252 as inverse };
                }
                export namespace RelatedBuildingElement_1 {
                    const type_1253: string;
                    export { type_1253 as type };
                    const reference_1253: boolean;
                    export { reference_1253 as reference };
                    const many_1253: boolean;
                    export { many_1253 as many };
                    const inverse_1253: boolean;
                    export { inverse_1253 as inverse };
                }
                export { RelatedBuildingElement_1 as RelatedBuildingElement };
                export namespace ConnectionGeometry_1 {
                    const type_1254: string;
                    export { type_1254 as type };
                    const reference_1254: boolean;
                    export { reference_1254 as reference };
                    const many_1254: boolean;
                    export { many_1254 as many };
                    const inverse_1254: boolean;
                    export { inverse_1254 as inverse };
                }
                export { ConnectionGeometry_1 as ConnectionGeometry };
                export namespace PhysicalOrVirtualBoundary {
                    const type_1255: string;
                    export { type_1255 as type };
                    const reference_1255: boolean;
                    export { reference_1255 as reference };
                    const many_1255: boolean;
                    export { many_1255 as many };
                    const inverse_1255: boolean;
                    export { inverse_1255 as inverse };
                }
                export namespace InternalOrExternalBoundary {
                    const type_1256: string;
                    export { type_1256 as type };
                    const reference_1256: boolean;
                    export { reference_1256 as reference };
                    const many_1256: boolean;
                    export { many_1256 as many };
                    const inverse_1256: boolean;
                    export { inverse_1256 as inverse };
                }
            }
            export { fields_483 as fields };
        }
        namespace IfcRelVoidsElement {
            const domain_484: string;
            export { domain_484 as domain };
            const superclasses_484: string[];
            export { superclasses_484 as superclasses };
            export namespace fields_484 {
                export namespace RelatingBuildingElement_1 {
                    const type_1257: string;
                    export { type_1257 as type };
                    const reference_1257: boolean;
                    export { reference_1257 as reference };
                    const many_1257: boolean;
                    export { many_1257 as many };
                    const inverse_1257: boolean;
                    export { inverse_1257 as inverse };
                }
                export { RelatingBuildingElement_1 as RelatingBuildingElement };
                export namespace RelatedOpeningElement {
                    const type_1258: string;
                    export { type_1258 as type };
                    const reference_1258: boolean;
                    export { reference_1258 as reference };
                    const many_1258: boolean;
                    export { many_1258 as many };
                    const inverse_1258: boolean;
                    export { inverse_1258 as inverse };
                }
            }
            export { fields_484 as fields };
        }
        namespace IfcRelationship {
            const domain_485: string;
            export { domain_485 as domain };
            const superclasses_485: string[];
            export { superclasses_485 as superclasses };
            const fields_485: {};
            export { fields_485 as fields };
        }
        namespace IfcRelaxation {
            const domain_486: string;
            export { domain_486 as domain };
            const superclasses_486: any[];
            export { superclasses_486 as superclasses };
            export namespace fields_486 {
                namespace RelaxationValue {
                    const type_1259: string;
                    export { type_1259 as type };
                    const reference_1259: boolean;
                    export { reference_1259 as reference };
                    const many_1259: boolean;
                    export { many_1259 as many };
                    const inverse_1259: boolean;
                    export { inverse_1259 as inverse };
                }
                namespace RelaxationValueAsString {
                    const type_1260: string;
                    export { type_1260 as type };
                    const reference_1260: boolean;
                    export { reference_1260 as reference };
                    const many_1260: boolean;
                    export { many_1260 as many };
                    const inverse_1260: boolean;
                    export { inverse_1260 as inverse };
                }
                namespace InitialStress {
                    const type_1261: string;
                    export { type_1261 as type };
                    const reference_1261: boolean;
                    export { reference_1261 as reference };
                    const many_1261: boolean;
                    export { many_1261 as many };
                    const inverse_1261: boolean;
                    export { inverse_1261 as inverse };
                }
                namespace InitialStressAsString {
                    const type_1262: string;
                    export { type_1262 as type };
                    const reference_1262: boolean;
                    export { reference_1262 as reference };
                    const many_1262: boolean;
                    export { many_1262 as many };
                    const inverse_1262: boolean;
                    export { inverse_1262 as inverse };
                }
            }
            export { fields_486 as fields };
        }
        namespace IfcRepresentation {
            const domain_487: string;
            export { domain_487 as domain };
            const superclasses_487: string[];
            export { superclasses_487 as superclasses };
            export namespace fields_487 {
                namespace ContextOfItems {
                    const type_1263: string;
                    export { type_1263 as type };
                    const reference_1263: boolean;
                    export { reference_1263 as reference };
                    const many_1263: boolean;
                    export { many_1263 as many };
                    const inverse_1263: boolean;
                    export { inverse_1263 as inverse };
                }
                namespace RepresentationIdentifier {
                    const type_1264: string;
                    export { type_1264 as type };
                    const reference_1264: boolean;
                    export { reference_1264 as reference };
                    const many_1264: boolean;
                    export { many_1264 as many };
                    const inverse_1264: boolean;
                    export { inverse_1264 as inverse };
                }
                namespace RepresentationType {
                    const type_1265: string;
                    export { type_1265 as type };
                    const reference_1265: boolean;
                    export { reference_1265 as reference };
                    const many_1265: boolean;
                    export { many_1265 as many };
                    const inverse_1265: boolean;
                    export { inverse_1265 as inverse };
                }
                namespace Items {
                    const type_1266: string;
                    export { type_1266 as type };
                    const reference_1266: boolean;
                    export { reference_1266 as reference };
                    const many_1266: boolean;
                    export { many_1266 as many };
                    const inverse_1266: boolean;
                    export { inverse_1266 as inverse };
                }
                namespace RepresentationMap {
                    const type_1267: string;
                    export { type_1267 as type };
                    const reference_1267: boolean;
                    export { reference_1267 as reference };
                    const many_1267: boolean;
                    export { many_1267 as many };
                    const inverse_1267: boolean;
                    export { inverse_1267 as inverse };
                }
                namespace LayerAssignments {
                    const type_1268: string;
                    export { type_1268 as type };
                    const reference_1268: boolean;
                    export { reference_1268 as reference };
                    const many_1268: boolean;
                    export { many_1268 as many };
                    const inverse_1268: boolean;
                    export { inverse_1268 as inverse };
                }
                namespace OfProductRepresentation {
                    const type_1269: string;
                    export { type_1269 as type };
                    const reference_1269: boolean;
                    export { reference_1269 as reference };
                    const many_1269: boolean;
                    export { many_1269 as many };
                    const inverse_1269: boolean;
                    export { inverse_1269 as inverse };
                }
            }
            export { fields_487 as fields };
        }
        namespace IfcRepresentationContext {
            const domain_488: string;
            export { domain_488 as domain };
            const superclasses_488: any[];
            export { superclasses_488 as superclasses };
            export namespace fields_488 {
                namespace ContextIdentifier {
                    const type_1270: string;
                    export { type_1270 as type };
                    const reference_1270: boolean;
                    export { reference_1270 as reference };
                    const many_1270: boolean;
                    export { many_1270 as many };
                    const inverse_1270: boolean;
                    export { inverse_1270 as inverse };
                }
                namespace ContextType {
                    const type_1271: string;
                    export { type_1271 as type };
                    const reference_1271: boolean;
                    export { reference_1271 as reference };
                    const many_1271: boolean;
                    export { many_1271 as many };
                    const inverse_1271: boolean;
                    export { inverse_1271 as inverse };
                }
                namespace RepresentationsInContext {
                    const type_1272: string;
                    export { type_1272 as type };
                    const reference_1272: boolean;
                    export { reference_1272 as reference };
                    const many_1272: boolean;
                    export { many_1272 as many };
                    const inverse_1272: boolean;
                    export { inverse_1272 as inverse };
                }
            }
            export { fields_488 as fields };
        }
        namespace IfcRepresentationItem {
            const domain_489: string;
            export { domain_489 as domain };
            const superclasses_489: string[];
            export { superclasses_489 as superclasses };
            export namespace fields_489 {
                export namespace LayerAssignments_1 {
                    const type_1273: string;
                    export { type_1273 as type };
                    const reference_1273: boolean;
                    export { reference_1273 as reference };
                    const many_1273: boolean;
                    export { many_1273 as many };
                    const inverse_1273: boolean;
                    export { inverse_1273 as inverse };
                }
                export { LayerAssignments_1 as LayerAssignments };
                export namespace StyledByItem {
                    const type_1274: string;
                    export { type_1274 as type };
                    const reference_1274: boolean;
                    export { reference_1274 as reference };
                    const many_1274: boolean;
                    export { many_1274 as many };
                    const inverse_1274: boolean;
                    export { inverse_1274 as inverse };
                }
            }
            export { fields_489 as fields };
        }
        namespace IfcRepresentationMap {
            const domain_490: string;
            export { domain_490 as domain };
            const superclasses_490: any[];
            export { superclasses_490 as superclasses };
            export namespace fields_490 {
                namespace MappingOrigin {
                    const type_1275: string;
                    export { type_1275 as type };
                    const reference_1275: boolean;
                    export { reference_1275 as reference };
                    const many_1275: boolean;
                    export { many_1275 as many };
                    const inverse_1275: boolean;
                    export { inverse_1275 as inverse };
                }
                namespace MappedRepresentation {
                    const type_1276: string;
                    export { type_1276 as type };
                    const reference_1276: boolean;
                    export { reference_1276 as reference };
                    const many_1276: boolean;
                    export { many_1276 as many };
                    const inverse_1276: boolean;
                    export { inverse_1276 as inverse };
                }
                namespace MapUsage {
                    const type_1277: string;
                    export { type_1277 as type };
                    const reference_1277: boolean;
                    export { reference_1277 as reference };
                    const many_1277: boolean;
                    export { many_1277 as many };
                    const inverse_1277: boolean;
                    export { inverse_1277 as inverse };
                }
            }
            export { fields_490 as fields };
        }
        namespace IfcResource {
            const domain_491: string;
            export { domain_491 as domain };
            const superclasses_491: string[];
            export { superclasses_491 as superclasses };
            export namespace fields_491 {
                namespace ResourceOf {
                    const type_1278: string;
                    export { type_1278 as type };
                    const reference_1278: boolean;
                    export { reference_1278 as reference };
                    const many_1278: boolean;
                    export { many_1278 as many };
                    const inverse_1278: boolean;
                    export { inverse_1278 as inverse };
                }
            }
            export { fields_491 as fields };
        }
        namespace IfcRevolvedAreaSolid {
            const domain_492: string;
            export { domain_492 as domain };
            const superclasses_492: string[];
            export { superclasses_492 as superclasses };
            export namespace fields_492 {
                export namespace Axis_2 {
                    const type_1279: string;
                    export { type_1279 as type };
                    const reference_1279: boolean;
                    export { reference_1279 as reference };
                    const many_1279: boolean;
                    export { many_1279 as many };
                    const inverse_1279: boolean;
                    export { inverse_1279 as inverse };
                }
                export { Axis_2 as Axis };
                export namespace Angle {
                    const type_1280: string;
                    export { type_1280 as type };
                    const reference_1280: boolean;
                    export { reference_1280 as reference };
                    const many_1280: boolean;
                    export { many_1280 as many };
                    const inverse_1280: boolean;
                    export { inverse_1280 as inverse };
                }
                export namespace AngleAsString {
                    const type_1281: string;
                    export { type_1281 as type };
                    const reference_1281: boolean;
                    export { reference_1281 as reference };
                    const many_1281: boolean;
                    export { many_1281 as many };
                    const inverse_1281: boolean;
                    export { inverse_1281 as inverse };
                }
            }
            export { fields_492 as fields };
        }
        namespace IfcRibPlateProfileProperties {
            const domain_493: string;
            export { domain_493 as domain };
            const superclasses_493: string[];
            export { superclasses_493 as superclasses };
            export namespace fields_493 {
                export namespace Thickness_2 {
                    const type_1282: string;
                    export { type_1282 as type };
                    const reference_1282: boolean;
                    export { reference_1282 as reference };
                    const many_1282: boolean;
                    export { many_1282 as many };
                    const inverse_1282: boolean;
                    export { inverse_1282 as inverse };
                }
                export { Thickness_2 as Thickness };
                export namespace ThicknessAsString_2 {
                    const type_1283: string;
                    export { type_1283 as type };
                    const reference_1283: boolean;
                    export { reference_1283 as reference };
                    const many_1283: boolean;
                    export { many_1283 as many };
                    const inverse_1283: boolean;
                    export { inverse_1283 as inverse };
                }
                export { ThicknessAsString_2 as ThicknessAsString };
                export namespace RibHeight {
                    const type_1284: string;
                    export { type_1284 as type };
                    const reference_1284: boolean;
                    export { reference_1284 as reference };
                    const many_1284: boolean;
                    export { many_1284 as many };
                    const inverse_1284: boolean;
                    export { inverse_1284 as inverse };
                }
                export namespace RibHeightAsString {
                    const type_1285: string;
                    export { type_1285 as type };
                    const reference_1285: boolean;
                    export { reference_1285 as reference };
                    const many_1285: boolean;
                    export { many_1285 as many };
                    const inverse_1285: boolean;
                    export { inverse_1285 as inverse };
                }
                export namespace RibWidth {
                    const type_1286: string;
                    export { type_1286 as type };
                    const reference_1286: boolean;
                    export { reference_1286 as reference };
                    const many_1286: boolean;
                    export { many_1286 as many };
                    const inverse_1286: boolean;
                    export { inverse_1286 as inverse };
                }
                export namespace RibWidthAsString {
                    const type_1287: string;
                    export { type_1287 as type };
                    const reference_1287: boolean;
                    export { reference_1287 as reference };
                    const many_1287: boolean;
                    export { many_1287 as many };
                    const inverse_1287: boolean;
                    export { inverse_1287 as inverse };
                }
                export namespace RibSpacing {
                    const type_1288: string;
                    export { type_1288 as type };
                    const reference_1288: boolean;
                    export { reference_1288 as reference };
                    const many_1288: boolean;
                    export { many_1288 as many };
                    const inverse_1288: boolean;
                    export { inverse_1288 as inverse };
                }
                export namespace RibSpacingAsString {
                    const type_1289: string;
                    export { type_1289 as type };
                    const reference_1289: boolean;
                    export { reference_1289 as reference };
                    const many_1289: boolean;
                    export { many_1289 as many };
                    const inverse_1289: boolean;
                    export { inverse_1289 as inverse };
                }
                export namespace Direction {
                    const type_1290: string;
                    export { type_1290 as type };
                    const reference_1290: boolean;
                    export { reference_1290 as reference };
                    const many_1290: boolean;
                    export { many_1290 as many };
                    const inverse_1290: boolean;
                    export { inverse_1290 as inverse };
                }
            }
            export { fields_493 as fields };
        }
        namespace IfcRightCircularCone {
            const domain_494: string;
            export { domain_494 as domain };
            const superclasses_494: string[];
            export { superclasses_494 as superclasses };
            export namespace fields_494 {
                export namespace Height_3 {
                    const type_1291: string;
                    export { type_1291 as type };
                    const reference_1291: boolean;
                    export { reference_1291 as reference };
                    const many_1291: boolean;
                    export { many_1291 as many };
                    const inverse_1291: boolean;
                    export { inverse_1291 as inverse };
                }
                export { Height_3 as Height };
                export namespace HeightAsString_2 {
                    const type_1292: string;
                    export { type_1292 as type };
                    const reference_1292: boolean;
                    export { reference_1292 as reference };
                    const many_1292: boolean;
                    export { many_1292 as many };
                    const inverse_1292: boolean;
                    export { inverse_1292 as inverse };
                }
                export { HeightAsString_2 as HeightAsString };
                export namespace BottomRadius {
                    const type_1293: string;
                    export { type_1293 as type };
                    const reference_1293: boolean;
                    export { reference_1293 as reference };
                    const many_1293: boolean;
                    export { many_1293 as many };
                    const inverse_1293: boolean;
                    export { inverse_1293 as inverse };
                }
                export namespace BottomRadiusAsString {
                    const type_1294: string;
                    export { type_1294 as type };
                    const reference_1294: boolean;
                    export { reference_1294 as reference };
                    const many_1294: boolean;
                    export { many_1294 as many };
                    const inverse_1294: boolean;
                    export { inverse_1294 as inverse };
                }
            }
            export { fields_494 as fields };
        }
        namespace IfcRightCircularCylinder {
            const domain_495: string;
            export { domain_495 as domain };
            const superclasses_495: string[];
            export { superclasses_495 as superclasses };
            export namespace fields_495 {
                export namespace Height_4 {
                    const type_1295: string;
                    export { type_1295 as type };
                    const reference_1295: boolean;
                    export { reference_1295 as reference };
                    const many_1295: boolean;
                    export { many_1295 as many };
                    const inverse_1295: boolean;
                    export { inverse_1295 as inverse };
                }
                export { Height_4 as Height };
                export namespace HeightAsString_3 {
                    const type_1296: string;
                    export { type_1296 as type };
                    const reference_1296: boolean;
                    export { reference_1296 as reference };
                    const many_1296: boolean;
                    export { many_1296 as many };
                    const inverse_1296: boolean;
                    export { inverse_1296 as inverse };
                }
                export { HeightAsString_3 as HeightAsString };
                export namespace Radius_5 {
                    const type_1297: string;
                    export { type_1297 as type };
                    const reference_1297: boolean;
                    export { reference_1297 as reference };
                    const many_1297: boolean;
                    export { many_1297 as many };
                    const inverse_1297: boolean;
                    export { inverse_1297 as inverse };
                }
                export { Radius_5 as Radius };
                export namespace RadiusAsString_5 {
                    const type_1298: string;
                    export { type_1298 as type };
                    const reference_1298: boolean;
                    export { reference_1298 as reference };
                    const many_1298: boolean;
                    export { many_1298 as many };
                    const inverse_1298: boolean;
                    export { inverse_1298 as inverse };
                }
                export { RadiusAsString_5 as RadiusAsString };
            }
            export { fields_495 as fields };
        }
        namespace IfcRoof {
            const domain_496: string;
            export { domain_496 as domain };
            const superclasses_496: string[];
            export { superclasses_496 as superclasses };
            export namespace fields_496 {
                export namespace ShapeType_1 {
                    const type_1299: string;
                    export { type_1299 as type };
                    const reference_1299: boolean;
                    export { reference_1299 as reference };
                    const many_1299: boolean;
                    export { many_1299 as many };
                    const inverse_1299: boolean;
                    export { inverse_1299 as inverse };
                }
                export { ShapeType_1 as ShapeType };
            }
            export { fields_496 as fields };
        }
        namespace IfcRoot {
            const domain_497: string;
            export { domain_497 as domain };
            const superclasses_497: any[];
            export { superclasses_497 as superclasses };
            export namespace fields_497 {
                export namespace GlobalId {
                    const type_1300: string;
                    export { type_1300 as type };
                    const reference_1300: boolean;
                    export { reference_1300 as reference };
                    const many_1300: boolean;
                    export { many_1300 as many };
                    const inverse_1300: boolean;
                    export { inverse_1300 as inverse };
                }
                export namespace OwnerHistory {
                    const type_1301: string;
                    export { type_1301 as type };
                    const reference_1301: boolean;
                    export { reference_1301 as reference };
                    const many_1301: boolean;
                    export { many_1301 as many };
                    const inverse_1301: boolean;
                    export { inverse_1301 as inverse };
                }
                export namespace Name_33 {
                    const type_1302: string;
                    export { type_1302 as type };
                    const reference_1302: boolean;
                    export { reference_1302 as reference };
                    const many_1302: boolean;
                    export { many_1302 as many };
                    const inverse_1302: boolean;
                    export { inverse_1302 as inverse };
                }
                export { Name_33 as Name };
                export namespace Description_21 {
                    const type_1303: string;
                    export { type_1303 as type };
                    const reference_1303: boolean;
                    export { reference_1303 as reference };
                    const many_1303: boolean;
                    export { many_1303 as many };
                    const inverse_1303: boolean;
                    export { inverse_1303 as inverse };
                }
                export { Description_21 as Description };
            }
            export { fields_497 as fields };
        }
        namespace IfcRoundedEdgeFeature {
            const domain_498: string;
            export { domain_498 as domain };
            const superclasses_498: string[];
            export { superclasses_498 as superclasses };
            export namespace fields_498 {
                export namespace Radius_6 {
                    const type_1304: string;
                    export { type_1304 as type };
                    const reference_1304: boolean;
                    export { reference_1304 as reference };
                    const many_1304: boolean;
                    export { many_1304 as many };
                    const inverse_1304: boolean;
                    export { inverse_1304 as inverse };
                }
                export { Radius_6 as Radius };
                export namespace RadiusAsString_6 {
                    const type_1305: string;
                    export { type_1305 as type };
                    const reference_1305: boolean;
                    export { reference_1305 as reference };
                    const many_1305: boolean;
                    export { many_1305 as many };
                    const inverse_1305: boolean;
                    export { inverse_1305 as inverse };
                }
                export { RadiusAsString_6 as RadiusAsString };
            }
            export { fields_498 as fields };
        }
        namespace IfcRoundedRectangleProfileDef {
            const domain_499: string;
            export { domain_499 as domain };
            const superclasses_499: string[];
            export { superclasses_499 as superclasses };
            export namespace fields_499 {
                namespace RoundingRadius {
                    const type_1306: string;
                    export { type_1306 as type };
                    const reference_1306: boolean;
                    export { reference_1306 as reference };
                    const many_1306: boolean;
                    export { many_1306 as many };
                    const inverse_1306: boolean;
                    export { inverse_1306 as inverse };
                }
                namespace RoundingRadiusAsString {
                    const type_1307: string;
                    export { type_1307 as type };
                    const reference_1307: boolean;
                    export { reference_1307 as reference };
                    const many_1307: boolean;
                    export { many_1307 as many };
                    const inverse_1307: boolean;
                    export { inverse_1307 as inverse };
                }
            }
            export { fields_499 as fields };
        }
        namespace IfcSIUnit {
            const domain_500: string;
            export { domain_500 as domain };
            const superclasses_500: string[];
            export { superclasses_500 as superclasses };
            export namespace fields_500 {
                export namespace Prefix {
                    const type_1308: string;
                    export { type_1308 as type };
                    const reference_1308: boolean;
                    export { reference_1308 as reference };
                    const many_1308: boolean;
                    export { many_1308 as many };
                    const inverse_1308: boolean;
                    export { inverse_1308 as inverse };
                }
                export namespace Name_34 {
                    const type_1309: string;
                    export { type_1309 as type };
                    const reference_1309: boolean;
                    export { reference_1309 as reference };
                    const many_1309: boolean;
                    export { many_1309 as many };
                    const inverse_1309: boolean;
                    export { inverse_1309 as inverse };
                }
                export { Name_34 as Name };
            }
            export { fields_500 as fields };
        }
        namespace IfcSanitaryTerminalType {
            const domain_501: string;
            export { domain_501 as domain };
            const superclasses_501: string[];
            export { superclasses_501 as superclasses };
            export namespace fields_501 {
                export namespace PredefinedType_64 {
                    const type_1310: string;
                    export { type_1310 as type };
                    const reference_1310: boolean;
                    export { reference_1310 as reference };
                    const many_1310: boolean;
                    export { many_1310 as many };
                    const inverse_1310: boolean;
                    export { inverse_1310 as inverse };
                }
                export { PredefinedType_64 as PredefinedType };
            }
            export { fields_501 as fields };
        }
        namespace IfcScheduleTimeControl {
            const domain_502: string;
            export { domain_502 as domain };
            const superclasses_502: string[];
            export { superclasses_502 as superclasses };
            export namespace fields_502 {
                namespace ActualStart {
                    const type_1311: string;
                    export { type_1311 as type };
                    const reference_1311: boolean;
                    export { reference_1311 as reference };
                    const many_1311: boolean;
                    export { many_1311 as many };
                    const inverse_1311: boolean;
                    export { inverse_1311 as inverse };
                }
                namespace EarlyStart {
                    const type_1312: string;
                    export { type_1312 as type };
                    const reference_1312: boolean;
                    export { reference_1312 as reference };
                    const many_1312: boolean;
                    export { many_1312 as many };
                    const inverse_1312: boolean;
                    export { inverse_1312 as inverse };
                }
                namespace LateStart {
                    const type_1313: string;
                    export { type_1313 as type };
                    const reference_1313: boolean;
                    export { reference_1313 as reference };
                    const many_1313: boolean;
                    export { many_1313 as many };
                    const inverse_1313: boolean;
                    export { inverse_1313 as inverse };
                }
                namespace ScheduleStart {
                    const type_1314: string;
                    export { type_1314 as type };
                    const reference_1314: boolean;
                    export { reference_1314 as reference };
                    const many_1314: boolean;
                    export { many_1314 as many };
                    const inverse_1314: boolean;
                    export { inverse_1314 as inverse };
                }
                namespace ActualFinish {
                    const type_1315: string;
                    export { type_1315 as type };
                    const reference_1315: boolean;
                    export { reference_1315 as reference };
                    const many_1315: boolean;
                    export { many_1315 as many };
                    const inverse_1315: boolean;
                    export { inverse_1315 as inverse };
                }
                namespace EarlyFinish {
                    const type_1316: string;
                    export { type_1316 as type };
                    const reference_1316: boolean;
                    export { reference_1316 as reference };
                    const many_1316: boolean;
                    export { many_1316 as many };
                    const inverse_1316: boolean;
                    export { inverse_1316 as inverse };
                }
                namespace LateFinish {
                    const type_1317: string;
                    export { type_1317 as type };
                    const reference_1317: boolean;
                    export { reference_1317 as reference };
                    const many_1317: boolean;
                    export { many_1317 as many };
                    const inverse_1317: boolean;
                    export { inverse_1317 as inverse };
                }
                namespace ScheduleFinish {
                    const type_1318: string;
                    export { type_1318 as type };
                    const reference_1318: boolean;
                    export { reference_1318 as reference };
                    const many_1318: boolean;
                    export { many_1318 as many };
                    const inverse_1318: boolean;
                    export { inverse_1318 as inverse };
                }
                namespace ScheduleDuration {
                    const type_1319: string;
                    export { type_1319 as type };
                    const reference_1319: boolean;
                    export { reference_1319 as reference };
                    const many_1319: boolean;
                    export { many_1319 as many };
                    const inverse_1319: boolean;
                    export { inverse_1319 as inverse };
                }
                namespace ScheduleDurationAsString {
                    const type_1320: string;
                    export { type_1320 as type };
                    const reference_1320: boolean;
                    export { reference_1320 as reference };
                    const many_1320: boolean;
                    export { many_1320 as many };
                    const inverse_1320: boolean;
                    export { inverse_1320 as inverse };
                }
                namespace ActualDuration {
                    const type_1321: string;
                    export { type_1321 as type };
                    const reference_1321: boolean;
                    export { reference_1321 as reference };
                    const many_1321: boolean;
                    export { many_1321 as many };
                    const inverse_1321: boolean;
                    export { inverse_1321 as inverse };
                }
                namespace ActualDurationAsString {
                    const type_1322: string;
                    export { type_1322 as type };
                    const reference_1322: boolean;
                    export { reference_1322 as reference };
                    const many_1322: boolean;
                    export { many_1322 as many };
                    const inverse_1322: boolean;
                    export { inverse_1322 as inverse };
                }
                namespace RemainingTime {
                    const type_1323: string;
                    export { type_1323 as type };
                    const reference_1323: boolean;
                    export { reference_1323 as reference };
                    const many_1323: boolean;
                    export { many_1323 as many };
                    const inverse_1323: boolean;
                    export { inverse_1323 as inverse };
                }
                namespace RemainingTimeAsString {
                    const type_1324: string;
                    export { type_1324 as type };
                    const reference_1324: boolean;
                    export { reference_1324 as reference };
                    const many_1324: boolean;
                    export { many_1324 as many };
                    const inverse_1324: boolean;
                    export { inverse_1324 as inverse };
                }
                namespace FreeFloat {
                    const type_1325: string;
                    export { type_1325 as type };
                    const reference_1325: boolean;
                    export { reference_1325 as reference };
                    const many_1325: boolean;
                    export { many_1325 as many };
                    const inverse_1325: boolean;
                    export { inverse_1325 as inverse };
                }
                namespace FreeFloatAsString {
                    const type_1326: string;
                    export { type_1326 as type };
                    const reference_1326: boolean;
                    export { reference_1326 as reference };
                    const many_1326: boolean;
                    export { many_1326 as many };
                    const inverse_1326: boolean;
                    export { inverse_1326 as inverse };
                }
                namespace TotalFloat {
                    const type_1327: string;
                    export { type_1327 as type };
                    const reference_1327: boolean;
                    export { reference_1327 as reference };
                    const many_1327: boolean;
                    export { many_1327 as many };
                    const inverse_1327: boolean;
                    export { inverse_1327 as inverse };
                }
                namespace TotalFloatAsString {
                    const type_1328: string;
                    export { type_1328 as type };
                    const reference_1328: boolean;
                    export { reference_1328 as reference };
                    const many_1328: boolean;
                    export { many_1328 as many };
                    const inverse_1328: boolean;
                    export { inverse_1328 as inverse };
                }
                namespace IsCritical {
                    const type_1329: string;
                    export { type_1329 as type };
                    const reference_1329: boolean;
                    export { reference_1329 as reference };
                    const many_1329: boolean;
                    export { many_1329 as many };
                    const inverse_1329: boolean;
                    export { inverse_1329 as inverse };
                }
                namespace StatusTime {
                    const type_1330: string;
                    export { type_1330 as type };
                    const reference_1330: boolean;
                    export { reference_1330 as reference };
                    const many_1330: boolean;
                    export { many_1330 as many };
                    const inverse_1330: boolean;
                    export { inverse_1330 as inverse };
                }
                namespace StartFloat {
                    const type_1331: string;
                    export { type_1331 as type };
                    const reference_1331: boolean;
                    export { reference_1331 as reference };
                    const many_1331: boolean;
                    export { many_1331 as many };
                    const inverse_1331: boolean;
                    export { inverse_1331 as inverse };
                }
                namespace StartFloatAsString {
                    const type_1332: string;
                    export { type_1332 as type };
                    const reference_1332: boolean;
                    export { reference_1332 as reference };
                    const many_1332: boolean;
                    export { many_1332 as many };
                    const inverse_1332: boolean;
                    export { inverse_1332 as inverse };
                }
                namespace FinishFloat {
                    const type_1333: string;
                    export { type_1333 as type };
                    const reference_1333: boolean;
                    export { reference_1333 as reference };
                    const many_1333: boolean;
                    export { many_1333 as many };
                    const inverse_1333: boolean;
                    export { inverse_1333 as inverse };
                }
                namespace FinishFloatAsString {
                    const type_1334: string;
                    export { type_1334 as type };
                    const reference_1334: boolean;
                    export { reference_1334 as reference };
                    const many_1334: boolean;
                    export { many_1334 as many };
                    const inverse_1334: boolean;
                    export { inverse_1334 as inverse };
                }
                namespace Completion {
                    const type_1335: string;
                    export { type_1335 as type };
                    const reference_1335: boolean;
                    export { reference_1335 as reference };
                    const many_1335: boolean;
                    export { many_1335 as many };
                    const inverse_1335: boolean;
                    export { inverse_1335 as inverse };
                }
                namespace CompletionAsString {
                    const type_1336: string;
                    export { type_1336 as type };
                    const reference_1336: boolean;
                    export { reference_1336 as reference };
                    const many_1336: boolean;
                    export { many_1336 as many };
                    const inverse_1336: boolean;
                    export { inverse_1336 as inverse };
                }
                namespace ScheduleTimeControlAssigned {
                    const type_1337: string;
                    export { type_1337 as type };
                    const reference_1337: boolean;
                    export { reference_1337 as reference };
                    const many_1337: boolean;
                    export { many_1337 as many };
                    const inverse_1337: boolean;
                    export { inverse_1337 as inverse };
                }
            }
            export { fields_502 as fields };
        }
        namespace IfcSectionProperties {
            const domain_503: string;
            export { domain_503 as domain };
            const superclasses_503: any[];
            export { superclasses_503 as superclasses };
            export namespace fields_503 {
                namespace SectionType {
                    const type_1338: string;
                    export { type_1338 as type };
                    const reference_1338: boolean;
                    export { reference_1338 as reference };
                    const many_1338: boolean;
                    export { many_1338 as many };
                    const inverse_1338: boolean;
                    export { inverse_1338 as inverse };
                }
                namespace StartProfile {
                    const type_1339: string;
                    export { type_1339 as type };
                    const reference_1339: boolean;
                    export { reference_1339 as reference };
                    const many_1339: boolean;
                    export { many_1339 as many };
                    const inverse_1339: boolean;
                    export { inverse_1339 as inverse };
                }
                namespace EndProfile {
                    const type_1340: string;
                    export { type_1340 as type };
                    const reference_1340: boolean;
                    export { reference_1340 as reference };
                    const many_1340: boolean;
                    export { many_1340 as many };
                    const inverse_1340: boolean;
                    export { inverse_1340 as inverse };
                }
            }
            export { fields_503 as fields };
        }
        namespace IfcSectionReinforcementProperties {
            const domain_504: string;
            export { domain_504 as domain };
            const superclasses_504: any[];
            export { superclasses_504 as superclasses };
            export namespace fields_504 {
                namespace LongitudinalStartPosition {
                    const type_1341: string;
                    export { type_1341 as type };
                    const reference_1341: boolean;
                    export { reference_1341 as reference };
                    const many_1341: boolean;
                    export { many_1341 as many };
                    const inverse_1341: boolean;
                    export { inverse_1341 as inverse };
                }
                namespace LongitudinalStartPositionAsString {
                    const type_1342: string;
                    export { type_1342 as type };
                    const reference_1342: boolean;
                    export { reference_1342 as reference };
                    const many_1342: boolean;
                    export { many_1342 as many };
                    const inverse_1342: boolean;
                    export { inverse_1342 as inverse };
                }
                namespace LongitudinalEndPosition {
                    const type_1343: string;
                    export { type_1343 as type };
                    const reference_1343: boolean;
                    export { reference_1343 as reference };
                    const many_1343: boolean;
                    export { many_1343 as many };
                    const inverse_1343: boolean;
                    export { inverse_1343 as inverse };
                }
                namespace LongitudinalEndPositionAsString {
                    const type_1344: string;
                    export { type_1344 as type };
                    const reference_1344: boolean;
                    export { reference_1344 as reference };
                    const many_1344: boolean;
                    export { many_1344 as many };
                    const inverse_1344: boolean;
                    export { inverse_1344 as inverse };
                }
                namespace TransversePosition {
                    const type_1345: string;
                    export { type_1345 as type };
                    const reference_1345: boolean;
                    export { reference_1345 as reference };
                    const many_1345: boolean;
                    export { many_1345 as many };
                    const inverse_1345: boolean;
                    export { inverse_1345 as inverse };
                }
                namespace TransversePositionAsString {
                    const type_1346: string;
                    export { type_1346 as type };
                    const reference_1346: boolean;
                    export { reference_1346 as reference };
                    const many_1346: boolean;
                    export { many_1346 as many };
                    const inverse_1346: boolean;
                    export { inverse_1346 as inverse };
                }
                namespace ReinforcementRole {
                    const type_1347: string;
                    export { type_1347 as type };
                    const reference_1347: boolean;
                    export { reference_1347 as reference };
                    const many_1347: boolean;
                    export { many_1347 as many };
                    const inverse_1347: boolean;
                    export { inverse_1347 as inverse };
                }
                namespace SectionDefinition {
                    const type_1348: string;
                    export { type_1348 as type };
                    const reference_1348: boolean;
                    export { reference_1348 as reference };
                    const many_1348: boolean;
                    export { many_1348 as many };
                    const inverse_1348: boolean;
                    export { inverse_1348 as inverse };
                }
                namespace CrossSectionReinforcementDefinitions {
                    const type_1349: string;
                    export { type_1349 as type };
                    const reference_1349: boolean;
                    export { reference_1349 as reference };
                    const many_1349: boolean;
                    export { many_1349 as many };
                    const inverse_1349: boolean;
                    export { inverse_1349 as inverse };
                }
            }
            export { fields_504 as fields };
        }
        namespace IfcSectionedSpine {
            const domain_505: string;
            export { domain_505 as domain };
            const superclasses_505: string[];
            export { superclasses_505 as superclasses };
            export namespace fields_505 {
                export namespace SpineCurve {
                    const type_1350: string;
                    export { type_1350 as type };
                    const reference_1350: boolean;
                    export { reference_1350 as reference };
                    const many_1350: boolean;
                    export { many_1350 as many };
                    const inverse_1350: boolean;
                    export { inverse_1350 as inverse };
                }
                export namespace CrossSections {
                    const type_1351: string;
                    export { type_1351 as type };
                    const reference_1351: boolean;
                    export { reference_1351 as reference };
                    const many_1351: boolean;
                    export { many_1351 as many };
                    const inverse_1351: boolean;
                    export { inverse_1351 as inverse };
                }
                export namespace CrossSectionPositions {
                    const type_1352: string;
                    export { type_1352 as type };
                    const reference_1352: boolean;
                    export { reference_1352 as reference };
                    const many_1352: boolean;
                    export { many_1352 as many };
                    const inverse_1352: boolean;
                    export { inverse_1352 as inverse };
                }
                export namespace Dim_17 {
                    const type_1353: string;
                    export { type_1353 as type };
                    const reference_1353: boolean;
                    export { reference_1353 as reference };
                    const many_1353: boolean;
                    export { many_1353 as many };
                    const inverse_1353: boolean;
                    export { inverse_1353 as inverse };
                }
                export { Dim_17 as Dim };
            }
            export { fields_505 as fields };
        }
        namespace IfcSensorType {
            const domain_506: string;
            export { domain_506 as domain };
            const superclasses_506: string[];
            export { superclasses_506 as superclasses };
            export namespace fields_506 {
                export namespace PredefinedType_65 {
                    const type_1354: string;
                    export { type_1354 as type };
                    const reference_1354: boolean;
                    export { reference_1354 as reference };
                    const many_1354: boolean;
                    export { many_1354 as many };
                    const inverse_1354: boolean;
                    export { inverse_1354 as inverse };
                }
                export { PredefinedType_65 as PredefinedType };
            }
            export { fields_506 as fields };
        }
        namespace IfcServiceLife {
            const domain_507: string;
            export { domain_507 as domain };
            const superclasses_507: string[];
            export { superclasses_507 as superclasses };
            export namespace fields_507 {
                namespace ServiceLifeType {
                    const type_1355: string;
                    export { type_1355 as type };
                    const reference_1355: boolean;
                    export { reference_1355 as reference };
                    const many_1355: boolean;
                    export { many_1355 as many };
                    const inverse_1355: boolean;
                    export { inverse_1355 as inverse };
                }
                namespace ServiceLifeDuration {
                    const type_1356: string;
                    export { type_1356 as type };
                    const reference_1356: boolean;
                    export { reference_1356 as reference };
                    const many_1356: boolean;
                    export { many_1356 as many };
                    const inverse_1356: boolean;
                    export { inverse_1356 as inverse };
                }
                namespace ServiceLifeDurationAsString {
                    const type_1357: string;
                    export { type_1357 as type };
                    const reference_1357: boolean;
                    export { reference_1357 as reference };
                    const many_1357: boolean;
                    export { many_1357 as many };
                    const inverse_1357: boolean;
                    export { inverse_1357 as inverse };
                }
            }
            export { fields_507 as fields };
        }
        namespace IfcServiceLifeFactor {
            const domain_508: string;
            export { domain_508 as domain };
            const superclasses_508: string[];
            export { superclasses_508 as superclasses };
            export namespace fields_508 {
                export namespace PredefinedType_66 {
                    const type_1358: string;
                    export { type_1358 as type };
                    const reference_1358: boolean;
                    export { reference_1358 as reference };
                    const many_1358: boolean;
                    export { many_1358 as many };
                    const inverse_1358: boolean;
                    export { inverse_1358 as inverse };
                }
                export { PredefinedType_66 as PredefinedType };
                export namespace UpperValue {
                    const type_1359: string;
                    export { type_1359 as type };
                    const reference_1359: boolean;
                    export { reference_1359 as reference };
                    const many_1359: boolean;
                    export { many_1359 as many };
                    const inverse_1359: boolean;
                    export { inverse_1359 as inverse };
                }
                export namespace MostUsedValue {
                    const type_1360: string;
                    export { type_1360 as type };
                    const reference_1360: boolean;
                    export { reference_1360 as reference };
                    const many_1360: boolean;
                    export { many_1360 as many };
                    const inverse_1360: boolean;
                    export { inverse_1360 as inverse };
                }
                export namespace LowerValue {
                    const type_1361: string;
                    export { type_1361 as type };
                    const reference_1361: boolean;
                    export { reference_1361 as reference };
                    const many_1361: boolean;
                    export { many_1361 as many };
                    const inverse_1361: boolean;
                    export { inverse_1361 as inverse };
                }
            }
            export { fields_508 as fields };
        }
        namespace IfcShapeAspect {
            const domain_509: string;
            export { domain_509 as domain };
            const superclasses_509: any[];
            export { superclasses_509 as superclasses };
            export namespace fields_509 {
                export namespace ShapeRepresentations {
                    const type_1362: string;
                    export { type_1362 as type };
                    const reference_1362: boolean;
                    export { reference_1362 as reference };
                    const many_1362: boolean;
                    export { many_1362 as many };
                    const inverse_1362: boolean;
                    export { inverse_1362 as inverse };
                }
                export namespace Name_35 {
                    const type_1363: string;
                    export { type_1363 as type };
                    const reference_1363: boolean;
                    export { reference_1363 as reference };
                    const many_1363: boolean;
                    export { many_1363 as many };
                    const inverse_1363: boolean;
                    export { inverse_1363 as inverse };
                }
                export { Name_35 as Name };
                export namespace Description_22 {
                    const type_1364: string;
                    export { type_1364 as type };
                    const reference_1364: boolean;
                    export { reference_1364 as reference };
                    const many_1364: boolean;
                    export { many_1364 as many };
                    const inverse_1364: boolean;
                    export { inverse_1364 as inverse };
                }
                export { Description_22 as Description };
                export namespace ProductDefinitional {
                    const type_1365: string;
                    export { type_1365 as type };
                    const reference_1365: boolean;
                    export { reference_1365 as reference };
                    const many_1365: boolean;
                    export { many_1365 as many };
                    const inverse_1365: boolean;
                    export { inverse_1365 as inverse };
                }
                export namespace PartOfProductDefinitionShape {
                    const type_1366: string;
                    export { type_1366 as type };
                    const reference_1366: boolean;
                    export { reference_1366 as reference };
                    const many_1366: boolean;
                    export { many_1366 as many };
                    const inverse_1366: boolean;
                    export { inverse_1366 as inverse };
                }
            }
            export { fields_509 as fields };
        }
        namespace IfcShapeModel {
            const domain_510: string;
            export { domain_510 as domain };
            const superclasses_510: string[];
            export { superclasses_510 as superclasses };
            export namespace fields_510 {
                namespace OfShapeAspect {
                    const type_1367: string;
                    export { type_1367 as type };
                    const reference_1367: boolean;
                    export { reference_1367 as reference };
                    const many_1367: boolean;
                    export { many_1367 as many };
                    const inverse_1367: boolean;
                    export { inverse_1367 as inverse };
                }
            }
            export { fields_510 as fields };
        }
        namespace IfcShapeRepresentation {
            const domain_511: string;
            export { domain_511 as domain };
            const superclasses_511: string[];
            export { superclasses_511 as superclasses };
            const fields_511: {};
            export { fields_511 as fields };
        }
        namespace IfcShellBasedSurfaceModel {
            const domain_512: string;
            export { domain_512 as domain };
            const superclasses_512: string[];
            export { superclasses_512 as superclasses };
            export namespace fields_512 {
                export namespace SbsmBoundary {
                    const type_1368: string;
                    export { type_1368 as type };
                    const reference_1368: boolean;
                    export { reference_1368 as reference };
                    const many_1368: boolean;
                    export { many_1368 as many };
                    const inverse_1368: boolean;
                    export { inverse_1368 as inverse };
                }
                export namespace Dim_18 {
                    const type_1369: string;
                    export { type_1369 as type };
                    const reference_1369: boolean;
                    export { reference_1369 as reference };
                    const many_1369: boolean;
                    export { many_1369 as many };
                    const inverse_1369: boolean;
                    export { inverse_1369 as inverse };
                }
                export { Dim_18 as Dim };
            }
            export { fields_512 as fields };
        }
        namespace IfcSimpleProperty {
            const domain_513: string;
            export { domain_513 as domain };
            const superclasses_513: string[];
            export { superclasses_513 as superclasses };
            const fields_513: {};
            export { fields_513 as fields };
        }
        namespace IfcSite {
            const domain_514: string;
            export { domain_514 as domain };
            const superclasses_514: string[];
            export { superclasses_514 as superclasses };
            export namespace fields_514 {
                namespace RefLatitude {
                    const type_1370: string;
                    export { type_1370 as type };
                    const reference_1370: boolean;
                    export { reference_1370 as reference };
                    const many_1370: boolean;
                    export { many_1370 as many };
                    const inverse_1370: boolean;
                    export { inverse_1370 as inverse };
                }
                namespace RefLongitude {
                    const type_1371: string;
                    export { type_1371 as type };
                    const reference_1371: boolean;
                    export { reference_1371 as reference };
                    const many_1371: boolean;
                    export { many_1371 as many };
                    const inverse_1371: boolean;
                    export { inverse_1371 as inverse };
                }
                namespace RefElevation {
                    const type_1372: string;
                    export { type_1372 as type };
                    const reference_1372: boolean;
                    export { reference_1372 as reference };
                    const many_1372: boolean;
                    export { many_1372 as many };
                    const inverse_1372: boolean;
                    export { inverse_1372 as inverse };
                }
                namespace RefElevationAsString {
                    const type_1373: string;
                    export { type_1373 as type };
                    const reference_1373: boolean;
                    export { reference_1373 as reference };
                    const many_1373: boolean;
                    export { many_1373 as many };
                    const inverse_1373: boolean;
                    export { inverse_1373 as inverse };
                }
                namespace LandTitleNumber {
                    const type_1374: string;
                    export { type_1374 as type };
                    const reference_1374: boolean;
                    export { reference_1374 as reference };
                    const many_1374: boolean;
                    export { many_1374 as many };
                    const inverse_1374: boolean;
                    export { inverse_1374 as inverse };
                }
                namespace SiteAddress {
                    const type_1375: string;
                    export { type_1375 as type };
                    const reference_1375: boolean;
                    export { reference_1375 as reference };
                    const many_1375: boolean;
                    export { many_1375 as many };
                    const inverse_1375: boolean;
                    export { inverse_1375 as inverse };
                }
            }
            export { fields_514 as fields };
        }
        namespace IfcSlab {
            const domain_515: string;
            export { domain_515 as domain };
            const superclasses_515: string[];
            export { superclasses_515 as superclasses };
            export namespace fields_515 {
                export namespace PredefinedType_67 {
                    const type_1376: string;
                    export { type_1376 as type };
                    const reference_1376: boolean;
                    export { reference_1376 as reference };
                    const many_1376: boolean;
                    export { many_1376 as many };
                    const inverse_1376: boolean;
                    export { inverse_1376 as inverse };
                }
                export { PredefinedType_67 as PredefinedType };
            }
            export { fields_515 as fields };
        }
        namespace IfcSlabType {
            const domain_516: string;
            export { domain_516 as domain };
            const superclasses_516: string[];
            export { superclasses_516 as superclasses };
            export namespace fields_516 {
                export namespace PredefinedType_68 {
                    const type_1377: string;
                    export { type_1377 as type };
                    const reference_1377: boolean;
                    export { reference_1377 as reference };
                    const many_1377: boolean;
                    export { many_1377 as many };
                    const inverse_1377: boolean;
                    export { inverse_1377 as inverse };
                }
                export { PredefinedType_68 as PredefinedType };
            }
            export { fields_516 as fields };
        }
        namespace IfcSlippageConnectionCondition {
            const domain_517: string;
            export { domain_517 as domain };
            const superclasses_517: string[];
            export { superclasses_517 as superclasses };
            export namespace fields_517 {
                namespace SlippageX {
                    const type_1378: string;
                    export { type_1378 as type };
                    const reference_1378: boolean;
                    export { reference_1378 as reference };
                    const many_1378: boolean;
                    export { many_1378 as many };
                    const inverse_1378: boolean;
                    export { inverse_1378 as inverse };
                }
                namespace SlippageXAsString {
                    const type_1379: string;
                    export { type_1379 as type };
                    const reference_1379: boolean;
                    export { reference_1379 as reference };
                    const many_1379: boolean;
                    export { many_1379 as many };
                    const inverse_1379: boolean;
                    export { inverse_1379 as inverse };
                }
                namespace SlippageY {
                    const type_1380: string;
                    export { type_1380 as type };
                    const reference_1380: boolean;
                    export { reference_1380 as reference };
                    const many_1380: boolean;
                    export { many_1380 as many };
                    const inverse_1380: boolean;
                    export { inverse_1380 as inverse };
                }
                namespace SlippageYAsString {
                    const type_1381: string;
                    export { type_1381 as type };
                    const reference_1381: boolean;
                    export { reference_1381 as reference };
                    const many_1381: boolean;
                    export { many_1381 as many };
                    const inverse_1381: boolean;
                    export { inverse_1381 as inverse };
                }
                namespace SlippageZ {
                    const type_1382: string;
                    export { type_1382 as type };
                    const reference_1382: boolean;
                    export { reference_1382 as reference };
                    const many_1382: boolean;
                    export { many_1382 as many };
                    const inverse_1382: boolean;
                    export { inverse_1382 as inverse };
                }
                namespace SlippageZAsString {
                    const type_1383: string;
                    export { type_1383 as type };
                    const reference_1383: boolean;
                    export { reference_1383 as reference };
                    const many_1383: boolean;
                    export { many_1383 as many };
                    const inverse_1383: boolean;
                    export { inverse_1383 as inverse };
                }
            }
            export { fields_517 as fields };
        }
        namespace IfcSolidModel {
            const domain_518: string;
            export { domain_518 as domain };
            const superclasses_518: string[];
            export { superclasses_518 as superclasses };
            export namespace fields_518 {
                export namespace Dim_19 {
                    const type_1384: string;
                    export { type_1384 as type };
                    const reference_1384: boolean;
                    export { reference_1384 as reference };
                    const many_1384: boolean;
                    export { many_1384 as many };
                    const inverse_1384: boolean;
                    export { inverse_1384 as inverse };
                }
                export { Dim_19 as Dim };
            }
            export { fields_518 as fields };
        }
        namespace IfcSoundProperties {
            const domain_519: string;
            export { domain_519 as domain };
            const superclasses_519: string[];
            export { superclasses_519 as superclasses };
            export namespace fields_519 {
                namespace IsAttenuating {
                    const type_1385: string;
                    export { type_1385 as type };
                    const reference_1385: boolean;
                    export { reference_1385 as reference };
                    const many_1385: boolean;
                    export { many_1385 as many };
                    const inverse_1385: boolean;
                    export { inverse_1385 as inverse };
                }
                namespace SoundScale {
                    const type_1386: string;
                    export { type_1386 as type };
                    const reference_1386: boolean;
                    export { reference_1386 as reference };
                    const many_1386: boolean;
                    export { many_1386 as many };
                    const inverse_1386: boolean;
                    export { inverse_1386 as inverse };
                }
                namespace SoundValues {
                    const type_1387: string;
                    export { type_1387 as type };
                    const reference_1387: boolean;
                    export { reference_1387 as reference };
                    const many_1387: boolean;
                    export { many_1387 as many };
                    const inverse_1387: boolean;
                    export { inverse_1387 as inverse };
                }
            }
            export { fields_519 as fields };
        }
        namespace IfcSoundValue {
            const domain_520: string;
            export { domain_520 as domain };
            const superclasses_520: string[];
            export { superclasses_520 as superclasses };
            export namespace fields_520 {
                namespace SoundLevelTimeSeries {
                    const type_1388: string;
                    export { type_1388 as type };
                    const reference_1388: boolean;
                    export { reference_1388 as reference };
                    const many_1388: boolean;
                    export { many_1388 as many };
                    const inverse_1388: boolean;
                    export { inverse_1388 as inverse };
                }
                namespace Frequency {
                    const type_1389: string;
                    export { type_1389 as type };
                    const reference_1389: boolean;
                    export { reference_1389 as reference };
                    const many_1389: boolean;
                    export { many_1389 as many };
                    const inverse_1389: boolean;
                    export { inverse_1389 as inverse };
                }
                namespace FrequencyAsString {
                    const type_1390: string;
                    export { type_1390 as type };
                    const reference_1390: boolean;
                    export { reference_1390 as reference };
                    const many_1390: boolean;
                    export { many_1390 as many };
                    const inverse_1390: boolean;
                    export { inverse_1390 as inverse };
                }
                namespace SoundLevelSingleValue {
                    const type_1391: string;
                    export { type_1391 as type };
                    const reference_1391: boolean;
                    export { reference_1391 as reference };
                    const many_1391: boolean;
                    export { many_1391 as many };
                    const inverse_1391: boolean;
                    export { inverse_1391 as inverse };
                }
            }
            export { fields_520 as fields };
        }
        namespace IfcSpace {
            const domain_521: string;
            export { domain_521 as domain };
            const superclasses_521: string[];
            export { superclasses_521 as superclasses };
            export namespace fields_521 {
                export namespace InteriorOrExteriorSpace {
                    const type_1392: string;
                    export { type_1392 as type };
                    const reference_1392: boolean;
                    export { reference_1392 as reference };
                    const many_1392: boolean;
                    export { many_1392 as many };
                    const inverse_1392: boolean;
                    export { inverse_1392 as inverse };
                }
                export namespace ElevationWithFlooring {
                    const type_1393: string;
                    export { type_1393 as type };
                    const reference_1393: boolean;
                    export { reference_1393 as reference };
                    const many_1393: boolean;
                    export { many_1393 as many };
                    const inverse_1393: boolean;
                    export { inverse_1393 as inverse };
                }
                export namespace ElevationWithFlooringAsString {
                    const type_1394: string;
                    export { type_1394 as type };
                    const reference_1394: boolean;
                    export { reference_1394 as reference };
                    const many_1394: boolean;
                    export { many_1394 as many };
                    const inverse_1394: boolean;
                    export { inverse_1394 as inverse };
                }
                export namespace HasCoverings_1 {
                    const type_1395: string;
                    export { type_1395 as type };
                    const reference_1395: boolean;
                    export { reference_1395 as reference };
                    const many_1395: boolean;
                    export { many_1395 as many };
                    const inverse_1395: boolean;
                    export { inverse_1395 as inverse };
                }
                export { HasCoverings_1 as HasCoverings };
                export namespace BoundedBy {
                    const type_1396: string;
                    export { type_1396 as type };
                    const reference_1396: boolean;
                    export { reference_1396 as reference };
                    const many_1396: boolean;
                    export { many_1396 as many };
                    const inverse_1396: boolean;
                    export { inverse_1396 as inverse };
                }
            }
            export { fields_521 as fields };
        }
        namespace IfcSpaceHeaterType {
            const domain_522: string;
            export { domain_522 as domain };
            const superclasses_522: string[];
            export { superclasses_522 as superclasses };
            export namespace fields_522 {
                export namespace PredefinedType_69 {
                    const type_1397: string;
                    export { type_1397 as type };
                    const reference_1397: boolean;
                    export { reference_1397 as reference };
                    const many_1397: boolean;
                    export { many_1397 as many };
                    const inverse_1397: boolean;
                    export { inverse_1397 as inverse };
                }
                export { PredefinedType_69 as PredefinedType };
            }
            export { fields_522 as fields };
        }
        namespace IfcSpaceProgram {
            const domain_523: string;
            export { domain_523 as domain };
            const superclasses_523: string[];
            export { superclasses_523 as superclasses };
            export namespace fields_523 {
                namespace SpaceProgramIdentifier {
                    const type_1398: string;
                    export { type_1398 as type };
                    const reference_1398: boolean;
                    export { reference_1398 as reference };
                    const many_1398: boolean;
                    export { many_1398 as many };
                    const inverse_1398: boolean;
                    export { inverse_1398 as inverse };
                }
                namespace MaxRequiredArea {
                    const type_1399: string;
                    export { type_1399 as type };
                    const reference_1399: boolean;
                    export { reference_1399 as reference };
                    const many_1399: boolean;
                    export { many_1399 as many };
                    const inverse_1399: boolean;
                    export { inverse_1399 as inverse };
                }
                namespace MaxRequiredAreaAsString {
                    const type_1400: string;
                    export { type_1400 as type };
                    const reference_1400: boolean;
                    export { reference_1400 as reference };
                    const many_1400: boolean;
                    export { many_1400 as many };
                    const inverse_1400: boolean;
                    export { inverse_1400 as inverse };
                }
                namespace MinRequiredArea {
                    const type_1401: string;
                    export { type_1401 as type };
                    const reference_1401: boolean;
                    export { reference_1401 as reference };
                    const many_1401: boolean;
                    export { many_1401 as many };
                    const inverse_1401: boolean;
                    export { inverse_1401 as inverse };
                }
                namespace MinRequiredAreaAsString {
                    const type_1402: string;
                    export { type_1402 as type };
                    const reference_1402: boolean;
                    export { reference_1402 as reference };
                    const many_1402: boolean;
                    export { many_1402 as many };
                    const inverse_1402: boolean;
                    export { inverse_1402 as inverse };
                }
                namespace RequestedLocation {
                    const type_1403: string;
                    export { type_1403 as type };
                    const reference_1403: boolean;
                    export { reference_1403 as reference };
                    const many_1403: boolean;
                    export { many_1403 as many };
                    const inverse_1403: boolean;
                    export { inverse_1403 as inverse };
                }
                namespace StandardRequiredArea {
                    const type_1404: string;
                    export { type_1404 as type };
                    const reference_1404: boolean;
                    export { reference_1404 as reference };
                    const many_1404: boolean;
                    export { many_1404 as many };
                    const inverse_1404: boolean;
                    export { inverse_1404 as inverse };
                }
                namespace StandardRequiredAreaAsString {
                    const type_1405: string;
                    export { type_1405 as type };
                    const reference_1405: boolean;
                    export { reference_1405 as reference };
                    const many_1405: boolean;
                    export { many_1405 as many };
                    const inverse_1405: boolean;
                    export { inverse_1405 as inverse };
                }
                namespace HasInteractionReqsFrom {
                    const type_1406: string;
                    export { type_1406 as type };
                    const reference_1406: boolean;
                    export { reference_1406 as reference };
                    const many_1406: boolean;
                    export { many_1406 as many };
                    const inverse_1406: boolean;
                    export { inverse_1406 as inverse };
                }
                namespace HasInteractionReqsTo {
                    const type_1407: string;
                    export { type_1407 as type };
                    const reference_1407: boolean;
                    export { reference_1407 as reference };
                    const many_1407: boolean;
                    export { many_1407 as many };
                    const inverse_1407: boolean;
                    export { inverse_1407 as inverse };
                }
            }
            export { fields_523 as fields };
        }
        namespace IfcSpaceThermalLoadProperties {
            const domain_524: string;
            export { domain_524 as domain };
            const superclasses_524: string[];
            export { superclasses_524 as superclasses };
            export namespace fields_524 {
                export namespace ApplicableValueRatio {
                    const type_1408: string;
                    export { type_1408 as type };
                    const reference_1408: boolean;
                    export { reference_1408 as reference };
                    const many_1408: boolean;
                    export { many_1408 as many };
                    const inverse_1408: boolean;
                    export { inverse_1408 as inverse };
                }
                export namespace ApplicableValueRatioAsString {
                    const type_1409: string;
                    export { type_1409 as type };
                    const reference_1409: boolean;
                    export { reference_1409 as reference };
                    const many_1409: boolean;
                    export { many_1409 as many };
                    const inverse_1409: boolean;
                    export { inverse_1409 as inverse };
                }
                export namespace ThermalLoadSource {
                    const type_1410: string;
                    export { type_1410 as type };
                    const reference_1410: boolean;
                    export { reference_1410 as reference };
                    const many_1410: boolean;
                    export { many_1410 as many };
                    const inverse_1410: boolean;
                    export { inverse_1410 as inverse };
                }
                export namespace PropertySource_1 {
                    const type_1411: string;
                    export { type_1411 as type };
                    const reference_1411: boolean;
                    export { reference_1411 as reference };
                    const many_1411: boolean;
                    export { many_1411 as many };
                    const inverse_1411: boolean;
                    export { inverse_1411 as inverse };
                }
                export { PropertySource_1 as PropertySource };
                export namespace SourceDescription {
                    const type_1412: string;
                    export { type_1412 as type };
                    const reference_1412: boolean;
                    export { reference_1412 as reference };
                    const many_1412: boolean;
                    export { many_1412 as many };
                    const inverse_1412: boolean;
                    export { inverse_1412 as inverse };
                }
                export namespace MaximumValue {
                    const type_1413: string;
                    export { type_1413 as type };
                    const reference_1413: boolean;
                    export { reference_1413 as reference };
                    const many_1413: boolean;
                    export { many_1413 as many };
                    const inverse_1413: boolean;
                    export { inverse_1413 as inverse };
                }
                export namespace MaximumValueAsString {
                    const type_1414: string;
                    export { type_1414 as type };
                    const reference_1414: boolean;
                    export { reference_1414 as reference };
                    const many_1414: boolean;
                    export { many_1414 as many };
                    const inverse_1414: boolean;
                    export { inverse_1414 as inverse };
                }
                export namespace MinimumValue {
                    const type_1415: string;
                    export { type_1415 as type };
                    const reference_1415: boolean;
                    export { reference_1415 as reference };
                    const many_1415: boolean;
                    export { many_1415 as many };
                    const inverse_1415: boolean;
                    export { inverse_1415 as inverse };
                }
                export namespace MinimumValueAsString {
                    const type_1416: string;
                    export { type_1416 as type };
                    const reference_1416: boolean;
                    export { reference_1416 as reference };
                    const many_1416: boolean;
                    export { many_1416 as many };
                    const inverse_1416: boolean;
                    export { inverse_1416 as inverse };
                }
                export namespace ThermalLoadTimeSeriesValues {
                    const type_1417: string;
                    export { type_1417 as type };
                    const reference_1417: boolean;
                    export { reference_1417 as reference };
                    const many_1417: boolean;
                    export { many_1417 as many };
                    const inverse_1417: boolean;
                    export { inverse_1417 as inverse };
                }
                export namespace UserDefinedThermalLoadSource {
                    const type_1418: string;
                    export { type_1418 as type };
                    const reference_1418: boolean;
                    export { reference_1418 as reference };
                    const many_1418: boolean;
                    export { many_1418 as many };
                    const inverse_1418: boolean;
                    export { inverse_1418 as inverse };
                }
                export namespace UserDefinedPropertySource_1 {
                    const type_1419: string;
                    export { type_1419 as type };
                    const reference_1419: boolean;
                    export { reference_1419 as reference };
                    const many_1419: boolean;
                    export { many_1419 as many };
                    const inverse_1419: boolean;
                    export { inverse_1419 as inverse };
                }
                export { UserDefinedPropertySource_1 as UserDefinedPropertySource };
                export namespace ThermalLoadType {
                    const type_1420: string;
                    export { type_1420 as type };
                    const reference_1420: boolean;
                    export { reference_1420 as reference };
                    const many_1420: boolean;
                    export { many_1420 as many };
                    const inverse_1420: boolean;
                    export { inverse_1420 as inverse };
                }
            }
            export { fields_524 as fields };
        }
        namespace IfcSpaceType {
            const domain_525: string;
            export { domain_525 as domain };
            const superclasses_525: string[];
            export { superclasses_525 as superclasses };
            export namespace fields_525 {
                export namespace PredefinedType_70 {
                    const type_1421: string;
                    export { type_1421 as type };
                    const reference_1421: boolean;
                    export { reference_1421 as reference };
                    const many_1421: boolean;
                    export { many_1421 as many };
                    const inverse_1421: boolean;
                    export { inverse_1421 as inverse };
                }
                export { PredefinedType_70 as PredefinedType };
            }
            export { fields_525 as fields };
        }
        namespace IfcSpatialStructureElement {
            const domain_526: string;
            export { domain_526 as domain };
            const superclasses_526: string[];
            export { superclasses_526 as superclasses };
            export namespace fields_526 {
                export namespace LongName_1 {
                    const type_1422: string;
                    export { type_1422 as type };
                    const reference_1422: boolean;
                    export { reference_1422 as reference };
                    const many_1422: boolean;
                    export { many_1422 as many };
                    const inverse_1422: boolean;
                    export { inverse_1422 as inverse };
                }
                export { LongName_1 as LongName };
                export namespace CompositionType_1 {
                    const type_1423: string;
                    export { type_1423 as type };
                    const reference_1423: boolean;
                    export { reference_1423 as reference };
                    const many_1423: boolean;
                    export { many_1423 as many };
                    const inverse_1423: boolean;
                    export { inverse_1423 as inverse };
                }
                export { CompositionType_1 as CompositionType };
                export namespace ReferencesElements {
                    const type_1424: string;
                    export { type_1424 as type };
                    const reference_1424: boolean;
                    export { reference_1424 as reference };
                    const many_1424: boolean;
                    export { many_1424 as many };
                    const inverse_1424: boolean;
                    export { inverse_1424 as inverse };
                }
                export namespace ServicedBySystems {
                    const type_1425: string;
                    export { type_1425 as type };
                    const reference_1425: boolean;
                    export { reference_1425 as reference };
                    const many_1425: boolean;
                    export { many_1425 as many };
                    const inverse_1425: boolean;
                    export { inverse_1425 as inverse };
                }
                export namespace ContainsElements {
                    const type_1426: string;
                    export { type_1426 as type };
                    const reference_1426: boolean;
                    export { reference_1426 as reference };
                    const many_1426: boolean;
                    export { many_1426 as many };
                    const inverse_1426: boolean;
                    export { inverse_1426 as inverse };
                }
            }
            export { fields_526 as fields };
        }
        namespace IfcSpatialStructureElementType {
            const domain_527: string;
            export { domain_527 as domain };
            const superclasses_527: string[];
            export { superclasses_527 as superclasses };
            const fields_527: {};
            export { fields_527 as fields };
        }
        namespace IfcSphere {
            const domain_528: string;
            export { domain_528 as domain };
            const superclasses_528: string[];
            export { superclasses_528 as superclasses };
            export namespace fields_528 {
                export namespace Radius_7 {
                    const type_1427: string;
                    export { type_1427 as type };
                    const reference_1427: boolean;
                    export { reference_1427 as reference };
                    const many_1427: boolean;
                    export { many_1427 as many };
                    const inverse_1427: boolean;
                    export { inverse_1427 as inverse };
                }
                export { Radius_7 as Radius };
                export namespace RadiusAsString_7 {
                    const type_1428: string;
                    export { type_1428 as type };
                    const reference_1428: boolean;
                    export { reference_1428 as reference };
                    const many_1428: boolean;
                    export { many_1428 as many };
                    const inverse_1428: boolean;
                    export { inverse_1428 as inverse };
                }
                export { RadiusAsString_7 as RadiusAsString };
            }
            export { fields_528 as fields };
        }
        namespace IfcStackTerminalType {
            const domain_529: string;
            export { domain_529 as domain };
            const superclasses_529: string[];
            export { superclasses_529 as superclasses };
            export namespace fields_529 {
                export namespace PredefinedType_71 {
                    const type_1429: string;
                    export { type_1429 as type };
                    const reference_1429: boolean;
                    export { reference_1429 as reference };
                    const many_1429: boolean;
                    export { many_1429 as many };
                    const inverse_1429: boolean;
                    export { inverse_1429 as inverse };
                }
                export { PredefinedType_71 as PredefinedType };
            }
            export { fields_529 as fields };
        }
        namespace IfcStair {
            const domain_530: string;
            export { domain_530 as domain };
            const superclasses_530: string[];
            export { superclasses_530 as superclasses };
            export namespace fields_530 {
                export namespace ShapeType_2 {
                    const type_1430: string;
                    export { type_1430 as type };
                    const reference_1430: boolean;
                    export { reference_1430 as reference };
                    const many_1430: boolean;
                    export { many_1430 as many };
                    const inverse_1430: boolean;
                    export { inverse_1430 as inverse };
                }
                export { ShapeType_2 as ShapeType };
            }
            export { fields_530 as fields };
        }
        namespace IfcStairFlight {
            const domain_531: string;
            export { domain_531 as domain };
            const superclasses_531: string[];
            export { superclasses_531 as superclasses };
            export namespace fields_531 {
                namespace NumberOfRiser {
                    const type_1431: string;
                    export { type_1431 as type };
                    const reference_1431: boolean;
                    export { reference_1431 as reference };
                    const many_1431: boolean;
                    export { many_1431 as many };
                    const inverse_1431: boolean;
                    export { inverse_1431 as inverse };
                }
                namespace NumberOfTreads {
                    const type_1432: string;
                    export { type_1432 as type };
                    const reference_1432: boolean;
                    export { reference_1432 as reference };
                    const many_1432: boolean;
                    export { many_1432 as many };
                    const inverse_1432: boolean;
                    export { inverse_1432 as inverse };
                }
                namespace RiserHeight {
                    const type_1433: string;
                    export { type_1433 as type };
                    const reference_1433: boolean;
                    export { reference_1433 as reference };
                    const many_1433: boolean;
                    export { many_1433 as many };
                    const inverse_1433: boolean;
                    export { inverse_1433 as inverse };
                }
                namespace RiserHeightAsString {
                    const type_1434: string;
                    export { type_1434 as type };
                    const reference_1434: boolean;
                    export { reference_1434 as reference };
                    const many_1434: boolean;
                    export { many_1434 as many };
                    const inverse_1434: boolean;
                    export { inverse_1434 as inverse };
                }
                namespace TreadLength {
                    const type_1435: string;
                    export { type_1435 as type };
                    const reference_1435: boolean;
                    export { reference_1435 as reference };
                    const many_1435: boolean;
                    export { many_1435 as many };
                    const inverse_1435: boolean;
                    export { inverse_1435 as inverse };
                }
                namespace TreadLengthAsString {
                    const type_1436: string;
                    export { type_1436 as type };
                    const reference_1436: boolean;
                    export { reference_1436 as reference };
                    const many_1436: boolean;
                    export { many_1436 as many };
                    const inverse_1436: boolean;
                    export { inverse_1436 as inverse };
                }
            }
            export { fields_531 as fields };
        }
        namespace IfcStairFlightType {
            const domain_532: string;
            export { domain_532 as domain };
            const superclasses_532: string[];
            export { superclasses_532 as superclasses };
            export namespace fields_532 {
                export namespace PredefinedType_72 {
                    const type_1437: string;
                    export { type_1437 as type };
                    const reference_1437: boolean;
                    export { reference_1437 as reference };
                    const many_1437: boolean;
                    export { many_1437 as many };
                    const inverse_1437: boolean;
                    export { inverse_1437 as inverse };
                }
                export { PredefinedType_72 as PredefinedType };
            }
            export { fields_532 as fields };
        }
        namespace IfcStructuralAction {
            const domain_533: string;
            export { domain_533 as domain };
            const superclasses_533: string[];
            export { superclasses_533 as superclasses };
            export namespace fields_533 {
                namespace DestabilizingLoad {
                    const type_1438: string;
                    export { type_1438 as type };
                    const reference_1438: boolean;
                    export { reference_1438 as reference };
                    const many_1438: boolean;
                    export { many_1438 as many };
                    const inverse_1438: boolean;
                    export { inverse_1438 as inverse };
                }
                namespace CausedBy {
                    const type_1439: string;
                    export { type_1439 as type };
                    const reference_1439: boolean;
                    export { reference_1439 as reference };
                    const many_1439: boolean;
                    export { many_1439 as many };
                    const inverse_1439: boolean;
                    export { inverse_1439 as inverse };
                }
            }
            export { fields_533 as fields };
        }
        namespace IfcStructuralActivity {
            const domain_534: string;
            export { domain_534 as domain };
            const superclasses_534: string[];
            export { superclasses_534 as superclasses };
            export namespace fields_534 {
                export namespace AppliedLoad {
                    const type_1440: string;
                    export { type_1440 as type };
                    const reference_1440: boolean;
                    export { reference_1440 as reference };
                    const many_1440: boolean;
                    export { many_1440 as many };
                    const inverse_1440: boolean;
                    export { inverse_1440 as inverse };
                }
                export namespace GlobalOrLocal_1 {
                    const type_1441: string;
                    export { type_1441 as type };
                    const reference_1441: boolean;
                    export { reference_1441 as reference };
                    const many_1441: boolean;
                    export { many_1441 as many };
                    const inverse_1441: boolean;
                    export { inverse_1441 as inverse };
                }
                export { GlobalOrLocal_1 as GlobalOrLocal };
                export namespace AssignedToStructuralItem {
                    const type_1442: string;
                    export { type_1442 as type };
                    const reference_1442: boolean;
                    export { reference_1442 as reference };
                    const many_1442: boolean;
                    export { many_1442 as many };
                    const inverse_1442: boolean;
                    export { inverse_1442 as inverse };
                }
            }
            export { fields_534 as fields };
        }
        namespace IfcStructuralAnalysisModel {
            const domain_535: string;
            export { domain_535 as domain };
            const superclasses_535: string[];
            export { superclasses_535 as superclasses };
            export namespace fields_535 {
                export namespace PredefinedType_73 {
                    const type_1443: string;
                    export { type_1443 as type };
                    const reference_1443: boolean;
                    export { reference_1443 as reference };
                    const many_1443: boolean;
                    export { many_1443 as many };
                    const inverse_1443: boolean;
                    export { inverse_1443 as inverse };
                }
                export { PredefinedType_73 as PredefinedType };
                export namespace OrientationOf2DPlane {
                    const type_1444: string;
                    export { type_1444 as type };
                    const reference_1444: boolean;
                    export { reference_1444 as reference };
                    const many_1444: boolean;
                    export { many_1444 as many };
                    const inverse_1444: boolean;
                    export { inverse_1444 as inverse };
                }
                export namespace LoadedBy {
                    const type_1445: string;
                    export { type_1445 as type };
                    const reference_1445: boolean;
                    export { reference_1445 as reference };
                    const many_1445: boolean;
                    export { many_1445 as many };
                    const inverse_1445: boolean;
                    export { inverse_1445 as inverse };
                }
                export namespace HasResults {
                    const type_1446: string;
                    export { type_1446 as type };
                    const reference_1446: boolean;
                    export { reference_1446 as reference };
                    const many_1446: boolean;
                    export { many_1446 as many };
                    const inverse_1446: boolean;
                    export { inverse_1446 as inverse };
                }
            }
            export { fields_535 as fields };
        }
        namespace IfcStructuralConnection {
            const domain_536: string;
            export { domain_536 as domain };
            const superclasses_536: string[];
            export { superclasses_536 as superclasses };
            export namespace fields_536 {
                export namespace AppliedCondition_1 {
                    const type_1447: string;
                    export { type_1447 as type };
                    const reference_1447: boolean;
                    export { reference_1447 as reference };
                    const many_1447: boolean;
                    export { many_1447 as many };
                    const inverse_1447: boolean;
                    export { inverse_1447 as inverse };
                }
                export { AppliedCondition_1 as AppliedCondition };
                export namespace ConnectsStructuralMembers {
                    const type_1448: string;
                    export { type_1448 as type };
                    const reference_1448: boolean;
                    export { reference_1448 as reference };
                    const many_1448: boolean;
                    export { many_1448 as many };
                    const inverse_1448: boolean;
                    export { inverse_1448 as inverse };
                }
            }
            export { fields_536 as fields };
        }
        namespace IfcStructuralConnectionCondition {
            const domain_537: string;
            export { domain_537 as domain };
            const superclasses_537: any[];
            export { superclasses_537 as superclasses };
            export namespace fields_537 {
                export namespace Name_36 {
                    const type_1449: string;
                    export { type_1449 as type };
                    const reference_1449: boolean;
                    export { reference_1449 as reference };
                    const many_1449: boolean;
                    export { many_1449 as many };
                    const inverse_1449: boolean;
                    export { inverse_1449 as inverse };
                }
                export { Name_36 as Name };
            }
            export { fields_537 as fields };
        }
        namespace IfcStructuralCurveConnection {
            const domain_538: string;
            export { domain_538 as domain };
            const superclasses_538: string[];
            export { superclasses_538 as superclasses };
            const fields_538: {};
            export { fields_538 as fields };
        }
        namespace IfcStructuralCurveMember {
            const domain_539: string;
            export { domain_539 as domain };
            const superclasses_539: string[];
            export { superclasses_539 as superclasses };
            export namespace fields_539 {
                export namespace PredefinedType_74 {
                    const type_1450: string;
                    export { type_1450 as type };
                    const reference_1450: boolean;
                    export { reference_1450 as reference };
                    const many_1450: boolean;
                    export { many_1450 as many };
                    const inverse_1450: boolean;
                    export { inverse_1450 as inverse };
                }
                export { PredefinedType_74 as PredefinedType };
            }
            export { fields_539 as fields };
        }
        namespace IfcStructuralCurveMemberVarying {
            const domain_540: string;
            export { domain_540 as domain };
            const superclasses_540: string[];
            export { superclasses_540 as superclasses };
            const fields_540: {};
            export { fields_540 as fields };
        }
        namespace IfcStructuralItem {
            const domain_541: string;
            export { domain_541 as domain };
            const superclasses_541: string[];
            export { superclasses_541 as superclasses };
            export namespace fields_541 {
                namespace AssignedStructuralActivity {
                    const type_1451: string;
                    export { type_1451 as type };
                    const reference_1451: boolean;
                    export { reference_1451 as reference };
                    const many_1451: boolean;
                    export { many_1451 as many };
                    const inverse_1451: boolean;
                    export { inverse_1451 as inverse };
                }
            }
            export { fields_541 as fields };
        }
        namespace IfcStructuralLinearAction {
            const domain_542: string;
            export { domain_542 as domain };
            const superclasses_542: string[];
            export { superclasses_542 as superclasses };
            export namespace fields_542 {
                namespace ProjectedOrTrue {
                    const type_1452: string;
                    export { type_1452 as type };
                    const reference_1452: boolean;
                    export { reference_1452 as reference };
                    const many_1452: boolean;
                    export { many_1452 as many };
                    const inverse_1452: boolean;
                    export { inverse_1452 as inverse };
                }
            }
            export { fields_542 as fields };
        }
        namespace IfcStructuralLinearActionVarying {
            const domain_543: string;
            export { domain_543 as domain };
            const superclasses_543: string[];
            export { superclasses_543 as superclasses };
            export namespace fields_543 {
                namespace VaryingAppliedLoadLocation {
                    const type_1453: string;
                    export { type_1453 as type };
                    const reference_1453: boolean;
                    export { reference_1453 as reference };
                    const many_1453: boolean;
                    export { many_1453 as many };
                    const inverse_1453: boolean;
                    export { inverse_1453 as inverse };
                }
                namespace SubsequentAppliedLoads {
                    const type_1454: string;
                    export { type_1454 as type };
                    const reference_1454: boolean;
                    export { reference_1454 as reference };
                    const many_1454: boolean;
                    export { many_1454 as many };
                    const inverse_1454: boolean;
                    export { inverse_1454 as inverse };
                }
            }
            export { fields_543 as fields };
        }
        namespace IfcStructuralLoad {
            const domain_544: string;
            export { domain_544 as domain };
            const superclasses_544: any[];
            export { superclasses_544 as superclasses };
            export namespace fields_544 {
                export namespace Name_37 {
                    const type_1455: string;
                    export { type_1455 as type };
                    const reference_1455: boolean;
                    export { reference_1455 as reference };
                    const many_1455: boolean;
                    export { many_1455 as many };
                    const inverse_1455: boolean;
                    export { inverse_1455 as inverse };
                }
                export { Name_37 as Name };
            }
            export { fields_544 as fields };
        }
        namespace IfcStructuralLoadGroup {
            const domain_545: string;
            export { domain_545 as domain };
            const superclasses_545: string[];
            export { superclasses_545 as superclasses };
            export namespace fields_545 {
                export namespace PredefinedType_75 {
                    const type_1456: string;
                    export { type_1456 as type };
                    const reference_1456: boolean;
                    export { reference_1456 as reference };
                    const many_1456: boolean;
                    export { many_1456 as many };
                    const inverse_1456: boolean;
                    export { inverse_1456 as inverse };
                }
                export { PredefinedType_75 as PredefinedType };
                export namespace ActionType {
                    const type_1457: string;
                    export { type_1457 as type };
                    const reference_1457: boolean;
                    export { reference_1457 as reference };
                    const many_1457: boolean;
                    export { many_1457 as many };
                    const inverse_1457: boolean;
                    export { inverse_1457 as inverse };
                }
                export namespace ActionSource {
                    const type_1458: string;
                    export { type_1458 as type };
                    const reference_1458: boolean;
                    export { reference_1458 as reference };
                    const many_1458: boolean;
                    export { many_1458 as many };
                    const inverse_1458: boolean;
                    export { inverse_1458 as inverse };
                }
                export namespace Coefficient {
                    const type_1459: string;
                    export { type_1459 as type };
                    const reference_1459: boolean;
                    export { reference_1459 as reference };
                    const many_1459: boolean;
                    export { many_1459 as many };
                    const inverse_1459: boolean;
                    export { inverse_1459 as inverse };
                }
                export namespace CoefficientAsString {
                    const type_1460: string;
                    export { type_1460 as type };
                    const reference_1460: boolean;
                    export { reference_1460 as reference };
                    const many_1460: boolean;
                    export { many_1460 as many };
                    const inverse_1460: boolean;
                    export { inverse_1460 as inverse };
                }
                export namespace Purpose_2 {
                    const type_1461: string;
                    export { type_1461 as type };
                    const reference_1461: boolean;
                    export { reference_1461 as reference };
                    const many_1461: boolean;
                    export { many_1461 as many };
                    const inverse_1461: boolean;
                    export { inverse_1461 as inverse };
                }
                export { Purpose_2 as Purpose };
                export namespace SourceOfResultGroup {
                    const type_1462: string;
                    export { type_1462 as type };
                    const reference_1462: boolean;
                    export { reference_1462 as reference };
                    const many_1462: boolean;
                    export { many_1462 as many };
                    const inverse_1462: boolean;
                    export { inverse_1462 as inverse };
                }
                export namespace LoadGroupFor {
                    const type_1463: string;
                    export { type_1463 as type };
                    const reference_1463: boolean;
                    export { reference_1463 as reference };
                    const many_1463: boolean;
                    export { many_1463 as many };
                    const inverse_1463: boolean;
                    export { inverse_1463 as inverse };
                }
            }
            export { fields_545 as fields };
        }
        namespace IfcStructuralLoadLinearForce {
            const domain_546: string;
            export { domain_546 as domain };
            const superclasses_546: string[];
            export { superclasses_546 as superclasses };
            export namespace fields_546 {
                namespace LinearForceX {
                    const type_1464: string;
                    export { type_1464 as type };
                    const reference_1464: boolean;
                    export { reference_1464 as reference };
                    const many_1464: boolean;
                    export { many_1464 as many };
                    const inverse_1464: boolean;
                    export { inverse_1464 as inverse };
                }
                namespace LinearForceXAsString {
                    const type_1465: string;
                    export { type_1465 as type };
                    const reference_1465: boolean;
                    export { reference_1465 as reference };
                    const many_1465: boolean;
                    export { many_1465 as many };
                    const inverse_1465: boolean;
                    export { inverse_1465 as inverse };
                }
                namespace LinearForceY {
                    const type_1466: string;
                    export { type_1466 as type };
                    const reference_1466: boolean;
                    export { reference_1466 as reference };
                    const many_1466: boolean;
                    export { many_1466 as many };
                    const inverse_1466: boolean;
                    export { inverse_1466 as inverse };
                }
                namespace LinearForceYAsString {
                    const type_1467: string;
                    export { type_1467 as type };
                    const reference_1467: boolean;
                    export { reference_1467 as reference };
                    const many_1467: boolean;
                    export { many_1467 as many };
                    const inverse_1467: boolean;
                    export { inverse_1467 as inverse };
                }
                namespace LinearForceZ {
                    const type_1468: string;
                    export { type_1468 as type };
                    const reference_1468: boolean;
                    export { reference_1468 as reference };
                    const many_1468: boolean;
                    export { many_1468 as many };
                    const inverse_1468: boolean;
                    export { inverse_1468 as inverse };
                }
                namespace LinearForceZAsString {
                    const type_1469: string;
                    export { type_1469 as type };
                    const reference_1469: boolean;
                    export { reference_1469 as reference };
                    const many_1469: boolean;
                    export { many_1469 as many };
                    const inverse_1469: boolean;
                    export { inverse_1469 as inverse };
                }
                namespace LinearMomentX {
                    const type_1470: string;
                    export { type_1470 as type };
                    const reference_1470: boolean;
                    export { reference_1470 as reference };
                    const many_1470: boolean;
                    export { many_1470 as many };
                    const inverse_1470: boolean;
                    export { inverse_1470 as inverse };
                }
                namespace LinearMomentXAsString {
                    const type_1471: string;
                    export { type_1471 as type };
                    const reference_1471: boolean;
                    export { reference_1471 as reference };
                    const many_1471: boolean;
                    export { many_1471 as many };
                    const inverse_1471: boolean;
                    export { inverse_1471 as inverse };
                }
                namespace LinearMomentY {
                    const type_1472: string;
                    export { type_1472 as type };
                    const reference_1472: boolean;
                    export { reference_1472 as reference };
                    const many_1472: boolean;
                    export { many_1472 as many };
                    const inverse_1472: boolean;
                    export { inverse_1472 as inverse };
                }
                namespace LinearMomentYAsString {
                    const type_1473: string;
                    export { type_1473 as type };
                    const reference_1473: boolean;
                    export { reference_1473 as reference };
                    const many_1473: boolean;
                    export { many_1473 as many };
                    const inverse_1473: boolean;
                    export { inverse_1473 as inverse };
                }
                namespace LinearMomentZ {
                    const type_1474: string;
                    export { type_1474 as type };
                    const reference_1474: boolean;
                    export { reference_1474 as reference };
                    const many_1474: boolean;
                    export { many_1474 as many };
                    const inverse_1474: boolean;
                    export { inverse_1474 as inverse };
                }
                namespace LinearMomentZAsString {
                    const type_1475: string;
                    export { type_1475 as type };
                    const reference_1475: boolean;
                    export { reference_1475 as reference };
                    const many_1475: boolean;
                    export { many_1475 as many };
                    const inverse_1475: boolean;
                    export { inverse_1475 as inverse };
                }
            }
            export { fields_546 as fields };
        }
        namespace IfcStructuralLoadPlanarForce {
            const domain_547: string;
            export { domain_547 as domain };
            const superclasses_547: string[];
            export { superclasses_547 as superclasses };
            export namespace fields_547 {
                namespace PlanarForceX {
                    const type_1476: string;
                    export { type_1476 as type };
                    const reference_1476: boolean;
                    export { reference_1476 as reference };
                    const many_1476: boolean;
                    export { many_1476 as many };
                    const inverse_1476: boolean;
                    export { inverse_1476 as inverse };
                }
                namespace PlanarForceXAsString {
                    const type_1477: string;
                    export { type_1477 as type };
                    const reference_1477: boolean;
                    export { reference_1477 as reference };
                    const many_1477: boolean;
                    export { many_1477 as many };
                    const inverse_1477: boolean;
                    export { inverse_1477 as inverse };
                }
                namespace PlanarForceY {
                    const type_1478: string;
                    export { type_1478 as type };
                    const reference_1478: boolean;
                    export { reference_1478 as reference };
                    const many_1478: boolean;
                    export { many_1478 as many };
                    const inverse_1478: boolean;
                    export { inverse_1478 as inverse };
                }
                namespace PlanarForceYAsString {
                    const type_1479: string;
                    export { type_1479 as type };
                    const reference_1479: boolean;
                    export { reference_1479 as reference };
                    const many_1479: boolean;
                    export { many_1479 as many };
                    const inverse_1479: boolean;
                    export { inverse_1479 as inverse };
                }
                namespace PlanarForceZ {
                    const type_1480: string;
                    export { type_1480 as type };
                    const reference_1480: boolean;
                    export { reference_1480 as reference };
                    const many_1480: boolean;
                    export { many_1480 as many };
                    const inverse_1480: boolean;
                    export { inverse_1480 as inverse };
                }
                namespace PlanarForceZAsString {
                    const type_1481: string;
                    export { type_1481 as type };
                    const reference_1481: boolean;
                    export { reference_1481 as reference };
                    const many_1481: boolean;
                    export { many_1481 as many };
                    const inverse_1481: boolean;
                    export { inverse_1481 as inverse };
                }
            }
            export { fields_547 as fields };
        }
        namespace IfcStructuralLoadSingleDisplacement {
            const domain_548: string;
            export { domain_548 as domain };
            const superclasses_548: string[];
            export { superclasses_548 as superclasses };
            export namespace fields_548 {
                namespace DisplacementX {
                    const type_1482: string;
                    export { type_1482 as type };
                    const reference_1482: boolean;
                    export { reference_1482 as reference };
                    const many_1482: boolean;
                    export { many_1482 as many };
                    const inverse_1482: boolean;
                    export { inverse_1482 as inverse };
                }
                namespace DisplacementXAsString {
                    const type_1483: string;
                    export { type_1483 as type };
                    const reference_1483: boolean;
                    export { reference_1483 as reference };
                    const many_1483: boolean;
                    export { many_1483 as many };
                    const inverse_1483: boolean;
                    export { inverse_1483 as inverse };
                }
                namespace DisplacementY {
                    const type_1484: string;
                    export { type_1484 as type };
                    const reference_1484: boolean;
                    export { reference_1484 as reference };
                    const many_1484: boolean;
                    export { many_1484 as many };
                    const inverse_1484: boolean;
                    export { inverse_1484 as inverse };
                }
                namespace DisplacementYAsString {
                    const type_1485: string;
                    export { type_1485 as type };
                    const reference_1485: boolean;
                    export { reference_1485 as reference };
                    const many_1485: boolean;
                    export { many_1485 as many };
                    const inverse_1485: boolean;
                    export { inverse_1485 as inverse };
                }
                namespace DisplacementZ {
                    const type_1486: string;
                    export { type_1486 as type };
                    const reference_1486: boolean;
                    export { reference_1486 as reference };
                    const many_1486: boolean;
                    export { many_1486 as many };
                    const inverse_1486: boolean;
                    export { inverse_1486 as inverse };
                }
                namespace DisplacementZAsString {
                    const type_1487: string;
                    export { type_1487 as type };
                    const reference_1487: boolean;
                    export { reference_1487 as reference };
                    const many_1487: boolean;
                    export { many_1487 as many };
                    const inverse_1487: boolean;
                    export { inverse_1487 as inverse };
                }
                namespace RotationalDisplacementRX {
                    const type_1488: string;
                    export { type_1488 as type };
                    const reference_1488: boolean;
                    export { reference_1488 as reference };
                    const many_1488: boolean;
                    export { many_1488 as many };
                    const inverse_1488: boolean;
                    export { inverse_1488 as inverse };
                }
                namespace RotationalDisplacementRXAsString {
                    const type_1489: string;
                    export { type_1489 as type };
                    const reference_1489: boolean;
                    export { reference_1489 as reference };
                    const many_1489: boolean;
                    export { many_1489 as many };
                    const inverse_1489: boolean;
                    export { inverse_1489 as inverse };
                }
                namespace RotationalDisplacementRY {
                    const type_1490: string;
                    export { type_1490 as type };
                    const reference_1490: boolean;
                    export { reference_1490 as reference };
                    const many_1490: boolean;
                    export { many_1490 as many };
                    const inverse_1490: boolean;
                    export { inverse_1490 as inverse };
                }
                namespace RotationalDisplacementRYAsString {
                    const type_1491: string;
                    export { type_1491 as type };
                    const reference_1491: boolean;
                    export { reference_1491 as reference };
                    const many_1491: boolean;
                    export { many_1491 as many };
                    const inverse_1491: boolean;
                    export { inverse_1491 as inverse };
                }
                namespace RotationalDisplacementRZ {
                    const type_1492: string;
                    export { type_1492 as type };
                    const reference_1492: boolean;
                    export { reference_1492 as reference };
                    const many_1492: boolean;
                    export { many_1492 as many };
                    const inverse_1492: boolean;
                    export { inverse_1492 as inverse };
                }
                namespace RotationalDisplacementRZAsString {
                    const type_1493: string;
                    export { type_1493 as type };
                    const reference_1493: boolean;
                    export { reference_1493 as reference };
                    const many_1493: boolean;
                    export { many_1493 as many };
                    const inverse_1493: boolean;
                    export { inverse_1493 as inverse };
                }
            }
            export { fields_548 as fields };
        }
        namespace IfcStructuralLoadSingleDisplacementDistortion {
            const domain_549: string;
            export { domain_549 as domain };
            const superclasses_549: string[];
            export { superclasses_549 as superclasses };
            export namespace fields_549 {
                namespace Distortion {
                    const type_1494: string;
                    export { type_1494 as type };
                    const reference_1494: boolean;
                    export { reference_1494 as reference };
                    const many_1494: boolean;
                    export { many_1494 as many };
                    const inverse_1494: boolean;
                    export { inverse_1494 as inverse };
                }
                namespace DistortionAsString {
                    const type_1495: string;
                    export { type_1495 as type };
                    const reference_1495: boolean;
                    export { reference_1495 as reference };
                    const many_1495: boolean;
                    export { many_1495 as many };
                    const inverse_1495: boolean;
                    export { inverse_1495 as inverse };
                }
            }
            export { fields_549 as fields };
        }
        namespace IfcStructuralLoadSingleForce {
            const domain_550: string;
            export { domain_550 as domain };
            const superclasses_550: string[];
            export { superclasses_550 as superclasses };
            export namespace fields_550 {
                namespace ForceX {
                    const type_1496: string;
                    export { type_1496 as type };
                    const reference_1496: boolean;
                    export { reference_1496 as reference };
                    const many_1496: boolean;
                    export { many_1496 as many };
                    const inverse_1496: boolean;
                    export { inverse_1496 as inverse };
                }
                namespace ForceXAsString {
                    const type_1497: string;
                    export { type_1497 as type };
                    const reference_1497: boolean;
                    export { reference_1497 as reference };
                    const many_1497: boolean;
                    export { many_1497 as many };
                    const inverse_1497: boolean;
                    export { inverse_1497 as inverse };
                }
                namespace ForceY {
                    const type_1498: string;
                    export { type_1498 as type };
                    const reference_1498: boolean;
                    export { reference_1498 as reference };
                    const many_1498: boolean;
                    export { many_1498 as many };
                    const inverse_1498: boolean;
                    export { inverse_1498 as inverse };
                }
                namespace ForceYAsString {
                    const type_1499: string;
                    export { type_1499 as type };
                    const reference_1499: boolean;
                    export { reference_1499 as reference };
                    const many_1499: boolean;
                    export { many_1499 as many };
                    const inverse_1499: boolean;
                    export { inverse_1499 as inverse };
                }
                namespace ForceZ {
                    const type_1500: string;
                    export { type_1500 as type };
                    const reference_1500: boolean;
                    export { reference_1500 as reference };
                    const many_1500: boolean;
                    export { many_1500 as many };
                    const inverse_1500: boolean;
                    export { inverse_1500 as inverse };
                }
                namespace ForceZAsString {
                    const type_1501: string;
                    export { type_1501 as type };
                    const reference_1501: boolean;
                    export { reference_1501 as reference };
                    const many_1501: boolean;
                    export { many_1501 as many };
                    const inverse_1501: boolean;
                    export { inverse_1501 as inverse };
                }
                namespace MomentX {
                    const type_1502: string;
                    export { type_1502 as type };
                    const reference_1502: boolean;
                    export { reference_1502 as reference };
                    const many_1502: boolean;
                    export { many_1502 as many };
                    const inverse_1502: boolean;
                    export { inverse_1502 as inverse };
                }
                namespace MomentXAsString {
                    const type_1503: string;
                    export { type_1503 as type };
                    const reference_1503: boolean;
                    export { reference_1503 as reference };
                    const many_1503: boolean;
                    export { many_1503 as many };
                    const inverse_1503: boolean;
                    export { inverse_1503 as inverse };
                }
                namespace MomentY {
                    const type_1504: string;
                    export { type_1504 as type };
                    const reference_1504: boolean;
                    export { reference_1504 as reference };
                    const many_1504: boolean;
                    export { many_1504 as many };
                    const inverse_1504: boolean;
                    export { inverse_1504 as inverse };
                }
                namespace MomentYAsString {
                    const type_1505: string;
                    export { type_1505 as type };
                    const reference_1505: boolean;
                    export { reference_1505 as reference };
                    const many_1505: boolean;
                    export { many_1505 as many };
                    const inverse_1505: boolean;
                    export { inverse_1505 as inverse };
                }
                namespace MomentZ {
                    const type_1506: string;
                    export { type_1506 as type };
                    const reference_1506: boolean;
                    export { reference_1506 as reference };
                    const many_1506: boolean;
                    export { many_1506 as many };
                    const inverse_1506: boolean;
                    export { inverse_1506 as inverse };
                }
                namespace MomentZAsString {
                    const type_1507: string;
                    export { type_1507 as type };
                    const reference_1507: boolean;
                    export { reference_1507 as reference };
                    const many_1507: boolean;
                    export { many_1507 as many };
                    const inverse_1507: boolean;
                    export { inverse_1507 as inverse };
                }
            }
            export { fields_550 as fields };
        }
        namespace IfcStructuralLoadSingleForceWarping {
            const domain_551: string;
            export { domain_551 as domain };
            const superclasses_551: string[];
            export { superclasses_551 as superclasses };
            export namespace fields_551 {
                namespace WarpingMoment {
                    const type_1508: string;
                    export { type_1508 as type };
                    const reference_1508: boolean;
                    export { reference_1508 as reference };
                    const many_1508: boolean;
                    export { many_1508 as many };
                    const inverse_1508: boolean;
                    export { inverse_1508 as inverse };
                }
                namespace WarpingMomentAsString {
                    const type_1509: string;
                    export { type_1509 as type };
                    const reference_1509: boolean;
                    export { reference_1509 as reference };
                    const many_1509: boolean;
                    export { many_1509 as many };
                    const inverse_1509: boolean;
                    export { inverse_1509 as inverse };
                }
            }
            export { fields_551 as fields };
        }
        namespace IfcStructuralLoadStatic {
            const domain_552: string;
            export { domain_552 as domain };
            const superclasses_552: string[];
            export { superclasses_552 as superclasses };
            const fields_552: {};
            export { fields_552 as fields };
        }
        namespace IfcStructuralLoadTemperature {
            const domain_553: string;
            export { domain_553 as domain };
            const superclasses_553: string[];
            export { superclasses_553 as superclasses };
            export namespace fields_553 {
                namespace DeltaT_Constant {
                    const type_1510: string;
                    export { type_1510 as type };
                    const reference_1510: boolean;
                    export { reference_1510 as reference };
                    const many_1510: boolean;
                    export { many_1510 as many };
                    const inverse_1510: boolean;
                    export { inverse_1510 as inverse };
                }
                namespace DeltaT_ConstantAsString {
                    const type_1511: string;
                    export { type_1511 as type };
                    const reference_1511: boolean;
                    export { reference_1511 as reference };
                    const many_1511: boolean;
                    export { many_1511 as many };
                    const inverse_1511: boolean;
                    export { inverse_1511 as inverse };
                }
                namespace DeltaT_Y {
                    const type_1512: string;
                    export { type_1512 as type };
                    const reference_1512: boolean;
                    export { reference_1512 as reference };
                    const many_1512: boolean;
                    export { many_1512 as many };
                    const inverse_1512: boolean;
                    export { inverse_1512 as inverse };
                }
                namespace DeltaT_YAsString {
                    const type_1513: string;
                    export { type_1513 as type };
                    const reference_1513: boolean;
                    export { reference_1513 as reference };
                    const many_1513: boolean;
                    export { many_1513 as many };
                    const inverse_1513: boolean;
                    export { inverse_1513 as inverse };
                }
                namespace DeltaT_Z {
                    const type_1514: string;
                    export { type_1514 as type };
                    const reference_1514: boolean;
                    export { reference_1514 as reference };
                    const many_1514: boolean;
                    export { many_1514 as many };
                    const inverse_1514: boolean;
                    export { inverse_1514 as inverse };
                }
                namespace DeltaT_ZAsString {
                    const type_1515: string;
                    export { type_1515 as type };
                    const reference_1515: boolean;
                    export { reference_1515 as reference };
                    const many_1515: boolean;
                    export { many_1515 as many };
                    const inverse_1515: boolean;
                    export { inverse_1515 as inverse };
                }
            }
            export { fields_553 as fields };
        }
        namespace IfcStructuralMember {
            const domain_554: string;
            export { domain_554 as domain };
            const superclasses_554: string[];
            export { superclasses_554 as superclasses };
            export namespace fields_554 {
                namespace ReferencesElement {
                    const type_1516: string;
                    export { type_1516 as type };
                    const reference_1516: boolean;
                    export { reference_1516 as reference };
                    const many_1516: boolean;
                    export { many_1516 as many };
                    const inverse_1516: boolean;
                    export { inverse_1516 as inverse };
                }
                namespace ConnectedBy {
                    const type_1517: string;
                    export { type_1517 as type };
                    const reference_1517: boolean;
                    export { reference_1517 as reference };
                    const many_1517: boolean;
                    export { many_1517 as many };
                    const inverse_1517: boolean;
                    export { inverse_1517 as inverse };
                }
            }
            export { fields_554 as fields };
        }
        namespace IfcStructuralPlanarAction {
            const domain_555: string;
            export { domain_555 as domain };
            const superclasses_555: string[];
            export { superclasses_555 as superclasses };
            export namespace fields_555 {
                export namespace ProjectedOrTrue_1 {
                    const type_1518: string;
                    export { type_1518 as type };
                    const reference_1518: boolean;
                    export { reference_1518 as reference };
                    const many_1518: boolean;
                    export { many_1518 as many };
                    const inverse_1518: boolean;
                    export { inverse_1518 as inverse };
                }
                export { ProjectedOrTrue_1 as ProjectedOrTrue };
            }
            export { fields_555 as fields };
        }
        namespace IfcStructuralPlanarActionVarying {
            const domain_556: string;
            export { domain_556 as domain };
            const superclasses_556: string[];
            export { superclasses_556 as superclasses };
            export namespace fields_556 {
                export namespace VaryingAppliedLoadLocation_1 {
                    const type_1519: string;
                    export { type_1519 as type };
                    const reference_1519: boolean;
                    export { reference_1519 as reference };
                    const many_1519: boolean;
                    export { many_1519 as many };
                    const inverse_1519: boolean;
                    export { inverse_1519 as inverse };
                }
                export { VaryingAppliedLoadLocation_1 as VaryingAppliedLoadLocation };
                export namespace SubsequentAppliedLoads_1 {
                    const type_1520: string;
                    export { type_1520 as type };
                    const reference_1520: boolean;
                    export { reference_1520 as reference };
                    const many_1520: boolean;
                    export { many_1520 as many };
                    const inverse_1520: boolean;
                    export { inverse_1520 as inverse };
                }
                export { SubsequentAppliedLoads_1 as SubsequentAppliedLoads };
            }
            export { fields_556 as fields };
        }
        namespace IfcStructuralPointAction {
            const domain_557: string;
            export { domain_557 as domain };
            const superclasses_557: string[];
            export { superclasses_557 as superclasses };
            const fields_557: {};
            export { fields_557 as fields };
        }
        namespace IfcStructuralPointConnection {
            const domain_558: string;
            export { domain_558 as domain };
            const superclasses_558: string[];
            export { superclasses_558 as superclasses };
            const fields_558: {};
            export { fields_558 as fields };
        }
        namespace IfcStructuralPointReaction {
            const domain_559: string;
            export { domain_559 as domain };
            const superclasses_559: string[];
            export { superclasses_559 as superclasses };
            const fields_559: {};
            export { fields_559 as fields };
        }
        namespace IfcStructuralProfileProperties {
            const domain_560: string;
            export { domain_560 as domain };
            const superclasses_560: string[];
            export { superclasses_560 as superclasses };
            export namespace fields_560 {
                export namespace TorsionalConstantX {
                    const type_1521: string;
                    export { type_1521 as type };
                    const reference_1521: boolean;
                    export { reference_1521 as reference };
                    const many_1521: boolean;
                    export { many_1521 as many };
                    const inverse_1521: boolean;
                    export { inverse_1521 as inverse };
                }
                export namespace TorsionalConstantXAsString {
                    const type_1522: string;
                    export { type_1522 as type };
                    const reference_1522: boolean;
                    export { reference_1522 as reference };
                    const many_1522: boolean;
                    export { many_1522 as many };
                    const inverse_1522: boolean;
                    export { inverse_1522 as inverse };
                }
                export namespace MomentOfInertiaYZ {
                    const type_1523: string;
                    export { type_1523 as type };
                    const reference_1523: boolean;
                    export { reference_1523 as reference };
                    const many_1523: boolean;
                    export { many_1523 as many };
                    const inverse_1523: boolean;
                    export { inverse_1523 as inverse };
                }
                export namespace MomentOfInertiaYZAsString {
                    const type_1524: string;
                    export { type_1524 as type };
                    const reference_1524: boolean;
                    export { reference_1524 as reference };
                    const many_1524: boolean;
                    export { many_1524 as many };
                    const inverse_1524: boolean;
                    export { inverse_1524 as inverse };
                }
                export namespace MomentOfInertiaY {
                    const type_1525: string;
                    export { type_1525 as type };
                    const reference_1525: boolean;
                    export { reference_1525 as reference };
                    const many_1525: boolean;
                    export { many_1525 as many };
                    const inverse_1525: boolean;
                    export { inverse_1525 as inverse };
                }
                export namespace MomentOfInertiaYAsString {
                    const type_1526: string;
                    export { type_1526 as type };
                    const reference_1526: boolean;
                    export { reference_1526 as reference };
                    const many_1526: boolean;
                    export { many_1526 as many };
                    const inverse_1526: boolean;
                    export { inverse_1526 as inverse };
                }
                export namespace MomentOfInertiaZ {
                    const type_1527: string;
                    export { type_1527 as type };
                    const reference_1527: boolean;
                    export { reference_1527 as reference };
                    const many_1527: boolean;
                    export { many_1527 as many };
                    const inverse_1527: boolean;
                    export { inverse_1527 as inverse };
                }
                export namespace MomentOfInertiaZAsString {
                    const type_1528: string;
                    export { type_1528 as type };
                    const reference_1528: boolean;
                    export { reference_1528 as reference };
                    const many_1528: boolean;
                    export { many_1528 as many };
                    const inverse_1528: boolean;
                    export { inverse_1528 as inverse };
                }
                export namespace WarpingConstant {
                    const type_1529: string;
                    export { type_1529 as type };
                    const reference_1529: boolean;
                    export { reference_1529 as reference };
                    const many_1529: boolean;
                    export { many_1529 as many };
                    const inverse_1529: boolean;
                    export { inverse_1529 as inverse };
                }
                export namespace WarpingConstantAsString {
                    const type_1530: string;
                    export { type_1530 as type };
                    const reference_1530: boolean;
                    export { reference_1530 as reference };
                    const many_1530: boolean;
                    export { many_1530 as many };
                    const inverse_1530: boolean;
                    export { inverse_1530 as inverse };
                }
                export namespace ShearCentreZ {
                    const type_1531: string;
                    export { type_1531 as type };
                    const reference_1531: boolean;
                    export { reference_1531 as reference };
                    const many_1531: boolean;
                    export { many_1531 as many };
                    const inverse_1531: boolean;
                    export { inverse_1531 as inverse };
                }
                export namespace ShearCentreZAsString {
                    const type_1532: string;
                    export { type_1532 as type };
                    const reference_1532: boolean;
                    export { reference_1532 as reference };
                    const many_1532: boolean;
                    export { many_1532 as many };
                    const inverse_1532: boolean;
                    export { inverse_1532 as inverse };
                }
                export namespace ShearCentreY {
                    const type_1533: string;
                    export { type_1533 as type };
                    const reference_1533: boolean;
                    export { reference_1533 as reference };
                    const many_1533: boolean;
                    export { many_1533 as many };
                    const inverse_1533: boolean;
                    export { inverse_1533 as inverse };
                }
                export namespace ShearCentreYAsString {
                    const type_1534: string;
                    export { type_1534 as type };
                    const reference_1534: boolean;
                    export { reference_1534 as reference };
                    const many_1534: boolean;
                    export { many_1534 as many };
                    const inverse_1534: boolean;
                    export { inverse_1534 as inverse };
                }
                export namespace ShearDeformationAreaZ {
                    const type_1535: string;
                    export { type_1535 as type };
                    const reference_1535: boolean;
                    export { reference_1535 as reference };
                    const many_1535: boolean;
                    export { many_1535 as many };
                    const inverse_1535: boolean;
                    export { inverse_1535 as inverse };
                }
                export namespace ShearDeformationAreaZAsString {
                    const type_1536: string;
                    export { type_1536 as type };
                    const reference_1536: boolean;
                    export { reference_1536 as reference };
                    const many_1536: boolean;
                    export { many_1536 as many };
                    const inverse_1536: boolean;
                    export { inverse_1536 as inverse };
                }
                export namespace ShearDeformationAreaY {
                    const type_1537: string;
                    export { type_1537 as type };
                    const reference_1537: boolean;
                    export { reference_1537 as reference };
                    const many_1537: boolean;
                    export { many_1537 as many };
                    const inverse_1537: boolean;
                    export { inverse_1537 as inverse };
                }
                export namespace ShearDeformationAreaYAsString {
                    const type_1538: string;
                    export { type_1538 as type };
                    const reference_1538: boolean;
                    export { reference_1538 as reference };
                    const many_1538: boolean;
                    export { many_1538 as many };
                    const inverse_1538: boolean;
                    export { inverse_1538 as inverse };
                }
                export namespace MaximumSectionModulusY {
                    const type_1539: string;
                    export { type_1539 as type };
                    const reference_1539: boolean;
                    export { reference_1539 as reference };
                    const many_1539: boolean;
                    export { many_1539 as many };
                    const inverse_1539: boolean;
                    export { inverse_1539 as inverse };
                }
                export namespace MaximumSectionModulusYAsString {
                    const type_1540: string;
                    export { type_1540 as type };
                    const reference_1540: boolean;
                    export { reference_1540 as reference };
                    const many_1540: boolean;
                    export { many_1540 as many };
                    const inverse_1540: boolean;
                    export { inverse_1540 as inverse };
                }
                export namespace MinimumSectionModulusY {
                    const type_1541: string;
                    export { type_1541 as type };
                    const reference_1541: boolean;
                    export { reference_1541 as reference };
                    const many_1541: boolean;
                    export { many_1541 as many };
                    const inverse_1541: boolean;
                    export { inverse_1541 as inverse };
                }
                export namespace MinimumSectionModulusYAsString {
                    const type_1542: string;
                    export { type_1542 as type };
                    const reference_1542: boolean;
                    export { reference_1542 as reference };
                    const many_1542: boolean;
                    export { many_1542 as many };
                    const inverse_1542: boolean;
                    export { inverse_1542 as inverse };
                }
                export namespace MaximumSectionModulusZ {
                    const type_1543: string;
                    export { type_1543 as type };
                    const reference_1543: boolean;
                    export { reference_1543 as reference };
                    const many_1543: boolean;
                    export { many_1543 as many };
                    const inverse_1543: boolean;
                    export { inverse_1543 as inverse };
                }
                export namespace MaximumSectionModulusZAsString {
                    const type_1544: string;
                    export { type_1544 as type };
                    const reference_1544: boolean;
                    export { reference_1544 as reference };
                    const many_1544: boolean;
                    export { many_1544 as many };
                    const inverse_1544: boolean;
                    export { inverse_1544 as inverse };
                }
                export namespace MinimumSectionModulusZ {
                    const type_1545: string;
                    export { type_1545 as type };
                    const reference_1545: boolean;
                    export { reference_1545 as reference };
                    const many_1545: boolean;
                    export { many_1545 as many };
                    const inverse_1545: boolean;
                    export { inverse_1545 as inverse };
                }
                export namespace MinimumSectionModulusZAsString {
                    const type_1546: string;
                    export { type_1546 as type };
                    const reference_1546: boolean;
                    export { reference_1546 as reference };
                    const many_1546: boolean;
                    export { many_1546 as many };
                    const inverse_1546: boolean;
                    export { inverse_1546 as inverse };
                }
                export namespace TorsionalSectionModulus {
                    const type_1547: string;
                    export { type_1547 as type };
                    const reference_1547: boolean;
                    export { reference_1547 as reference };
                    const many_1547: boolean;
                    export { many_1547 as many };
                    const inverse_1547: boolean;
                    export { inverse_1547 as inverse };
                }
                export namespace TorsionalSectionModulusAsString {
                    const type_1548: string;
                    export { type_1548 as type };
                    const reference_1548: boolean;
                    export { reference_1548 as reference };
                    const many_1548: boolean;
                    export { many_1548 as many };
                    const inverse_1548: boolean;
                    export { inverse_1548 as inverse };
                }
                export namespace CentreOfGravityInX_2 {
                    const type_1549: string;
                    export { type_1549 as type };
                    const reference_1549: boolean;
                    export { reference_1549 as reference };
                    const many_1549: boolean;
                    export { many_1549 as many };
                    const inverse_1549: boolean;
                    export { inverse_1549 as inverse };
                }
                export { CentreOfGravityInX_2 as CentreOfGravityInX };
                export namespace CentreOfGravityInXAsString_2 {
                    const type_1550: string;
                    export { type_1550 as type };
                    const reference_1550: boolean;
                    export { reference_1550 as reference };
                    const many_1550: boolean;
                    export { many_1550 as many };
                    const inverse_1550: boolean;
                    export { inverse_1550 as inverse };
                }
                export { CentreOfGravityInXAsString_2 as CentreOfGravityInXAsString };
                export namespace CentreOfGravityInY_4 {
                    const type_1551: string;
                    export { type_1551 as type };
                    const reference_1551: boolean;
                    export { reference_1551 as reference };
                    const many_1551: boolean;
                    export { many_1551 as many };
                    const inverse_1551: boolean;
                    export { inverse_1551 as inverse };
                }
                export { CentreOfGravityInY_4 as CentreOfGravityInY };
                export namespace CentreOfGravityInYAsString_4 {
                    const type_1552: string;
                    export { type_1552 as type };
                    const reference_1552: boolean;
                    export { reference_1552 as reference };
                    const many_1552: boolean;
                    export { many_1552 as many };
                    const inverse_1552: boolean;
                    export { inverse_1552 as inverse };
                }
                export { CentreOfGravityInYAsString_4 as CentreOfGravityInYAsString };
            }
            export { fields_560 as fields };
        }
        namespace IfcStructuralReaction {
            const domain_561: string;
            export { domain_561 as domain };
            const superclasses_561: string[];
            export { superclasses_561 as superclasses };
            export namespace fields_561 {
                namespace Causes {
                    const type_1553: string;
                    export { type_1553 as type };
                    const reference_1553: boolean;
                    export { reference_1553 as reference };
                    const many_1553: boolean;
                    export { many_1553 as many };
                    const inverse_1553: boolean;
                    export { inverse_1553 as inverse };
                }
            }
            export { fields_561 as fields };
        }
        namespace IfcStructuralResultGroup {
            const domain_562: string;
            export { domain_562 as domain };
            const superclasses_562: string[];
            export { superclasses_562 as superclasses };
            export namespace fields_562 {
                namespace TheoryType {
                    const type_1554: string;
                    export { type_1554 as type };
                    const reference_1554: boolean;
                    export { reference_1554 as reference };
                    const many_1554: boolean;
                    export { many_1554 as many };
                    const inverse_1554: boolean;
                    export { inverse_1554 as inverse };
                }
                namespace ResultForLoadGroup {
                    const type_1555: string;
                    export { type_1555 as type };
                    const reference_1555: boolean;
                    export { reference_1555 as reference };
                    const many_1555: boolean;
                    export { many_1555 as many };
                    const inverse_1555: boolean;
                    export { inverse_1555 as inverse };
                }
                namespace IsLinear {
                    const type_1556: string;
                    export { type_1556 as type };
                    const reference_1556: boolean;
                    export { reference_1556 as reference };
                    const many_1556: boolean;
                    export { many_1556 as many };
                    const inverse_1556: boolean;
                    export { inverse_1556 as inverse };
                }
                namespace ResultGroupFor {
                    const type_1557: string;
                    export { type_1557 as type };
                    const reference_1557: boolean;
                    export { reference_1557 as reference };
                    const many_1557: boolean;
                    export { many_1557 as many };
                    const inverse_1557: boolean;
                    export { inverse_1557 as inverse };
                }
            }
            export { fields_562 as fields };
        }
        namespace IfcStructuralSteelProfileProperties {
            const domain_563: string;
            export { domain_563 as domain };
            const superclasses_563: string[];
            export { superclasses_563 as superclasses };
            export namespace fields_563 {
                namespace ShearAreaZ {
                    const type_1558: string;
                    export { type_1558 as type };
                    const reference_1558: boolean;
                    export { reference_1558 as reference };
                    const many_1558: boolean;
                    export { many_1558 as many };
                    const inverse_1558: boolean;
                    export { inverse_1558 as inverse };
                }
                namespace ShearAreaZAsString {
                    const type_1559: string;
                    export { type_1559 as type };
                    const reference_1559: boolean;
                    export { reference_1559 as reference };
                    const many_1559: boolean;
                    export { many_1559 as many };
                    const inverse_1559: boolean;
                    export { inverse_1559 as inverse };
                }
                namespace ShearAreaY {
                    const type_1560: string;
                    export { type_1560 as type };
                    const reference_1560: boolean;
                    export { reference_1560 as reference };
                    const many_1560: boolean;
                    export { many_1560 as many };
                    const inverse_1560: boolean;
                    export { inverse_1560 as inverse };
                }
                namespace ShearAreaYAsString {
                    const type_1561: string;
                    export { type_1561 as type };
                    const reference_1561: boolean;
                    export { reference_1561 as reference };
                    const many_1561: boolean;
                    export { many_1561 as many };
                    const inverse_1561: boolean;
                    export { inverse_1561 as inverse };
                }
                namespace PlasticShapeFactorY {
                    const type_1562: string;
                    export { type_1562 as type };
                    const reference_1562: boolean;
                    export { reference_1562 as reference };
                    const many_1562: boolean;
                    export { many_1562 as many };
                    const inverse_1562: boolean;
                    export { inverse_1562 as inverse };
                }
                namespace PlasticShapeFactorYAsString {
                    const type_1563: string;
                    export { type_1563 as type };
                    const reference_1563: boolean;
                    export { reference_1563 as reference };
                    const many_1563: boolean;
                    export { many_1563 as many };
                    const inverse_1563: boolean;
                    export { inverse_1563 as inverse };
                }
                namespace PlasticShapeFactorZ {
                    const type_1564: string;
                    export { type_1564 as type };
                    const reference_1564: boolean;
                    export { reference_1564 as reference };
                    const many_1564: boolean;
                    export { many_1564 as many };
                    const inverse_1564: boolean;
                    export { inverse_1564 as inverse };
                }
                namespace PlasticShapeFactorZAsString {
                    const type_1565: string;
                    export { type_1565 as type };
                    const reference_1565: boolean;
                    export { reference_1565 as reference };
                    const many_1565: boolean;
                    export { many_1565 as many };
                    const inverse_1565: boolean;
                    export { inverse_1565 as inverse };
                }
            }
            export { fields_563 as fields };
        }
        namespace IfcStructuralSurfaceConnection {
            const domain_564: string;
            export { domain_564 as domain };
            const superclasses_564: string[];
            export { superclasses_564 as superclasses };
            const fields_564: {};
            export { fields_564 as fields };
        }
        namespace IfcStructuralSurfaceMember {
            const domain_565: string;
            export { domain_565 as domain };
            const superclasses_565: string[];
            export { superclasses_565 as superclasses };
            export namespace fields_565 {
                export namespace PredefinedType_76 {
                    const type_1566: string;
                    export { type_1566 as type };
                    const reference_1566: boolean;
                    export { reference_1566 as reference };
                    const many_1566: boolean;
                    export { many_1566 as many };
                    const inverse_1566: boolean;
                    export { inverse_1566 as inverse };
                }
                export { PredefinedType_76 as PredefinedType };
                export namespace Thickness_3 {
                    const type_1567: string;
                    export { type_1567 as type };
                    const reference_1567: boolean;
                    export { reference_1567 as reference };
                    const many_1567: boolean;
                    export { many_1567 as many };
                    const inverse_1567: boolean;
                    export { inverse_1567 as inverse };
                }
                export { Thickness_3 as Thickness };
                export namespace ThicknessAsString_3 {
                    const type_1568: string;
                    export { type_1568 as type };
                    const reference_1568: boolean;
                    export { reference_1568 as reference };
                    const many_1568: boolean;
                    export { many_1568 as many };
                    const inverse_1568: boolean;
                    export { inverse_1568 as inverse };
                }
                export { ThicknessAsString_3 as ThicknessAsString };
            }
            export { fields_565 as fields };
        }
        namespace IfcStructuralSurfaceMemberVarying {
            const domain_566: string;
            export { domain_566 as domain };
            const superclasses_566: string[];
            export { superclasses_566 as superclasses };
            export namespace fields_566 {
                namespace SubsequentThickness {
                    const type_1569: string;
                    export { type_1569 as type };
                    const reference_1569: boolean;
                    export { reference_1569 as reference };
                    const many_1569: boolean;
                    export { many_1569 as many };
                    const inverse_1569: boolean;
                    export { inverse_1569 as inverse };
                }
                namespace SubsequentThicknessAsString {
                    const type_1570: string;
                    export { type_1570 as type };
                    const reference_1570: boolean;
                    export { reference_1570 as reference };
                    const many_1570: boolean;
                    export { many_1570 as many };
                    const inverse_1570: boolean;
                    export { inverse_1570 as inverse };
                }
                namespace VaryingThicknessLocation {
                    const type_1571: string;
                    export { type_1571 as type };
                    const reference_1571: boolean;
                    export { reference_1571 as reference };
                    const many_1571: boolean;
                    export { many_1571 as many };
                    const inverse_1571: boolean;
                    export { inverse_1571 as inverse };
                }
                namespace VaryingThickness {
                    const type_1572: string;
                    export { type_1572 as type };
                    const reference_1572: boolean;
                    export { reference_1572 as reference };
                    const many_1572: boolean;
                    export { many_1572 as many };
                    const inverse_1572: boolean;
                    export { inverse_1572 as inverse };
                }
                namespace VaryingThicknessAsString {
                    const type_1573: string;
                    export { type_1573 as type };
                    const reference_1573: boolean;
                    export { reference_1573 as reference };
                    const many_1573: boolean;
                    export { many_1573 as many };
                    const inverse_1573: boolean;
                    export { inverse_1573 as inverse };
                }
            }
            export { fields_566 as fields };
        }
        namespace IfcStructuredDimensionCallout {
            const domain_567: string;
            export { domain_567 as domain };
            const superclasses_567: string[];
            export { superclasses_567 as superclasses };
            const fields_567: {};
            export { fields_567 as fields };
        }
        namespace IfcStyleModel {
            const domain_568: string;
            export { domain_568 as domain };
            const superclasses_568: string[];
            export { superclasses_568 as superclasses };
            const fields_568: {};
            export { fields_568 as fields };
        }
        namespace IfcStyledItem {
            const domain_569: string;
            export { domain_569 as domain };
            const superclasses_569: string[];
            export { superclasses_569 as superclasses };
            export namespace fields_569 {
                export namespace Item_1 {
                    const type_1574: string;
                    export { type_1574 as type };
                    const reference_1574: boolean;
                    export { reference_1574 as reference };
                    const many_1574: boolean;
                    export { many_1574 as many };
                    const inverse_1574: boolean;
                    export { inverse_1574 as inverse };
                }
                export { Item_1 as Item };
                export namespace Styles_1 {
                    const type_1575: string;
                    export { type_1575 as type };
                    const reference_1575: boolean;
                    export { reference_1575 as reference };
                    const many_1575: boolean;
                    export { many_1575 as many };
                    const inverse_1575: boolean;
                    export { inverse_1575 as inverse };
                }
                export { Styles_1 as Styles };
                export namespace Name_38 {
                    const type_1576: string;
                    export { type_1576 as type };
                    const reference_1576: boolean;
                    export { reference_1576 as reference };
                    const many_1576: boolean;
                    export { many_1576 as many };
                    const inverse_1576: boolean;
                    export { inverse_1576 as inverse };
                }
                export { Name_38 as Name };
            }
            export { fields_569 as fields };
        }
        namespace IfcStyledRepresentation {
            const domain_570: string;
            export { domain_570 as domain };
            const superclasses_570: string[];
            export { superclasses_570 as superclasses };
            const fields_570: {};
            export { fields_570 as fields };
        }
        namespace IfcSubContractResource {
            const domain_571: string;
            export { domain_571 as domain };
            const superclasses_571: string[];
            export { superclasses_571 as superclasses };
            export namespace fields_571 {
                namespace SubContractor {
                    const type_1577: string;
                    export { type_1577 as type };
                    const reference_1577: boolean;
                    export { reference_1577 as reference };
                    const many_1577: boolean;
                    export { many_1577 as many };
                    const inverse_1577: boolean;
                    export { inverse_1577 as inverse };
                }
                namespace JobDescription {
                    const type_1578: string;
                    export { type_1578 as type };
                    const reference_1578: boolean;
                    export { reference_1578 as reference };
                    const many_1578: boolean;
                    export { many_1578 as many };
                    const inverse_1578: boolean;
                    export { inverse_1578 as inverse };
                }
            }
            export { fields_571 as fields };
        }
        namespace IfcSubedge {
            const domain_572: string;
            export { domain_572 as domain };
            const superclasses_572: string[];
            export { superclasses_572 as superclasses };
            export namespace fields_572 {
                namespace ParentEdge {
                    const type_1579: string;
                    export { type_1579 as type };
                    const reference_1579: boolean;
                    export { reference_1579 as reference };
                    const many_1579: boolean;
                    export { many_1579 as many };
                    const inverse_1579: boolean;
                    export { inverse_1579 as inverse };
                }
            }
            export { fields_572 as fields };
        }
        namespace IfcSurface {
            const domain_573: string;
            export { domain_573 as domain };
            const superclasses_573: string[];
            export { superclasses_573 as superclasses };
            const fields_573: {};
            export { fields_573 as fields };
        }
        namespace IfcSurfaceCurveSweptAreaSolid {
            const domain_574: string;
            export { domain_574 as domain };
            const superclasses_574: string[];
            export { superclasses_574 as superclasses };
            export namespace fields_574 {
                namespace Directrix {
                    const type_1580: string;
                    export { type_1580 as type };
                    const reference_1580: boolean;
                    export { reference_1580 as reference };
                    const many_1580: boolean;
                    export { many_1580 as many };
                    const inverse_1580: boolean;
                    export { inverse_1580 as inverse };
                }
                namespace StartParam {
                    const type_1581: string;
                    export { type_1581 as type };
                    const reference_1581: boolean;
                    export { reference_1581 as reference };
                    const many_1581: boolean;
                    export { many_1581 as many };
                    const inverse_1581: boolean;
                    export { inverse_1581 as inverse };
                }
                namespace StartParamAsString {
                    const type_1582: string;
                    export { type_1582 as type };
                    const reference_1582: boolean;
                    export { reference_1582 as reference };
                    const many_1582: boolean;
                    export { many_1582 as many };
                    const inverse_1582: boolean;
                    export { inverse_1582 as inverse };
                }
                namespace EndParam {
                    const type_1583: string;
                    export { type_1583 as type };
                    const reference_1583: boolean;
                    export { reference_1583 as reference };
                    const many_1583: boolean;
                    export { many_1583 as many };
                    const inverse_1583: boolean;
                    export { inverse_1583 as inverse };
                }
                namespace EndParamAsString {
                    const type_1584: string;
                    export { type_1584 as type };
                    const reference_1584: boolean;
                    export { reference_1584 as reference };
                    const many_1584: boolean;
                    export { many_1584 as many };
                    const inverse_1584: boolean;
                    export { inverse_1584 as inverse };
                }
                namespace ReferenceSurface {
                    const type_1585: string;
                    export { type_1585 as type };
                    const reference_1585: boolean;
                    export { reference_1585 as reference };
                    const many_1585: boolean;
                    export { many_1585 as many };
                    const inverse_1585: boolean;
                    export { inverse_1585 as inverse };
                }
            }
            export { fields_574 as fields };
        }
        namespace IfcSurfaceOfLinearExtrusion {
            const domain_575: string;
            export { domain_575 as domain };
            const superclasses_575: string[];
            export { superclasses_575 as superclasses };
            export namespace fields_575 {
                export namespace ExtrudedDirection_1 {
                    const type_1586: string;
                    export { type_1586 as type };
                    const reference_1586: boolean;
                    export { reference_1586 as reference };
                    const many_1586: boolean;
                    export { many_1586 as many };
                    const inverse_1586: boolean;
                    export { inverse_1586 as inverse };
                }
                export { ExtrudedDirection_1 as ExtrudedDirection };
                export namespace Depth_3 {
                    const type_1587: string;
                    export { type_1587 as type };
                    const reference_1587: boolean;
                    export { reference_1587 as reference };
                    const many_1587: boolean;
                    export { many_1587 as many };
                    const inverse_1587: boolean;
                    export { inverse_1587 as inverse };
                }
                export { Depth_3 as Depth };
                export namespace DepthAsString_3 {
                    const type_1588: string;
                    export { type_1588 as type };
                    const reference_1588: boolean;
                    export { reference_1588 as reference };
                    const many_1588: boolean;
                    export { many_1588 as many };
                    const inverse_1588: boolean;
                    export { inverse_1588 as inverse };
                }
                export { DepthAsString_3 as DepthAsString };
            }
            export { fields_575 as fields };
        }
        namespace IfcSurfaceOfRevolution {
            const domain_576: string;
            export { domain_576 as domain };
            const superclasses_576: string[];
            export { superclasses_576 as superclasses };
            export namespace fields_576 {
                namespace AxisPosition {
                    const type_1589: string;
                    export { type_1589 as type };
                    const reference_1589: boolean;
                    export { reference_1589 as reference };
                    const many_1589: boolean;
                    export { many_1589 as many };
                    const inverse_1589: boolean;
                    export { inverse_1589 as inverse };
                }
            }
            export { fields_576 as fields };
        }
        namespace IfcSurfaceStyle {
            const domain_577: string;
            export { domain_577 as domain };
            const superclasses_577: string[];
            export { superclasses_577 as superclasses };
            export namespace fields_577 {
                export namespace Side {
                    const type_1590: string;
                    export { type_1590 as type };
                    const reference_1590: boolean;
                    export { reference_1590 as reference };
                    const many_1590: boolean;
                    export { many_1590 as many };
                    const inverse_1590: boolean;
                    export { inverse_1590 as inverse };
                }
                export namespace Styles_2 {
                    const type_1591: string;
                    export { type_1591 as type };
                    const reference_1591: boolean;
                    export { reference_1591 as reference };
                    const many_1591: boolean;
                    export { many_1591 as many };
                    const inverse_1591: boolean;
                    export { inverse_1591 as inverse };
                }
                export { Styles_2 as Styles };
            }
            export { fields_577 as fields };
        }
        namespace IfcSurfaceStyleLighting {
            const domain_578: string;
            export { domain_578 as domain };
            const superclasses_578: string[];
            export { superclasses_578 as superclasses };
            export namespace fields_578 {
                namespace DiffuseTransmissionColour {
                    const type_1592: string;
                    export { type_1592 as type };
                    const reference_1592: boolean;
                    export { reference_1592 as reference };
                    const many_1592: boolean;
                    export { many_1592 as many };
                    const inverse_1592: boolean;
                    export { inverse_1592 as inverse };
                }
                namespace DiffuseReflectionColour {
                    const type_1593: string;
                    export { type_1593 as type };
                    const reference_1593: boolean;
                    export { reference_1593 as reference };
                    const many_1593: boolean;
                    export { many_1593 as many };
                    const inverse_1593: boolean;
                    export { inverse_1593 as inverse };
                }
                namespace TransmissionColour {
                    const type_1594: string;
                    export { type_1594 as type };
                    const reference_1594: boolean;
                    export { reference_1594 as reference };
                    const many_1594: boolean;
                    export { many_1594 as many };
                    const inverse_1594: boolean;
                    export { inverse_1594 as inverse };
                }
                namespace ReflectanceColour {
                    const type_1595: string;
                    export { type_1595 as type };
                    const reference_1595: boolean;
                    export { reference_1595 as reference };
                    const many_1595: boolean;
                    export { many_1595 as many };
                    const inverse_1595: boolean;
                    export { inverse_1595 as inverse };
                }
            }
            export { fields_578 as fields };
        }
        namespace IfcSurfaceStyleRefraction {
            const domain_579: string;
            export { domain_579 as domain };
            const superclasses_579: string[];
            export { superclasses_579 as superclasses };
            export namespace fields_579 {
                namespace RefractionIndex {
                    const type_1596: string;
                    export { type_1596 as type };
                    const reference_1596: boolean;
                    export { reference_1596 as reference };
                    const many_1596: boolean;
                    export { many_1596 as many };
                    const inverse_1596: boolean;
                    export { inverse_1596 as inverse };
                }
                namespace RefractionIndexAsString {
                    const type_1597: string;
                    export { type_1597 as type };
                    const reference_1597: boolean;
                    export { reference_1597 as reference };
                    const many_1597: boolean;
                    export { many_1597 as many };
                    const inverse_1597: boolean;
                    export { inverse_1597 as inverse };
                }
                namespace DispersionFactor {
                    const type_1598: string;
                    export { type_1598 as type };
                    const reference_1598: boolean;
                    export { reference_1598 as reference };
                    const many_1598: boolean;
                    export { many_1598 as many };
                    const inverse_1598: boolean;
                    export { inverse_1598 as inverse };
                }
                namespace DispersionFactorAsString {
                    const type_1599: string;
                    export { type_1599 as type };
                    const reference_1599: boolean;
                    export { reference_1599 as reference };
                    const many_1599: boolean;
                    export { many_1599 as many };
                    const inverse_1599: boolean;
                    export { inverse_1599 as inverse };
                }
            }
            export { fields_579 as fields };
        }
        namespace IfcSurfaceStyleRendering {
            const domain_580: string;
            export { domain_580 as domain };
            const superclasses_580: string[];
            export { superclasses_580 as superclasses };
            export namespace fields_580 {
                export namespace Transparency {
                    const type_1600: string;
                    export { type_1600 as type };
                    const reference_1600: boolean;
                    export { reference_1600 as reference };
                    const many_1600: boolean;
                    export { many_1600 as many };
                    const inverse_1600: boolean;
                    export { inverse_1600 as inverse };
                }
                export namespace TransparencyAsString {
                    const type_1601: string;
                    export { type_1601 as type };
                    const reference_1601: boolean;
                    export { reference_1601 as reference };
                    const many_1601: boolean;
                    export { many_1601 as many };
                    const inverse_1601: boolean;
                    export { inverse_1601 as inverse };
                }
                export namespace DiffuseColour {
                    const type_1602: string;
                    export { type_1602 as type };
                    const reference_1602: boolean;
                    export { reference_1602 as reference };
                    const many_1602: boolean;
                    export { many_1602 as many };
                    const inverse_1602: boolean;
                    export { inverse_1602 as inverse };
                }
                export namespace TransmissionColour_1 {
                    const type_1603: string;
                    export { type_1603 as type };
                    const reference_1603: boolean;
                    export { reference_1603 as reference };
                    const many_1603: boolean;
                    export { many_1603 as many };
                    const inverse_1603: boolean;
                    export { inverse_1603 as inverse };
                }
                export { TransmissionColour_1 as TransmissionColour };
                export namespace DiffuseTransmissionColour_1 {
                    const type_1604: string;
                    export { type_1604 as type };
                    const reference_1604: boolean;
                    export { reference_1604 as reference };
                    const many_1604: boolean;
                    export { many_1604 as many };
                    const inverse_1604: boolean;
                    export { inverse_1604 as inverse };
                }
                export { DiffuseTransmissionColour_1 as DiffuseTransmissionColour };
                export namespace ReflectionColour {
                    const type_1605: string;
                    export { type_1605 as type };
                    const reference_1605: boolean;
                    export { reference_1605 as reference };
                    const many_1605: boolean;
                    export { many_1605 as many };
                    const inverse_1605: boolean;
                    export { inverse_1605 as inverse };
                }
                export namespace SpecularColour {
                    const type_1606: string;
                    export { type_1606 as type };
                    const reference_1606: boolean;
                    export { reference_1606 as reference };
                    const many_1606: boolean;
                    export { many_1606 as many };
                    const inverse_1606: boolean;
                    export { inverse_1606 as inverse };
                }
                export namespace SpecularHighlight {
                    const type_1607: string;
                    export { type_1607 as type };
                    const reference_1607: boolean;
                    export { reference_1607 as reference };
                    const many_1607: boolean;
                    export { many_1607 as many };
                    const inverse_1607: boolean;
                    export { inverse_1607 as inverse };
                }
                export namespace ReflectanceMethod {
                    const type_1608: string;
                    export { type_1608 as type };
                    const reference_1608: boolean;
                    export { reference_1608 as reference };
                    const many_1608: boolean;
                    export { many_1608 as many };
                    const inverse_1608: boolean;
                    export { inverse_1608 as inverse };
                }
            }
            export { fields_580 as fields };
        }
        namespace IfcSurfaceStyleShading {
            const domain_581: string;
            export { domain_581 as domain };
            const superclasses_581: string[];
            export { superclasses_581 as superclasses };
            export namespace fields_581 {
                namespace SurfaceColour {
                    const type_1609: string;
                    export { type_1609 as type };
                    const reference_1609: boolean;
                    export { reference_1609 as reference };
                    const many_1609: boolean;
                    export { many_1609 as many };
                    const inverse_1609: boolean;
                    export { inverse_1609 as inverse };
                }
            }
            export { fields_581 as fields };
        }
        namespace IfcSurfaceStyleWithTextures {
            const domain_582: string;
            export { domain_582 as domain };
            const superclasses_582: string[];
            export { superclasses_582 as superclasses };
            export namespace fields_582 {
                namespace Textures {
                    const type_1610: string;
                    export { type_1610 as type };
                    const reference_1610: boolean;
                    export { reference_1610 as reference };
                    const many_1610: boolean;
                    export { many_1610 as many };
                    const inverse_1610: boolean;
                    export { inverse_1610 as inverse };
                }
            }
            export { fields_582 as fields };
        }
        namespace IfcSurfaceTexture {
            const domain_583: string;
            export { domain_583 as domain };
            const superclasses_583: any[];
            export { superclasses_583 as superclasses };
            export namespace fields_583 {
                namespace RepeatS {
                    const type_1611: string;
                    export { type_1611 as type };
                    const reference_1611: boolean;
                    export { reference_1611 as reference };
                    const many_1611: boolean;
                    export { many_1611 as many };
                    const inverse_1611: boolean;
                    export { inverse_1611 as inverse };
                }
                namespace RepeatT {
                    const type_1612: string;
                    export { type_1612 as type };
                    const reference_1612: boolean;
                    export { reference_1612 as reference };
                    const many_1612: boolean;
                    export { many_1612 as many };
                    const inverse_1612: boolean;
                    export { inverse_1612 as inverse };
                }
                namespace TextureType {
                    const type_1613: string;
                    export { type_1613 as type };
                    const reference_1613: boolean;
                    export { reference_1613 as reference };
                    const many_1613: boolean;
                    export { many_1613 as many };
                    const inverse_1613: boolean;
                    export { inverse_1613 as inverse };
                }
                namespace TextureTransform {
                    const type_1614: string;
                    export { type_1614 as type };
                    const reference_1614: boolean;
                    export { reference_1614 as reference };
                    const many_1614: boolean;
                    export { many_1614 as many };
                    const inverse_1614: boolean;
                    export { inverse_1614 as inverse };
                }
            }
            export { fields_583 as fields };
        }
        namespace IfcSweptAreaSolid {
            const domain_584: string;
            export { domain_584 as domain };
            const superclasses_584: string[];
            export { superclasses_584 as superclasses };
            export namespace fields_584 {
                export namespace SweptArea {
                    const type_1615: string;
                    export { type_1615 as type };
                    const reference_1615: boolean;
                    export { reference_1615 as reference };
                    const many_1615: boolean;
                    export { many_1615 as many };
                    const inverse_1615: boolean;
                    export { inverse_1615 as inverse };
                }
                export namespace Position_7 {
                    const type_1616: string;
                    export { type_1616 as type };
                    const reference_1616: boolean;
                    export { reference_1616 as reference };
                    const many_1616: boolean;
                    export { many_1616 as many };
                    const inverse_1616: boolean;
                    export { inverse_1616 as inverse };
                }
                export { Position_7 as Position };
            }
            export { fields_584 as fields };
        }
        namespace IfcSweptDiskSolid {
            const domain_585: string;
            export { domain_585 as domain };
            const superclasses_585: string[];
            export { superclasses_585 as superclasses };
            export namespace fields_585 {
                export namespace Directrix_1 {
                    const type_1617: string;
                    export { type_1617 as type };
                    const reference_1617: boolean;
                    export { reference_1617 as reference };
                    const many_1617: boolean;
                    export { many_1617 as many };
                    const inverse_1617: boolean;
                    export { inverse_1617 as inverse };
                }
                export { Directrix_1 as Directrix };
                export namespace Radius_8 {
                    const type_1618: string;
                    export { type_1618 as type };
                    const reference_1618: boolean;
                    export { reference_1618 as reference };
                    const many_1618: boolean;
                    export { many_1618 as many };
                    const inverse_1618: boolean;
                    export { inverse_1618 as inverse };
                }
                export { Radius_8 as Radius };
                export namespace RadiusAsString_8 {
                    const type_1619: string;
                    export { type_1619 as type };
                    const reference_1619: boolean;
                    export { reference_1619 as reference };
                    const many_1619: boolean;
                    export { many_1619 as many };
                    const inverse_1619: boolean;
                    export { inverse_1619 as inverse };
                }
                export { RadiusAsString_8 as RadiusAsString };
                export namespace InnerRadius {
                    const type_1620: string;
                    export { type_1620 as type };
                    const reference_1620: boolean;
                    export { reference_1620 as reference };
                    const many_1620: boolean;
                    export { many_1620 as many };
                    const inverse_1620: boolean;
                    export { inverse_1620 as inverse };
                }
                export namespace InnerRadiusAsString {
                    const type_1621: string;
                    export { type_1621 as type };
                    const reference_1621: boolean;
                    export { reference_1621 as reference };
                    const many_1621: boolean;
                    export { many_1621 as many };
                    const inverse_1621: boolean;
                    export { inverse_1621 as inverse };
                }
                export namespace StartParam_1 {
                    const type_1622: string;
                    export { type_1622 as type };
                    const reference_1622: boolean;
                    export { reference_1622 as reference };
                    const many_1622: boolean;
                    export { many_1622 as many };
                    const inverse_1622: boolean;
                    export { inverse_1622 as inverse };
                }
                export { StartParam_1 as StartParam };
                export namespace StartParamAsString_1 {
                    const type_1623: string;
                    export { type_1623 as type };
                    const reference_1623: boolean;
                    export { reference_1623 as reference };
                    const many_1623: boolean;
                    export { many_1623 as many };
                    const inverse_1623: boolean;
                    export { inverse_1623 as inverse };
                }
                export { StartParamAsString_1 as StartParamAsString };
                export namespace EndParam_1 {
                    const type_1624: string;
                    export { type_1624 as type };
                    const reference_1624: boolean;
                    export { reference_1624 as reference };
                    const many_1624: boolean;
                    export { many_1624 as many };
                    const inverse_1624: boolean;
                    export { inverse_1624 as inverse };
                }
                export { EndParam_1 as EndParam };
                export namespace EndParamAsString_1 {
                    const type_1625: string;
                    export { type_1625 as type };
                    const reference_1625: boolean;
                    export { reference_1625 as reference };
                    const many_1625: boolean;
                    export { many_1625 as many };
                    const inverse_1625: boolean;
                    export { inverse_1625 as inverse };
                }
                export { EndParamAsString_1 as EndParamAsString };
            }
            export { fields_585 as fields };
        }
        namespace IfcSweptSurface {
            const domain_586: string;
            export { domain_586 as domain };
            const superclasses_586: string[];
            export { superclasses_586 as superclasses };
            export namespace fields_586 {
                export namespace SweptCurve {
                    const type_1626: string;
                    export { type_1626 as type };
                    const reference_1626: boolean;
                    export { reference_1626 as reference };
                    const many_1626: boolean;
                    export { many_1626 as many };
                    const inverse_1626: boolean;
                    export { inverse_1626 as inverse };
                }
                export namespace Position_8 {
                    const type_1627: string;
                    export { type_1627 as type };
                    const reference_1627: boolean;
                    export { reference_1627 as reference };
                    const many_1627: boolean;
                    export { many_1627 as many };
                    const inverse_1627: boolean;
                    export { inverse_1627 as inverse };
                }
                export { Position_8 as Position };
                export namespace Dim_20 {
                    const type_1628: string;
                    export { type_1628 as type };
                    const reference_1628: boolean;
                    export { reference_1628 as reference };
                    const many_1628: boolean;
                    export { many_1628 as many };
                    const inverse_1628: boolean;
                    export { inverse_1628 as inverse };
                }
                export { Dim_20 as Dim };
            }
            export { fields_586 as fields };
        }
        namespace IfcSwitchingDeviceType {
            const domain_587: string;
            export { domain_587 as domain };
            const superclasses_587: string[];
            export { superclasses_587 as superclasses };
            export namespace fields_587 {
                export namespace PredefinedType_77 {
                    const type_1629: string;
                    export { type_1629 as type };
                    const reference_1629: boolean;
                    export { reference_1629 as reference };
                    const many_1629: boolean;
                    export { many_1629 as many };
                    const inverse_1629: boolean;
                    export { inverse_1629 as inverse };
                }
                export { PredefinedType_77 as PredefinedType };
            }
            export { fields_587 as fields };
        }
        namespace IfcSymbolStyle {
            const domain_588: string;
            export { domain_588 as domain };
            const superclasses_588: string[];
            export { superclasses_588 as superclasses };
            export namespace fields_588 {
                namespace StyleOfSymbol {
                    const type_1630: string;
                    export { type_1630 as type };
                    const reference_1630: boolean;
                    export { reference_1630 as reference };
                    const many_1630: boolean;
                    export { many_1630 as many };
                    const inverse_1630: boolean;
                    export { inverse_1630 as inverse };
                }
            }
            export { fields_588 as fields };
        }
        namespace IfcSystem {
            const domain_589: string;
            export { domain_589 as domain };
            const superclasses_589: string[];
            export { superclasses_589 as superclasses };
            export namespace fields_589 {
                namespace ServicesBuildings {
                    const type_1631: string;
                    export { type_1631 as type };
                    const reference_1631: boolean;
                    export { reference_1631 as reference };
                    const many_1631: boolean;
                    export { many_1631 as many };
                    const inverse_1631: boolean;
                    export { inverse_1631 as inverse };
                }
            }
            export { fields_589 as fields };
        }
        namespace IfcSystemFurnitureElementType {
            const domain_590: string;
            export { domain_590 as domain };
            const superclasses_590: string[];
            export { superclasses_590 as superclasses };
            const fields_590: {};
            export { fields_590 as fields };
        }
        namespace IfcTShapeProfileDef {
            const domain_591: string;
            export { domain_591 as domain };
            const superclasses_591: string[];
            export { superclasses_591 as superclasses };
            export namespace fields_591 {
                export namespace Depth_4 {
                    const type_1632: string;
                    export { type_1632 as type };
                    const reference_1632: boolean;
                    export { reference_1632 as reference };
                    const many_1632: boolean;
                    export { many_1632 as many };
                    const inverse_1632: boolean;
                    export { inverse_1632 as inverse };
                }
                export { Depth_4 as Depth };
                export namespace DepthAsString_4 {
                    const type_1633: string;
                    export { type_1633 as type };
                    const reference_1633: boolean;
                    export { reference_1633 as reference };
                    const many_1633: boolean;
                    export { many_1633 as many };
                    const inverse_1633: boolean;
                    export { inverse_1633 as inverse };
                }
                export { DepthAsString_4 as DepthAsString };
                export namespace FlangeWidth {
                    const type_1634: string;
                    export { type_1634 as type };
                    const reference_1634: boolean;
                    export { reference_1634 as reference };
                    const many_1634: boolean;
                    export { many_1634 as many };
                    const inverse_1634: boolean;
                    export { inverse_1634 as inverse };
                }
                export namespace FlangeWidthAsString {
                    const type_1635: string;
                    export { type_1635 as type };
                    const reference_1635: boolean;
                    export { reference_1635 as reference };
                    const many_1635: boolean;
                    export { many_1635 as many };
                    const inverse_1635: boolean;
                    export { inverse_1635 as inverse };
                }
                export namespace WebThickness_3 {
                    const type_1636: string;
                    export { type_1636 as type };
                    const reference_1636: boolean;
                    export { reference_1636 as reference };
                    const many_1636: boolean;
                    export { many_1636 as many };
                    const inverse_1636: boolean;
                    export { inverse_1636 as inverse };
                }
                export { WebThickness_3 as WebThickness };
                export namespace WebThicknessAsString_3 {
                    const type_1637: string;
                    export { type_1637 as type };
                    const reference_1637: boolean;
                    export { reference_1637 as reference };
                    const many_1637: boolean;
                    export { many_1637 as many };
                    const inverse_1637: boolean;
                    export { inverse_1637 as inverse };
                }
                export { WebThicknessAsString_3 as WebThicknessAsString };
                export namespace FlangeThickness_1 {
                    const type_1638: string;
                    export { type_1638 as type };
                    const reference_1638: boolean;
                    export { reference_1638 as reference };
                    const many_1638: boolean;
                    export { many_1638 as many };
                    const inverse_1638: boolean;
                    export { inverse_1638 as inverse };
                }
                export { FlangeThickness_1 as FlangeThickness };
                export namespace FlangeThicknessAsString_1 {
                    const type_1639: string;
                    export { type_1639 as type };
                    const reference_1639: boolean;
                    export { reference_1639 as reference };
                    const many_1639: boolean;
                    export { many_1639 as many };
                    const inverse_1639: boolean;
                    export { inverse_1639 as inverse };
                }
                export { FlangeThicknessAsString_1 as FlangeThicknessAsString };
                export namespace FilletRadius_2 {
                    const type_1640: string;
                    export { type_1640 as type };
                    const reference_1640: boolean;
                    export { reference_1640 as reference };
                    const many_1640: boolean;
                    export { many_1640 as many };
                    const inverse_1640: boolean;
                    export { inverse_1640 as inverse };
                }
                export { FilletRadius_2 as FilletRadius };
                export namespace FilletRadiusAsString_2 {
                    const type_1641: string;
                    export { type_1641 as type };
                    const reference_1641: boolean;
                    export { reference_1641 as reference };
                    const many_1641: boolean;
                    export { many_1641 as many };
                    const inverse_1641: boolean;
                    export { inverse_1641 as inverse };
                }
                export { FilletRadiusAsString_2 as FilletRadiusAsString };
                export namespace FlangeEdgeRadius {
                    const type_1642: string;
                    export { type_1642 as type };
                    const reference_1642: boolean;
                    export { reference_1642 as reference };
                    const many_1642: boolean;
                    export { many_1642 as many };
                    const inverse_1642: boolean;
                    export { inverse_1642 as inverse };
                }
                export namespace FlangeEdgeRadiusAsString {
                    const type_1643: string;
                    export { type_1643 as type };
                    const reference_1643: boolean;
                    export { reference_1643 as reference };
                    const many_1643: boolean;
                    export { many_1643 as many };
                    const inverse_1643: boolean;
                    export { inverse_1643 as inverse };
                }
                export namespace WebEdgeRadius {
                    const type_1644: string;
                    export { type_1644 as type };
                    const reference_1644: boolean;
                    export { reference_1644 as reference };
                    const many_1644: boolean;
                    export { many_1644 as many };
                    const inverse_1644: boolean;
                    export { inverse_1644 as inverse };
                }
                export namespace WebEdgeRadiusAsString {
                    const type_1645: string;
                    export { type_1645 as type };
                    const reference_1645: boolean;
                    export { reference_1645 as reference };
                    const many_1645: boolean;
                    export { many_1645 as many };
                    const inverse_1645: boolean;
                    export { inverse_1645 as inverse };
                }
                export namespace WebSlope {
                    const type_1646: string;
                    export { type_1646 as type };
                    const reference_1646: boolean;
                    export { reference_1646 as reference };
                    const many_1646: boolean;
                    export { many_1646 as many };
                    const inverse_1646: boolean;
                    export { inverse_1646 as inverse };
                }
                export namespace WebSlopeAsString {
                    const type_1647: string;
                    export { type_1647 as type };
                    const reference_1647: boolean;
                    export { reference_1647 as reference };
                    const many_1647: boolean;
                    export { many_1647 as many };
                    const inverse_1647: boolean;
                    export { inverse_1647 as inverse };
                }
                export namespace FlangeSlope {
                    const type_1648: string;
                    export { type_1648 as type };
                    const reference_1648: boolean;
                    export { reference_1648 as reference };
                    const many_1648: boolean;
                    export { many_1648 as many };
                    const inverse_1648: boolean;
                    export { inverse_1648 as inverse };
                }
                export namespace FlangeSlopeAsString {
                    const type_1649: string;
                    export { type_1649 as type };
                    const reference_1649: boolean;
                    export { reference_1649 as reference };
                    const many_1649: boolean;
                    export { many_1649 as many };
                    const inverse_1649: boolean;
                    export { inverse_1649 as inverse };
                }
                export namespace CentreOfGravityInY_5 {
                    const type_1650: string;
                    export { type_1650 as type };
                    const reference_1650: boolean;
                    export { reference_1650 as reference };
                    const many_1650: boolean;
                    export { many_1650 as many };
                    const inverse_1650: boolean;
                    export { inverse_1650 as inverse };
                }
                export { CentreOfGravityInY_5 as CentreOfGravityInY };
                export namespace CentreOfGravityInYAsString_5 {
                    const type_1651: string;
                    export { type_1651 as type };
                    const reference_1651: boolean;
                    export { reference_1651 as reference };
                    const many_1651: boolean;
                    export { many_1651 as many };
                    const inverse_1651: boolean;
                    export { inverse_1651 as inverse };
                }
                export { CentreOfGravityInYAsString_5 as CentreOfGravityInYAsString };
            }
            export { fields_591 as fields };
        }
        namespace IfcTable {
            const domain_592: string;
            export { domain_592 as domain };
            const superclasses_592: string[];
            export { superclasses_592 as superclasses };
            export namespace fields_592 {
                export namespace Name_39 {
                    const type_1652: string;
                    export { type_1652 as type };
                    const reference_1652: boolean;
                    export { reference_1652 as reference };
                    const many_1652: boolean;
                    export { many_1652 as many };
                    const inverse_1652: boolean;
                    export { inverse_1652 as inverse };
                }
                export { Name_39 as Name };
                export namespace Rows {
                    const type_1653: string;
                    export { type_1653 as type };
                    const reference_1653: boolean;
                    export { reference_1653 as reference };
                    const many_1653: boolean;
                    export { many_1653 as many };
                    const inverse_1653: boolean;
                    export { inverse_1653 as inverse };
                }
            }
            export { fields_592 as fields };
        }
        namespace IfcTableRow {
            const domain_593: string;
            export { domain_593 as domain };
            const superclasses_593: any[];
            export { superclasses_593 as superclasses };
            export namespace fields_593 {
                namespace RowCells {
                    const type_1654: string;
                    export { type_1654 as type };
                    const reference_1654: boolean;
                    export { reference_1654 as reference };
                    const many_1654: boolean;
                    export { many_1654 as many };
                    const inverse_1654: boolean;
                    export { inverse_1654 as inverse };
                }
                namespace IsHeading {
                    const type_1655: string;
                    export { type_1655 as type };
                    const reference_1655: boolean;
                    export { reference_1655 as reference };
                    const many_1655: boolean;
                    export { many_1655 as many };
                    const inverse_1655: boolean;
                    export { inverse_1655 as inverse };
                }
                namespace OfTable {
                    const type_1656: string;
                    export { type_1656 as type };
                    const reference_1656: boolean;
                    export { reference_1656 as reference };
                    const many_1656: boolean;
                    export { many_1656 as many };
                    const inverse_1656: boolean;
                    export { inverse_1656 as inverse };
                }
            }
            export { fields_593 as fields };
        }
        namespace IfcTankType {
            const domain_594: string;
            export { domain_594 as domain };
            const superclasses_594: string[];
            export { superclasses_594 as superclasses };
            export namespace fields_594 {
                export namespace PredefinedType_78 {
                    const type_1657: string;
                    export { type_1657 as type };
                    const reference_1657: boolean;
                    export { reference_1657 as reference };
                    const many_1657: boolean;
                    export { many_1657 as many };
                    const inverse_1657: boolean;
                    export { inverse_1657 as inverse };
                }
                export { PredefinedType_78 as PredefinedType };
            }
            export { fields_594 as fields };
        }
        namespace IfcTask {
            const domain_595: string;
            export { domain_595 as domain };
            const superclasses_595: string[];
            export { superclasses_595 as superclasses };
            export namespace fields_595 {
                export namespace TaskId {
                    const type_1658: string;
                    export { type_1658 as type };
                    const reference_1658: boolean;
                    export { reference_1658 as reference };
                    const many_1658: boolean;
                    export { many_1658 as many };
                    const inverse_1658: boolean;
                    export { inverse_1658 as inverse };
                }
                export namespace Status_3 {
                    const type_1659: string;
                    export { type_1659 as type };
                    const reference_1659: boolean;
                    export { reference_1659 as reference };
                    const many_1659: boolean;
                    export { many_1659 as many };
                    const inverse_1659: boolean;
                    export { inverse_1659 as inverse };
                }
                export { Status_3 as Status };
                export namespace WorkMethod {
                    const type_1660: string;
                    export { type_1660 as type };
                    const reference_1660: boolean;
                    export { reference_1660 as reference };
                    const many_1660: boolean;
                    export { many_1660 as many };
                    const inverse_1660: boolean;
                    export { inverse_1660 as inverse };
                }
                export namespace IsMilestone {
                    const type_1661: string;
                    export { type_1661 as type };
                    const reference_1661: boolean;
                    export { reference_1661 as reference };
                    const many_1661: boolean;
                    export { many_1661 as many };
                    const inverse_1661: boolean;
                    export { inverse_1661 as inverse };
                }
                export namespace Priority {
                    const type_1662: string;
                    export { type_1662 as type };
                    const reference_1662: boolean;
                    export { reference_1662 as reference };
                    const many_1662: boolean;
                    export { many_1662 as many };
                    const inverse_1662: boolean;
                    export { inverse_1662 as inverse };
                }
            }
            export { fields_595 as fields };
        }
        namespace IfcTelecomAddress {
            const domain_596: string;
            export { domain_596 as domain };
            const superclasses_596: string[];
            export { superclasses_596 as superclasses };
            export namespace fields_596 {
                namespace TelephoneNumbers {
                    const type_1663: string;
                    export { type_1663 as type };
                    const reference_1663: boolean;
                    export { reference_1663 as reference };
                    const many_1663: boolean;
                    export { many_1663 as many };
                    const inverse_1663: boolean;
                    export { inverse_1663 as inverse };
                }
                namespace FacsimileNumbers {
                    const type_1664: string;
                    export { type_1664 as type };
                    const reference_1664: boolean;
                    export { reference_1664 as reference };
                    const many_1664: boolean;
                    export { many_1664 as many };
                    const inverse_1664: boolean;
                    export { inverse_1664 as inverse };
                }
                namespace PagerNumber {
                    const type_1665: string;
                    export { type_1665 as type };
                    const reference_1665: boolean;
                    export { reference_1665 as reference };
                    const many_1665: boolean;
                    export { many_1665 as many };
                    const inverse_1665: boolean;
                    export { inverse_1665 as inverse };
                }
                namespace ElectronicMailAddresses {
                    const type_1666: string;
                    export { type_1666 as type };
                    const reference_1666: boolean;
                    export { reference_1666 as reference };
                    const many_1666: boolean;
                    export { many_1666 as many };
                    const inverse_1666: boolean;
                    export { inverse_1666 as inverse };
                }
                namespace WWWHomePageURL {
                    const type_1667: string;
                    export { type_1667 as type };
                    const reference_1667: boolean;
                    export { reference_1667 as reference };
                    const many_1667: boolean;
                    export { many_1667 as many };
                    const inverse_1667: boolean;
                    export { inverse_1667 as inverse };
                }
            }
            export { fields_596 as fields };
        }
        namespace IfcTendon {
            const domain_597: string;
            export { domain_597 as domain };
            const superclasses_597: string[];
            export { superclasses_597 as superclasses };
            export namespace fields_597 {
                export namespace PredefinedType_79 {
                    const type_1668: string;
                    export { type_1668 as type };
                    const reference_1668: boolean;
                    export { reference_1668 as reference };
                    const many_1668: boolean;
                    export { many_1668 as many };
                    const inverse_1668: boolean;
                    export { inverse_1668 as inverse };
                }
                export { PredefinedType_79 as PredefinedType };
                export namespace NominalDiameter_2 {
                    const type_1669: string;
                    export { type_1669 as type };
                    const reference_1669: boolean;
                    export { reference_1669 as reference };
                    const many_1669: boolean;
                    export { many_1669 as many };
                    const inverse_1669: boolean;
                    export { inverse_1669 as inverse };
                }
                export { NominalDiameter_2 as NominalDiameter };
                export namespace NominalDiameterAsString_2 {
                    const type_1670: string;
                    export { type_1670 as type };
                    const reference_1670: boolean;
                    export { reference_1670 as reference };
                    const many_1670: boolean;
                    export { many_1670 as many };
                    const inverse_1670: boolean;
                    export { inverse_1670 as inverse };
                }
                export { NominalDiameterAsString_2 as NominalDiameterAsString };
                export namespace CrossSectionArea_2 {
                    const type_1671: string;
                    export { type_1671 as type };
                    const reference_1671: boolean;
                    export { reference_1671 as reference };
                    const many_1671: boolean;
                    export { many_1671 as many };
                    const inverse_1671: boolean;
                    export { inverse_1671 as inverse };
                }
                export { CrossSectionArea_2 as CrossSectionArea };
                export namespace CrossSectionAreaAsString_2 {
                    const type_1672: string;
                    export { type_1672 as type };
                    const reference_1672: boolean;
                    export { reference_1672 as reference };
                    const many_1672: boolean;
                    export { many_1672 as many };
                    const inverse_1672: boolean;
                    export { inverse_1672 as inverse };
                }
                export { CrossSectionAreaAsString_2 as CrossSectionAreaAsString };
                export namespace TensionForce {
                    const type_1673: string;
                    export { type_1673 as type };
                    const reference_1673: boolean;
                    export { reference_1673 as reference };
                    const many_1673: boolean;
                    export { many_1673 as many };
                    const inverse_1673: boolean;
                    export { inverse_1673 as inverse };
                }
                export namespace TensionForceAsString {
                    const type_1674: string;
                    export { type_1674 as type };
                    const reference_1674: boolean;
                    export { reference_1674 as reference };
                    const many_1674: boolean;
                    export { many_1674 as many };
                    const inverse_1674: boolean;
                    export { inverse_1674 as inverse };
                }
                export namespace PreStress {
                    const type_1675: string;
                    export { type_1675 as type };
                    const reference_1675: boolean;
                    export { reference_1675 as reference };
                    const many_1675: boolean;
                    export { many_1675 as many };
                    const inverse_1675: boolean;
                    export { inverse_1675 as inverse };
                }
                export namespace PreStressAsString {
                    const type_1676: string;
                    export { type_1676 as type };
                    const reference_1676: boolean;
                    export { reference_1676 as reference };
                    const many_1676: boolean;
                    export { many_1676 as many };
                    const inverse_1676: boolean;
                    export { inverse_1676 as inverse };
                }
                export namespace FrictionCoefficient {
                    const type_1677: string;
                    export { type_1677 as type };
                    const reference_1677: boolean;
                    export { reference_1677 as reference };
                    const many_1677: boolean;
                    export { many_1677 as many };
                    const inverse_1677: boolean;
                    export { inverse_1677 as inverse };
                }
                export namespace FrictionCoefficientAsString {
                    const type_1678: string;
                    export { type_1678 as type };
                    const reference_1678: boolean;
                    export { reference_1678 as reference };
                    const many_1678: boolean;
                    export { many_1678 as many };
                    const inverse_1678: boolean;
                    export { inverse_1678 as inverse };
                }
                export namespace AnchorageSlip {
                    const type_1679: string;
                    export { type_1679 as type };
                    const reference_1679: boolean;
                    export { reference_1679 as reference };
                    const many_1679: boolean;
                    export { many_1679 as many };
                    const inverse_1679: boolean;
                    export { inverse_1679 as inverse };
                }
                export namespace AnchorageSlipAsString {
                    const type_1680: string;
                    export { type_1680 as type };
                    const reference_1680: boolean;
                    export { reference_1680 as reference };
                    const many_1680: boolean;
                    export { many_1680 as many };
                    const inverse_1680: boolean;
                    export { inverse_1680 as inverse };
                }
                export namespace MinCurvatureRadius {
                    const type_1681: string;
                    export { type_1681 as type };
                    const reference_1681: boolean;
                    export { reference_1681 as reference };
                    const many_1681: boolean;
                    export { many_1681 as many };
                    const inverse_1681: boolean;
                    export { inverse_1681 as inverse };
                }
                export namespace MinCurvatureRadiusAsString {
                    const type_1682: string;
                    export { type_1682 as type };
                    const reference_1682: boolean;
                    export { reference_1682 as reference };
                    const many_1682: boolean;
                    export { many_1682 as many };
                    const inverse_1682: boolean;
                    export { inverse_1682 as inverse };
                }
            }
            export { fields_597 as fields };
        }
        namespace IfcTendonAnchor {
            const domain_598: string;
            export { domain_598 as domain };
            const superclasses_598: string[];
            export { superclasses_598 as superclasses };
            const fields_598: {};
            export { fields_598 as fields };
        }
        namespace IfcTerminatorSymbol {
            const domain_599: string;
            export { domain_599 as domain };
            const superclasses_599: string[];
            export { superclasses_599 as superclasses };
            export namespace fields_599 {
                namespace AnnotatedCurve {
                    const type_1683: string;
                    export { type_1683 as type };
                    const reference_1683: boolean;
                    export { reference_1683 as reference };
                    const many_1683: boolean;
                    export { many_1683 as many };
                    const inverse_1683: boolean;
                    export { inverse_1683 as inverse };
                }
            }
            export { fields_599 as fields };
        }
        namespace IfcTextLiteral {
            const domain_600: string;
            export { domain_600 as domain };
            const superclasses_600: string[];
            export { superclasses_600 as superclasses };
            export namespace fields_600 {
                export namespace Literal {
                    const type_1684: string;
                    export { type_1684 as type };
                    const reference_1684: boolean;
                    export { reference_1684 as reference };
                    const many_1684: boolean;
                    export { many_1684 as many };
                    const inverse_1684: boolean;
                    export { inverse_1684 as inverse };
                }
                export namespace Placement_1 {
                    const type_1685: string;
                    export { type_1685 as type };
                    const reference_1685: boolean;
                    export { reference_1685 as reference };
                    const many_1685: boolean;
                    export { many_1685 as many };
                    const inverse_1685: boolean;
                    export { inverse_1685 as inverse };
                }
                export { Placement_1 as Placement };
                export namespace Path {
                    const type_1686: string;
                    export { type_1686 as type };
                    const reference_1686: boolean;
                    export { reference_1686 as reference };
                    const many_1686: boolean;
                    export { many_1686 as many };
                    const inverse_1686: boolean;
                    export { inverse_1686 as inverse };
                }
            }
            export { fields_600 as fields };
        }
        namespace IfcTextLiteralWithExtent {
            const domain_601: string;
            export { domain_601 as domain };
            const superclasses_601: string[];
            export { superclasses_601 as superclasses };
            export namespace fields_601 {
                namespace Extent {
                    const type_1687: string;
                    export { type_1687 as type };
                    const reference_1687: boolean;
                    export { reference_1687 as reference };
                    const many_1687: boolean;
                    export { many_1687 as many };
                    const inverse_1687: boolean;
                    export { inverse_1687 as inverse };
                }
                namespace BoxAlignment {
                    const type_1688: string;
                    export { type_1688 as type };
                    const reference_1688: boolean;
                    export { reference_1688 as reference };
                    const many_1688: boolean;
                    export { many_1688 as many };
                    const inverse_1688: boolean;
                    export { inverse_1688 as inverse };
                }
            }
            export { fields_601 as fields };
        }
        namespace IfcTextStyle {
            const domain_602: string;
            export { domain_602 as domain };
            const superclasses_602: string[];
            export { superclasses_602 as superclasses };
            export namespace fields_602 {
                namespace TextCharacterAppearance {
                    const type_1689: string;
                    export { type_1689 as type };
                    const reference_1689: boolean;
                    export { reference_1689 as reference };
                    const many_1689: boolean;
                    export { many_1689 as many };
                    const inverse_1689: boolean;
                    export { inverse_1689 as inverse };
                }
                namespace TextStyle {
                    const type_1690: string;
                    export { type_1690 as type };
                    const reference_1690: boolean;
                    export { reference_1690 as reference };
                    const many_1690: boolean;
                    export { many_1690 as many };
                    const inverse_1690: boolean;
                    export { inverse_1690 as inverse };
                }
                namespace TextFontStyle {
                    const type_1691: string;
                    export { type_1691 as type };
                    const reference_1691: boolean;
                    export { reference_1691 as reference };
                    const many_1691: boolean;
                    export { many_1691 as many };
                    const inverse_1691: boolean;
                    export { inverse_1691 as inverse };
                }
            }
            export { fields_602 as fields };
        }
        namespace IfcTextStyleFontModel {
            const domain_603: string;
            export { domain_603 as domain };
            const superclasses_603: string[];
            export { superclasses_603 as superclasses };
            export namespace fields_603 {
                namespace FontFamily {
                    const type_1692: string;
                    export { type_1692 as type };
                    const reference_1692: boolean;
                    export { reference_1692 as reference };
                    const many_1692: boolean;
                    export { many_1692 as many };
                    const inverse_1692: boolean;
                    export { inverse_1692 as inverse };
                }
                namespace FontStyle {
                    const type_1693: string;
                    export { type_1693 as type };
                    const reference_1693: boolean;
                    export { reference_1693 as reference };
                    const many_1693: boolean;
                    export { many_1693 as many };
                    const inverse_1693: boolean;
                    export { inverse_1693 as inverse };
                }
                namespace FontVariant {
                    const type_1694: string;
                    export { type_1694 as type };
                    const reference_1694: boolean;
                    export { reference_1694 as reference };
                    const many_1694: boolean;
                    export { many_1694 as many };
                    const inverse_1694: boolean;
                    export { inverse_1694 as inverse };
                }
                namespace FontWeight {
                    const type_1695: string;
                    export { type_1695 as type };
                    const reference_1695: boolean;
                    export { reference_1695 as reference };
                    const many_1695: boolean;
                    export { many_1695 as many };
                    const inverse_1695: boolean;
                    export { inverse_1695 as inverse };
                }
                namespace FontSize {
                    const type_1696: string;
                    export { type_1696 as type };
                    const reference_1696: boolean;
                    export { reference_1696 as reference };
                    const many_1696: boolean;
                    export { many_1696 as many };
                    const inverse_1696: boolean;
                    export { inverse_1696 as inverse };
                }
            }
            export { fields_603 as fields };
        }
        namespace IfcTextStyleForDefinedFont {
            const domain_604: string;
            export { domain_604 as domain };
            const superclasses_604: string[];
            export { superclasses_604 as superclasses };
            export namespace fields_604 {
                namespace Colour {
                    const type_1697: string;
                    export { type_1697 as type };
                    const reference_1697: boolean;
                    export { reference_1697 as reference };
                    const many_1697: boolean;
                    export { many_1697 as many };
                    const inverse_1697: boolean;
                    export { inverse_1697 as inverse };
                }
                namespace BackgroundColour {
                    const type_1698: string;
                    export { type_1698 as type };
                    const reference_1698: boolean;
                    export { reference_1698 as reference };
                    const many_1698: boolean;
                    export { many_1698 as many };
                    const inverse_1698: boolean;
                    export { inverse_1698 as inverse };
                }
            }
            export { fields_604 as fields };
        }
        namespace IfcTextStyleTextModel {
            const domain_605: string;
            export { domain_605 as domain };
            const superclasses_605: string[];
            export { superclasses_605 as superclasses };
            export namespace fields_605 {
                namespace TextIndent {
                    const type_1699: string;
                    export { type_1699 as type };
                    const reference_1699: boolean;
                    export { reference_1699 as reference };
                    const many_1699: boolean;
                    export { many_1699 as many };
                    const inverse_1699: boolean;
                    export { inverse_1699 as inverse };
                }
                namespace TextAlign {
                    const type_1700: string;
                    export { type_1700 as type };
                    const reference_1700: boolean;
                    export { reference_1700 as reference };
                    const many_1700: boolean;
                    export { many_1700 as many };
                    const inverse_1700: boolean;
                    export { inverse_1700 as inverse };
                }
                namespace TextDecoration {
                    const type_1701: string;
                    export { type_1701 as type };
                    const reference_1701: boolean;
                    export { reference_1701 as reference };
                    const many_1701: boolean;
                    export { many_1701 as many };
                    const inverse_1701: boolean;
                    export { inverse_1701 as inverse };
                }
                namespace LetterSpacing {
                    const type_1702: string;
                    export { type_1702 as type };
                    const reference_1702: boolean;
                    export { reference_1702 as reference };
                    const many_1702: boolean;
                    export { many_1702 as many };
                    const inverse_1702: boolean;
                    export { inverse_1702 as inverse };
                }
                namespace WordSpacing {
                    const type_1703: string;
                    export { type_1703 as type };
                    const reference_1703: boolean;
                    export { reference_1703 as reference };
                    const many_1703: boolean;
                    export { many_1703 as many };
                    const inverse_1703: boolean;
                    export { inverse_1703 as inverse };
                }
                namespace TextTransform {
                    const type_1704: string;
                    export { type_1704 as type };
                    const reference_1704: boolean;
                    export { reference_1704 as reference };
                    const many_1704: boolean;
                    export { many_1704 as many };
                    const inverse_1704: boolean;
                    export { inverse_1704 as inverse };
                }
                namespace LineHeight {
                    const type_1705: string;
                    export { type_1705 as type };
                    const reference_1705: boolean;
                    export { reference_1705 as reference };
                    const many_1705: boolean;
                    export { many_1705 as many };
                    const inverse_1705: boolean;
                    export { inverse_1705 as inverse };
                }
            }
            export { fields_605 as fields };
        }
        namespace IfcTextStyleWithBoxCharacteristics {
            const domain_606: string;
            export { domain_606 as domain };
            const superclasses_606: string[];
            export { superclasses_606 as superclasses };
            export namespace fields_606 {
                namespace BoxHeight {
                    const type_1706: string;
                    export { type_1706 as type };
                    const reference_1706: boolean;
                    export { reference_1706 as reference };
                    const many_1706: boolean;
                    export { many_1706 as many };
                    const inverse_1706: boolean;
                    export { inverse_1706 as inverse };
                }
                namespace BoxHeightAsString {
                    const type_1707: string;
                    export { type_1707 as type };
                    const reference_1707: boolean;
                    export { reference_1707 as reference };
                    const many_1707: boolean;
                    export { many_1707 as many };
                    const inverse_1707: boolean;
                    export { inverse_1707 as inverse };
                }
                namespace BoxWidth {
                    const type_1708: string;
                    export { type_1708 as type };
                    const reference_1708: boolean;
                    export { reference_1708 as reference };
                    const many_1708: boolean;
                    export { many_1708 as many };
                    const inverse_1708: boolean;
                    export { inverse_1708 as inverse };
                }
                namespace BoxWidthAsString {
                    const type_1709: string;
                    export { type_1709 as type };
                    const reference_1709: boolean;
                    export { reference_1709 as reference };
                    const many_1709: boolean;
                    export { many_1709 as many };
                    const inverse_1709: boolean;
                    export { inverse_1709 as inverse };
                }
                namespace BoxSlantAngle {
                    const type_1710: string;
                    export { type_1710 as type };
                    const reference_1710: boolean;
                    export { reference_1710 as reference };
                    const many_1710: boolean;
                    export { many_1710 as many };
                    const inverse_1710: boolean;
                    export { inverse_1710 as inverse };
                }
                namespace BoxSlantAngleAsString {
                    const type_1711: string;
                    export { type_1711 as type };
                    const reference_1711: boolean;
                    export { reference_1711 as reference };
                    const many_1711: boolean;
                    export { many_1711 as many };
                    const inverse_1711: boolean;
                    export { inverse_1711 as inverse };
                }
                namespace BoxRotateAngle {
                    const type_1712: string;
                    export { type_1712 as type };
                    const reference_1712: boolean;
                    export { reference_1712 as reference };
                    const many_1712: boolean;
                    export { many_1712 as many };
                    const inverse_1712: boolean;
                    export { inverse_1712 as inverse };
                }
                namespace BoxRotateAngleAsString {
                    const type_1713: string;
                    export { type_1713 as type };
                    const reference_1713: boolean;
                    export { reference_1713 as reference };
                    const many_1713: boolean;
                    export { many_1713 as many };
                    const inverse_1713: boolean;
                    export { inverse_1713 as inverse };
                }
                namespace CharacterSpacing {
                    const type_1714: string;
                    export { type_1714 as type };
                    const reference_1714: boolean;
                    export { reference_1714 as reference };
                    const many_1714: boolean;
                    export { many_1714 as many };
                    const inverse_1714: boolean;
                    export { inverse_1714 as inverse };
                }
            }
            export { fields_606 as fields };
        }
        namespace IfcTextureCoordinate {
            const domain_607: string;
            export { domain_607 as domain };
            const superclasses_607: any[];
            export { superclasses_607 as superclasses };
            export namespace fields_607 {
                namespace AnnotatedSurface {
                    const type_1715: string;
                    export { type_1715 as type };
                    const reference_1715: boolean;
                    export { reference_1715 as reference };
                    const many_1715: boolean;
                    export { many_1715 as many };
                    const inverse_1715: boolean;
                    export { inverse_1715 as inverse };
                }
            }
            export { fields_607 as fields };
        }
        namespace IfcTextureCoordinateGenerator {
            const domain_608: string;
            export { domain_608 as domain };
            const superclasses_608: string[];
            export { superclasses_608 as superclasses };
            export namespace fields_608 {
                namespace Mode {
                    const type_1716: string;
                    export { type_1716 as type };
                    const reference_1716: boolean;
                    export { reference_1716 as reference };
                    const many_1716: boolean;
                    export { many_1716 as many };
                    const inverse_1716: boolean;
                    export { inverse_1716 as inverse };
                }
                namespace Parameter {
                    const type_1717: string;
                    export { type_1717 as type };
                    const reference_1717: boolean;
                    export { reference_1717 as reference };
                    const many_1717: boolean;
                    export { many_1717 as many };
                    const inverse_1717: boolean;
                    export { inverse_1717 as inverse };
                }
            }
            export { fields_608 as fields };
        }
        namespace IfcTextureMap {
            const domain_609: string;
            export { domain_609 as domain };
            const superclasses_609: string[];
            export { superclasses_609 as superclasses };
            export namespace fields_609 {
                namespace TextureMaps {
                    const type_1718: string;
                    export { type_1718 as type };
                    const reference_1718: boolean;
                    export { reference_1718 as reference };
                    const many_1718: boolean;
                    export { many_1718 as many };
                    const inverse_1718: boolean;
                    export { inverse_1718 as inverse };
                }
            }
            export { fields_609 as fields };
        }
        namespace IfcTextureVertex {
            const domain_610: string;
            export { domain_610 as domain };
            const superclasses_610: any[];
            export { superclasses_610 as superclasses };
            export namespace fields_610 {
                export namespace Coordinates_1 {
                    const type_1719: string;
                    export { type_1719 as type };
                    const reference_1719: boolean;
                    export { reference_1719 as reference };
                    const many_1719: boolean;
                    export { many_1719 as many };
                    const inverse_1719: boolean;
                    export { inverse_1719 as inverse };
                }
                export { Coordinates_1 as Coordinates };
                export namespace CoordinatesAsString_1 {
                    const type_1720: string;
                    export { type_1720 as type };
                    const reference_1720: boolean;
                    export { reference_1720 as reference };
                    const many_1720: boolean;
                    export { many_1720 as many };
                    const inverse_1720: boolean;
                    export { inverse_1720 as inverse };
                }
                export { CoordinatesAsString_1 as CoordinatesAsString };
            }
            export { fields_610 as fields };
        }
        namespace IfcThermalMaterialProperties {
            const domain_611: string;
            export { domain_611 as domain };
            const superclasses_611: string[];
            export { superclasses_611 as superclasses };
            export namespace fields_611 {
                export namespace SpecificHeatCapacity_1 {
                    const type_1721: string;
                    export { type_1721 as type };
                    const reference_1721: boolean;
                    export { reference_1721 as reference };
                    const many_1721: boolean;
                    export { many_1721 as many };
                    const inverse_1721: boolean;
                    export { inverse_1721 as inverse };
                }
                export { SpecificHeatCapacity_1 as SpecificHeatCapacity };
                export namespace SpecificHeatCapacityAsString_1 {
                    const type_1722: string;
                    export { type_1722 as type };
                    const reference_1722: boolean;
                    export { reference_1722 as reference };
                    const many_1722: boolean;
                    export { many_1722 as many };
                    const inverse_1722: boolean;
                    export { inverse_1722 as inverse };
                }
                export { SpecificHeatCapacityAsString_1 as SpecificHeatCapacityAsString };
                export namespace BoilingPoint {
                    const type_1723: string;
                    export { type_1723 as type };
                    const reference_1723: boolean;
                    export { reference_1723 as reference };
                    const many_1723: boolean;
                    export { many_1723 as many };
                    const inverse_1723: boolean;
                    export { inverse_1723 as inverse };
                }
                export namespace BoilingPointAsString {
                    const type_1724: string;
                    export { type_1724 as type };
                    const reference_1724: boolean;
                    export { reference_1724 as reference };
                    const many_1724: boolean;
                    export { many_1724 as many };
                    const inverse_1724: boolean;
                    export { inverse_1724 as inverse };
                }
                export namespace FreezingPoint {
                    const type_1725: string;
                    export { type_1725 as type };
                    const reference_1725: boolean;
                    export { reference_1725 as reference };
                    const many_1725: boolean;
                    export { many_1725 as many };
                    const inverse_1725: boolean;
                    export { inverse_1725 as inverse };
                }
                export namespace FreezingPointAsString {
                    const type_1726: string;
                    export { type_1726 as type };
                    const reference_1726: boolean;
                    export { reference_1726 as reference };
                    const many_1726: boolean;
                    export { many_1726 as many };
                    const inverse_1726: boolean;
                    export { inverse_1726 as inverse };
                }
                export namespace ThermalConductivity {
                    const type_1727: string;
                    export { type_1727 as type };
                    const reference_1727: boolean;
                    export { reference_1727 as reference };
                    const many_1727: boolean;
                    export { many_1727 as many };
                    const inverse_1727: boolean;
                    export { inverse_1727 as inverse };
                }
                export namespace ThermalConductivityAsString {
                    const type_1728: string;
                    export { type_1728 as type };
                    const reference_1728: boolean;
                    export { reference_1728 as reference };
                    const many_1728: boolean;
                    export { many_1728 as many };
                    const inverse_1728: boolean;
                    export { inverse_1728 as inverse };
                }
            }
            export { fields_611 as fields };
        }
        namespace IfcTimeSeries {
            const domain_612: string;
            export { domain_612 as domain };
            const superclasses_612: string[];
            export { superclasses_612 as superclasses };
            export namespace fields_612 {
                export namespace Name_40 {
                    const type_1729: string;
                    export { type_1729 as type };
                    const reference_1729: boolean;
                    export { reference_1729 as reference };
                    const many_1729: boolean;
                    export { many_1729 as many };
                    const inverse_1729: boolean;
                    export { inverse_1729 as inverse };
                }
                export { Name_40 as Name };
                export namespace Description_23 {
                    const type_1730: string;
                    export { type_1730 as type };
                    const reference_1730: boolean;
                    export { reference_1730 as reference };
                    const many_1730: boolean;
                    export { many_1730 as many };
                    const inverse_1730: boolean;
                    export { inverse_1730 as inverse };
                }
                export { Description_23 as Description };
                export namespace StartTime {
                    const type_1731: string;
                    export { type_1731 as type };
                    const reference_1731: boolean;
                    export { reference_1731 as reference };
                    const many_1731: boolean;
                    export { many_1731 as many };
                    const inverse_1731: boolean;
                    export { inverse_1731 as inverse };
                }
                export namespace EndTime {
                    const type_1732: string;
                    export { type_1732 as type };
                    const reference_1732: boolean;
                    export { reference_1732 as reference };
                    const many_1732: boolean;
                    export { many_1732 as many };
                    const inverse_1732: boolean;
                    export { inverse_1732 as inverse };
                }
                export namespace TimeSeriesDataType {
                    const type_1733: string;
                    export { type_1733 as type };
                    const reference_1733: boolean;
                    export { reference_1733 as reference };
                    const many_1733: boolean;
                    export { many_1733 as many };
                    const inverse_1733: boolean;
                    export { inverse_1733 as inverse };
                }
                export namespace DataOrigin {
                    const type_1734: string;
                    export { type_1734 as type };
                    const reference_1734: boolean;
                    export { reference_1734 as reference };
                    const many_1734: boolean;
                    export { many_1734 as many };
                    const inverse_1734: boolean;
                    export { inverse_1734 as inverse };
                }
                export namespace UserDefinedDataOrigin {
                    const type_1735: string;
                    export { type_1735 as type };
                    const reference_1735: boolean;
                    export { reference_1735 as reference };
                    const many_1735: boolean;
                    export { many_1735 as many };
                    const inverse_1735: boolean;
                    export { inverse_1735 as inverse };
                }
                export namespace Unit_6 {
                    const type_1736: string;
                    export { type_1736 as type };
                    const reference_1736: boolean;
                    export { reference_1736 as reference };
                    const many_1736: boolean;
                    export { many_1736 as many };
                    const inverse_1736: boolean;
                    export { inverse_1736 as inverse };
                }
                export { Unit_6 as Unit };
                export namespace DocumentedBy {
                    const type_1737: string;
                    export { type_1737 as type };
                    const reference_1737: boolean;
                    export { reference_1737 as reference };
                    const many_1737: boolean;
                    export { many_1737 as many };
                    const inverse_1737: boolean;
                    export { inverse_1737 as inverse };
                }
            }
            export { fields_612 as fields };
        }
        namespace IfcTimeSeriesReferenceRelationship {
            const domain_613: string;
            export { domain_613 as domain };
            const superclasses_613: any[];
            export { superclasses_613 as superclasses };
            export namespace fields_613 {
                namespace ReferencedTimeSeries {
                    const type_1738: string;
                    export { type_1738 as type };
                    const reference_1738: boolean;
                    export { reference_1738 as reference };
                    const many_1738: boolean;
                    export { many_1738 as many };
                    const inverse_1738: boolean;
                    export { inverse_1738 as inverse };
                }
                namespace TimeSeriesReferences {
                    const type_1739: string;
                    export { type_1739 as type };
                    const reference_1739: boolean;
                    export { reference_1739 as reference };
                    const many_1739: boolean;
                    export { many_1739 as many };
                    const inverse_1739: boolean;
                    export { inverse_1739 as inverse };
                }
            }
            export { fields_613 as fields };
        }
        namespace IfcTimeSeriesSchedule {
            const domain_614: string;
            export { domain_614 as domain };
            const superclasses_614: string[];
            export { superclasses_614 as superclasses };
            export namespace fields_614 {
                namespace ApplicableDates {
                    const type_1740: string;
                    export { type_1740 as type };
                    const reference_1740: boolean;
                    export { reference_1740 as reference };
                    const many_1740: boolean;
                    export { many_1740 as many };
                    const inverse_1740: boolean;
                    export { inverse_1740 as inverse };
                }
                namespace TimeSeriesScheduleType {
                    const type_1741: string;
                    export { type_1741 as type };
                    const reference_1741: boolean;
                    export { reference_1741 as reference };
                    const many_1741: boolean;
                    export { many_1741 as many };
                    const inverse_1741: boolean;
                    export { inverse_1741 as inverse };
                }
                namespace TimeSeries {
                    const type_1742: string;
                    export { type_1742 as type };
                    const reference_1742: boolean;
                    export { reference_1742 as reference };
                    const many_1742: boolean;
                    export { many_1742 as many };
                    const inverse_1742: boolean;
                    export { inverse_1742 as inverse };
                }
            }
            export { fields_614 as fields };
        }
        namespace IfcTimeSeriesValue {
            const domain_615: string;
            export { domain_615 as domain };
            const superclasses_615: any[];
            export { superclasses_615 as superclasses };
            export namespace fields_615 {
                export namespace ListValues_2 {
                    const type_1743: string;
                    export { type_1743 as type };
                    const reference_1743: boolean;
                    export { reference_1743 as reference };
                    const many_1743: boolean;
                    export { many_1743 as many };
                    const inverse_1743: boolean;
                    export { inverse_1743 as inverse };
                }
                export { ListValues_2 as ListValues };
            }
            export { fields_615 as fields };
        }
        namespace IfcTopologicalRepresentationItem {
            const domain_616: string;
            export { domain_616 as domain };
            const superclasses_616: string[];
            export { superclasses_616 as superclasses };
            const fields_616: {};
            export { fields_616 as fields };
        }
        namespace IfcTopologyRepresentation {
            const domain_617: string;
            export { domain_617 as domain };
            const superclasses_617: string[];
            export { superclasses_617 as superclasses };
            const fields_617: {};
            export { fields_617 as fields };
        }
        namespace IfcTransformerType {
            const domain_618: string;
            export { domain_618 as domain };
            const superclasses_618: string[];
            export { superclasses_618 as superclasses };
            export namespace fields_618 {
                export namespace PredefinedType_80 {
                    const type_1744: string;
                    export { type_1744 as type };
                    const reference_1744: boolean;
                    export { reference_1744 as reference };
                    const many_1744: boolean;
                    export { many_1744 as many };
                    const inverse_1744: boolean;
                    export { inverse_1744 as inverse };
                }
                export { PredefinedType_80 as PredefinedType };
            }
            export { fields_618 as fields };
        }
        namespace IfcTransportElement {
            const domain_619: string;
            export { domain_619 as domain };
            const superclasses_619: string[];
            export { superclasses_619 as superclasses };
            export namespace fields_619 {
                export namespace OperationType_2 {
                    const type_1745: string;
                    export { type_1745 as type };
                    const reference_1745: boolean;
                    export { reference_1745 as reference };
                    const many_1745: boolean;
                    export { many_1745 as many };
                    const inverse_1745: boolean;
                    export { inverse_1745 as inverse };
                }
                export { OperationType_2 as OperationType };
                export namespace CapacityByWeight {
                    const type_1746: string;
                    export { type_1746 as type };
                    const reference_1746: boolean;
                    export { reference_1746 as reference };
                    const many_1746: boolean;
                    export { many_1746 as many };
                    const inverse_1746: boolean;
                    export { inverse_1746 as inverse };
                }
                export namespace CapacityByWeightAsString {
                    const type_1747: string;
                    export { type_1747 as type };
                    const reference_1747: boolean;
                    export { reference_1747 as reference };
                    const many_1747: boolean;
                    export { many_1747 as many };
                    const inverse_1747: boolean;
                    export { inverse_1747 as inverse };
                }
                export namespace CapacityByNumber {
                    const type_1748: string;
                    export { type_1748 as type };
                    const reference_1748: boolean;
                    export { reference_1748 as reference };
                    const many_1748: boolean;
                    export { many_1748 as many };
                    const inverse_1748: boolean;
                    export { inverse_1748 as inverse };
                }
                export namespace CapacityByNumberAsString {
                    const type_1749: string;
                    export { type_1749 as type };
                    const reference_1749: boolean;
                    export { reference_1749 as reference };
                    const many_1749: boolean;
                    export { many_1749 as many };
                    const inverse_1749: boolean;
                    export { inverse_1749 as inverse };
                }
            }
            export { fields_619 as fields };
        }
        namespace IfcTransportElementType {
            const domain_620: string;
            export { domain_620 as domain };
            const superclasses_620: string[];
            export { superclasses_620 as superclasses };
            export namespace fields_620 {
                export namespace PredefinedType_81 {
                    const type_1750: string;
                    export { type_1750 as type };
                    const reference_1750: boolean;
                    export { reference_1750 as reference };
                    const many_1750: boolean;
                    export { many_1750 as many };
                    const inverse_1750: boolean;
                    export { inverse_1750 as inverse };
                }
                export { PredefinedType_81 as PredefinedType };
            }
            export { fields_620 as fields };
        }
        namespace IfcTrapeziumProfileDef {
            const domain_621: string;
            export { domain_621 as domain };
            const superclasses_621: string[];
            export { superclasses_621 as superclasses };
            export namespace fields_621 {
                export namespace BottomXDim {
                    const type_1751: string;
                    export { type_1751 as type };
                    const reference_1751: boolean;
                    export { reference_1751 as reference };
                    const many_1751: boolean;
                    export { many_1751 as many };
                    const inverse_1751: boolean;
                    export { inverse_1751 as inverse };
                }
                export namespace BottomXDimAsString {
                    const type_1752: string;
                    export { type_1752 as type };
                    const reference_1752: boolean;
                    export { reference_1752 as reference };
                    const many_1752: boolean;
                    export { many_1752 as many };
                    const inverse_1752: boolean;
                    export { inverse_1752 as inverse };
                }
                export namespace TopXDim {
                    const type_1753: string;
                    export { type_1753 as type };
                    const reference_1753: boolean;
                    export { reference_1753 as reference };
                    const many_1753: boolean;
                    export { many_1753 as many };
                    const inverse_1753: boolean;
                    export { inverse_1753 as inverse };
                }
                export namespace TopXDimAsString {
                    const type_1754: string;
                    export { type_1754 as type };
                    const reference_1754: boolean;
                    export { reference_1754 as reference };
                    const many_1754: boolean;
                    export { many_1754 as many };
                    const inverse_1754: boolean;
                    export { inverse_1754 as inverse };
                }
                export namespace YDim_2 {
                    const type_1755: string;
                    export { type_1755 as type };
                    const reference_1755: boolean;
                    export { reference_1755 as reference };
                    const many_1755: boolean;
                    export { many_1755 as many };
                    const inverse_1755: boolean;
                    export { inverse_1755 as inverse };
                }
                export { YDim_2 as YDim };
                export namespace YDimAsString_2 {
                    const type_1756: string;
                    export { type_1756 as type };
                    const reference_1756: boolean;
                    export { reference_1756 as reference };
                    const many_1756: boolean;
                    export { many_1756 as many };
                    const inverse_1756: boolean;
                    export { inverse_1756 as inverse };
                }
                export { YDimAsString_2 as YDimAsString };
                export namespace TopXOffset {
                    const type_1757: string;
                    export { type_1757 as type };
                    const reference_1757: boolean;
                    export { reference_1757 as reference };
                    const many_1757: boolean;
                    export { many_1757 as many };
                    const inverse_1757: boolean;
                    export { inverse_1757 as inverse };
                }
                export namespace TopXOffsetAsString {
                    const type_1758: string;
                    export { type_1758 as type };
                    const reference_1758: boolean;
                    export { reference_1758 as reference };
                    const many_1758: boolean;
                    export { many_1758 as many };
                    const inverse_1758: boolean;
                    export { inverse_1758 as inverse };
                }
            }
            export { fields_621 as fields };
        }
        namespace IfcTrimmedCurve {
            const domain_622: string;
            export { domain_622 as domain };
            const superclasses_622: string[];
            export { superclasses_622 as superclasses };
            export namespace fields_622 {
                export namespace BasisCurve_3 {
                    const type_1759: string;
                    export { type_1759 as type };
                    const reference_1759: boolean;
                    export { reference_1759 as reference };
                    const many_1759: boolean;
                    export { many_1759 as many };
                    const inverse_1759: boolean;
                    export { inverse_1759 as inverse };
                }
                export { BasisCurve_3 as BasisCurve };
                export namespace Trim1 {
                    const type_1760: string;
                    export { type_1760 as type };
                    const reference_1760: boolean;
                    export { reference_1760 as reference };
                    const many_1760: boolean;
                    export { many_1760 as many };
                    const inverse_1760: boolean;
                    export { inverse_1760 as inverse };
                }
                export namespace Trim2 {
                    const type_1761: string;
                    export { type_1761 as type };
                    const reference_1761: boolean;
                    export { reference_1761 as reference };
                    const many_1761: boolean;
                    export { many_1761 as many };
                    const inverse_1761: boolean;
                    export { inverse_1761 as inverse };
                }
                export namespace SenseAgreement {
                    const type_1762: string;
                    export { type_1762 as type };
                    const reference_1762: boolean;
                    export { reference_1762 as reference };
                    const many_1762: boolean;
                    export { many_1762 as many };
                    const inverse_1762: boolean;
                    export { inverse_1762 as inverse };
                }
                export namespace MasterRepresentation {
                    const type_1763: string;
                    export { type_1763 as type };
                    const reference_1763: boolean;
                    export { reference_1763 as reference };
                    const many_1763: boolean;
                    export { many_1763 as many };
                    const inverse_1763: boolean;
                    export { inverse_1763 as inverse };
                }
            }
            export { fields_622 as fields };
        }
        namespace IfcTubeBundleType {
            const domain_623: string;
            export { domain_623 as domain };
            const superclasses_623: string[];
            export { superclasses_623 as superclasses };
            export namespace fields_623 {
                export namespace PredefinedType_82 {
                    const type_1764: string;
                    export { type_1764 as type };
                    const reference_1764: boolean;
                    export { reference_1764 as reference };
                    const many_1764: boolean;
                    export { many_1764 as many };
                    const inverse_1764: boolean;
                    export { inverse_1764 as inverse };
                }
                export { PredefinedType_82 as PredefinedType };
            }
            export { fields_623 as fields };
        }
        namespace IfcTwoDirectionRepeatFactor {
            const domain_624: string;
            export { domain_624 as domain };
            const superclasses_624: string[];
            export { superclasses_624 as superclasses };
            export namespace fields_624 {
                namespace SecondRepeatFactor {
                    const type_1765: string;
                    export { type_1765 as type };
                    const reference_1765: boolean;
                    export { reference_1765 as reference };
                    const many_1765: boolean;
                    export { many_1765 as many };
                    const inverse_1765: boolean;
                    export { inverse_1765 as inverse };
                }
            }
            export { fields_624 as fields };
        }
        namespace IfcTypeObject {
            const domain_625: string;
            export { domain_625 as domain };
            const superclasses_625: string[];
            export { superclasses_625 as superclasses };
            export namespace fields_625 {
                namespace ApplicableOccurrence {
                    const type_1766: string;
                    export { type_1766 as type };
                    const reference_1766: boolean;
                    export { reference_1766 as reference };
                    const many_1766: boolean;
                    export { many_1766 as many };
                    const inverse_1766: boolean;
                    export { inverse_1766 as inverse };
                }
                namespace HasPropertySets {
                    const type_1767: string;
                    export { type_1767 as type };
                    const reference_1767: boolean;
                    export { reference_1767 as reference };
                    const many_1767: boolean;
                    export { many_1767 as many };
                    const inverse_1767: boolean;
                    export { inverse_1767 as inverse };
                }
                namespace ObjectTypeOf {
                    const type_1768: string;
                    export { type_1768 as type };
                    const reference_1768: boolean;
                    export { reference_1768 as reference };
                    const many_1768: boolean;
                    export { many_1768 as many };
                    const inverse_1768: boolean;
                    export { inverse_1768 as inverse };
                }
            }
            export { fields_625 as fields };
        }
        namespace IfcTypeProduct {
            const domain_626: string;
            export { domain_626 as domain };
            const superclasses_626: string[];
            export { superclasses_626 as superclasses };
            export namespace fields_626 {
                export namespace RepresentationMaps {
                    const type_1769: string;
                    export { type_1769 as type };
                    const reference_1769: boolean;
                    export { reference_1769 as reference };
                    const many_1769: boolean;
                    export { many_1769 as many };
                    const inverse_1769: boolean;
                    export { inverse_1769 as inverse };
                }
                export namespace Tag_2 {
                    const type_1770: string;
                    export { type_1770 as type };
                    const reference_1770: boolean;
                    export { reference_1770 as reference };
                    const many_1770: boolean;
                    export { many_1770 as many };
                    const inverse_1770: boolean;
                    export { inverse_1770 as inverse };
                }
                export { Tag_2 as Tag };
            }
            export { fields_626 as fields };
        }
        namespace IfcUShapeProfileDef {
            const domain_627: string;
            export { domain_627 as domain };
            const superclasses_627: string[];
            export { superclasses_627 as superclasses };
            export namespace fields_627 {
                export namespace Depth_5 {
                    const type_1771: string;
                    export { type_1771 as type };
                    const reference_1771: boolean;
                    export { reference_1771 as reference };
                    const many_1771: boolean;
                    export { many_1771 as many };
                    const inverse_1771: boolean;
                    export { inverse_1771 as inverse };
                }
                export { Depth_5 as Depth };
                export namespace DepthAsString_5 {
                    const type_1772: string;
                    export { type_1772 as type };
                    const reference_1772: boolean;
                    export { reference_1772 as reference };
                    const many_1772: boolean;
                    export { many_1772 as many };
                    const inverse_1772: boolean;
                    export { inverse_1772 as inverse };
                }
                export { DepthAsString_5 as DepthAsString };
                export namespace FlangeWidth_1 {
                    const type_1773: string;
                    export { type_1773 as type };
                    const reference_1773: boolean;
                    export { reference_1773 as reference };
                    const many_1773: boolean;
                    export { many_1773 as many };
                    const inverse_1773: boolean;
                    export { inverse_1773 as inverse };
                }
                export { FlangeWidth_1 as FlangeWidth };
                export namespace FlangeWidthAsString_1 {
                    const type_1774: string;
                    export { type_1774 as type };
                    const reference_1774: boolean;
                    export { reference_1774 as reference };
                    const many_1774: boolean;
                    export { many_1774 as many };
                    const inverse_1774: boolean;
                    export { inverse_1774 as inverse };
                }
                export { FlangeWidthAsString_1 as FlangeWidthAsString };
                export namespace WebThickness_4 {
                    const type_1775: string;
                    export { type_1775 as type };
                    const reference_1775: boolean;
                    export { reference_1775 as reference };
                    const many_1775: boolean;
                    export { many_1775 as many };
                    const inverse_1775: boolean;
                    export { inverse_1775 as inverse };
                }
                export { WebThickness_4 as WebThickness };
                export namespace WebThicknessAsString_4 {
                    const type_1776: string;
                    export { type_1776 as type };
                    const reference_1776: boolean;
                    export { reference_1776 as reference };
                    const many_1776: boolean;
                    export { many_1776 as many };
                    const inverse_1776: boolean;
                    export { inverse_1776 as inverse };
                }
                export { WebThicknessAsString_4 as WebThicknessAsString };
                export namespace FlangeThickness_2 {
                    const type_1777: string;
                    export { type_1777 as type };
                    const reference_1777: boolean;
                    export { reference_1777 as reference };
                    const many_1777: boolean;
                    export { many_1777 as many };
                    const inverse_1777: boolean;
                    export { inverse_1777 as inverse };
                }
                export { FlangeThickness_2 as FlangeThickness };
                export namespace FlangeThicknessAsString_2 {
                    const type_1778: string;
                    export { type_1778 as type };
                    const reference_1778: boolean;
                    export { reference_1778 as reference };
                    const many_1778: boolean;
                    export { many_1778 as many };
                    const inverse_1778: boolean;
                    export { inverse_1778 as inverse };
                }
                export { FlangeThicknessAsString_2 as FlangeThicknessAsString };
                export namespace FilletRadius_3 {
                    const type_1779: string;
                    export { type_1779 as type };
                    const reference_1779: boolean;
                    export { reference_1779 as reference };
                    const many_1779: boolean;
                    export { many_1779 as many };
                    const inverse_1779: boolean;
                    export { inverse_1779 as inverse };
                }
                export { FilletRadius_3 as FilletRadius };
                export namespace FilletRadiusAsString_3 {
                    const type_1780: string;
                    export { type_1780 as type };
                    const reference_1780: boolean;
                    export { reference_1780 as reference };
                    const many_1780: boolean;
                    export { many_1780 as many };
                    const inverse_1780: boolean;
                    export { inverse_1780 as inverse };
                }
                export { FilletRadiusAsString_3 as FilletRadiusAsString };
                export namespace EdgeRadius_1 {
                    const type_1781: string;
                    export { type_1781 as type };
                    const reference_1781: boolean;
                    export { reference_1781 as reference };
                    const many_1781: boolean;
                    export { many_1781 as many };
                    const inverse_1781: boolean;
                    export { inverse_1781 as inverse };
                }
                export { EdgeRadius_1 as EdgeRadius };
                export namespace EdgeRadiusAsString_1 {
                    const type_1782: string;
                    export { type_1782 as type };
                    const reference_1782: boolean;
                    export { reference_1782 as reference };
                    const many_1782: boolean;
                    export { many_1782 as many };
                    const inverse_1782: boolean;
                    export { inverse_1782 as inverse };
                }
                export { EdgeRadiusAsString_1 as EdgeRadiusAsString };
                export namespace FlangeSlope_1 {
                    const type_1783: string;
                    export { type_1783 as type };
                    const reference_1783: boolean;
                    export { reference_1783 as reference };
                    const many_1783: boolean;
                    export { many_1783 as many };
                    const inverse_1783: boolean;
                    export { inverse_1783 as inverse };
                }
                export { FlangeSlope_1 as FlangeSlope };
                export namespace FlangeSlopeAsString_1 {
                    const type_1784: string;
                    export { type_1784 as type };
                    const reference_1784: boolean;
                    export { reference_1784 as reference };
                    const many_1784: boolean;
                    export { many_1784 as many };
                    const inverse_1784: boolean;
                    export { inverse_1784 as inverse };
                }
                export { FlangeSlopeAsString_1 as FlangeSlopeAsString };
                export namespace CentreOfGravityInX_3 {
                    const type_1785: string;
                    export { type_1785 as type };
                    const reference_1785: boolean;
                    export { reference_1785 as reference };
                    const many_1785: boolean;
                    export { many_1785 as many };
                    const inverse_1785: boolean;
                    export { inverse_1785 as inverse };
                }
                export { CentreOfGravityInX_3 as CentreOfGravityInX };
                export namespace CentreOfGravityInXAsString_3 {
                    const type_1786: string;
                    export { type_1786 as type };
                    const reference_1786: boolean;
                    export { reference_1786 as reference };
                    const many_1786: boolean;
                    export { many_1786 as many };
                    const inverse_1786: boolean;
                    export { inverse_1786 as inverse };
                }
                export { CentreOfGravityInXAsString_3 as CentreOfGravityInXAsString };
            }
            export { fields_627 as fields };
        }
        namespace IfcUnitAssignment {
            const domain_628: string;
            export { domain_628 as domain };
            const superclasses_628: any[];
            export { superclasses_628 as superclasses };
            export namespace fields_628 {
                namespace Units {
                    const type_1787: string;
                    export { type_1787 as type };
                    const reference_1787: boolean;
                    export { reference_1787 as reference };
                    const many_1787: boolean;
                    export { many_1787 as many };
                    const inverse_1787: boolean;
                    export { inverse_1787 as inverse };
                }
            }
            export { fields_628 as fields };
        }
        namespace IfcUnitaryEquipmentType {
            const domain_629: string;
            export { domain_629 as domain };
            const superclasses_629: string[];
            export { superclasses_629 as superclasses };
            export namespace fields_629 {
                export namespace PredefinedType_83 {
                    const type_1788: string;
                    export { type_1788 as type };
                    const reference_1788: boolean;
                    export { reference_1788 as reference };
                    const many_1788: boolean;
                    export { many_1788 as many };
                    const inverse_1788: boolean;
                    export { inverse_1788 as inverse };
                }
                export { PredefinedType_83 as PredefinedType };
            }
            export { fields_629 as fields };
        }
        namespace IfcValveType {
            const domain_630: string;
            export { domain_630 as domain };
            const superclasses_630: string[];
            export { superclasses_630 as superclasses };
            export namespace fields_630 {
                export namespace PredefinedType_84 {
                    const type_1789: string;
                    export { type_1789 as type };
                    const reference_1789: boolean;
                    export { reference_1789 as reference };
                    const many_1789: boolean;
                    export { many_1789 as many };
                    const inverse_1789: boolean;
                    export { inverse_1789 as inverse };
                }
                export { PredefinedType_84 as PredefinedType };
            }
            export { fields_630 as fields };
        }
        namespace IfcVector {
            const domain_631: string;
            export { domain_631 as domain };
            const superclasses_631: string[];
            export { superclasses_631 as superclasses };
            export namespace fields_631 {
                export namespace Orientation_4 {
                    const type_1790: string;
                    export { type_1790 as type };
                    const reference_1790: boolean;
                    export { reference_1790 as reference };
                    const many_1790: boolean;
                    export { many_1790 as many };
                    const inverse_1790: boolean;
                    export { inverse_1790 as inverse };
                }
                export { Orientation_4 as Orientation };
                export namespace Magnitude {
                    const type_1791: string;
                    export { type_1791 as type };
                    const reference_1791: boolean;
                    export { reference_1791 as reference };
                    const many_1791: boolean;
                    export { many_1791 as many };
                    const inverse_1791: boolean;
                    export { inverse_1791 as inverse };
                }
                export namespace MagnitudeAsString {
                    const type_1792: string;
                    export { type_1792 as type };
                    const reference_1792: boolean;
                    export { reference_1792 as reference };
                    const many_1792: boolean;
                    export { many_1792 as many };
                    const inverse_1792: boolean;
                    export { inverse_1792 as inverse };
                }
                export namespace Dim_21 {
                    const type_1793: string;
                    export { type_1793 as type };
                    const reference_1793: boolean;
                    export { reference_1793 as reference };
                    const many_1793: boolean;
                    export { many_1793 as many };
                    const inverse_1793: boolean;
                    export { inverse_1793 as inverse };
                }
                export { Dim_21 as Dim };
            }
            export { fields_631 as fields };
        }
        namespace IfcVertex {
            const domain_632: string;
            export { domain_632 as domain };
            const superclasses_632: string[];
            export { superclasses_632 as superclasses };
            const fields_632: {};
            export { fields_632 as fields };
        }
        namespace IfcVertexBasedTextureMap {
            const domain_633: string;
            export { domain_633 as domain };
            const superclasses_633: any[];
            export { superclasses_633 as superclasses };
            export namespace fields_633 {
                namespace TextureVertices {
                    const type_1794: string;
                    export { type_1794 as type };
                    const reference_1794: boolean;
                    export { reference_1794 as reference };
                    const many_1794: boolean;
                    export { many_1794 as many };
                    const inverse_1794: boolean;
                    export { inverse_1794 as inverse };
                }
                namespace TexturePoints {
                    const type_1795: string;
                    export { type_1795 as type };
                    const reference_1795: boolean;
                    export { reference_1795 as reference };
                    const many_1795: boolean;
                    export { many_1795 as many };
                    const inverse_1795: boolean;
                    export { inverse_1795 as inverse };
                }
            }
            export { fields_633 as fields };
        }
        namespace IfcVertexLoop {
            const domain_634: string;
            export { domain_634 as domain };
            const superclasses_634: string[];
            export { superclasses_634 as superclasses };
            export namespace fields_634 {
                namespace LoopVertex {
                    const type_1796: string;
                    export { type_1796 as type };
                    const reference_1796: boolean;
                    export { reference_1796 as reference };
                    const many_1796: boolean;
                    export { many_1796 as many };
                    const inverse_1796: boolean;
                    export { inverse_1796 as inverse };
                }
            }
            export { fields_634 as fields };
        }
        namespace IfcVertexPoint {
            const domain_635: string;
            export { domain_635 as domain };
            const superclasses_635: string[];
            export { superclasses_635 as superclasses };
            export namespace fields_635 {
                namespace VertexGeometry {
                    const type_1797: string;
                    export { type_1797 as type };
                    const reference_1797: boolean;
                    export { reference_1797 as reference };
                    const many_1797: boolean;
                    export { many_1797 as many };
                    const inverse_1797: boolean;
                    export { inverse_1797 as inverse };
                }
            }
            export { fields_635 as fields };
        }
        namespace IfcVibrationIsolatorType {
            const domain_636: string;
            export { domain_636 as domain };
            const superclasses_636: string[];
            export { superclasses_636 as superclasses };
            export namespace fields_636 {
                export namespace PredefinedType_85 {
                    const type_1798: string;
                    export { type_1798 as type };
                    const reference_1798: boolean;
                    export { reference_1798 as reference };
                    const many_1798: boolean;
                    export { many_1798 as many };
                    const inverse_1798: boolean;
                    export { inverse_1798 as inverse };
                }
                export { PredefinedType_85 as PredefinedType };
            }
            export { fields_636 as fields };
        }
        namespace IfcVirtualElement {
            const domain_637: string;
            export { domain_637 as domain };
            const superclasses_637: string[];
            export { superclasses_637 as superclasses };
            const fields_637: {};
            export { fields_637 as fields };
        }
        namespace IfcVirtualGridIntersection {
            const domain_638: string;
            export { domain_638 as domain };
            const superclasses_638: any[];
            export { superclasses_638 as superclasses };
            export namespace fields_638 {
                namespace IntersectingAxes {
                    const type_1799: string;
                    export { type_1799 as type };
                    const reference_1799: boolean;
                    export { reference_1799 as reference };
                    const many_1799: boolean;
                    export { many_1799 as many };
                    const inverse_1799: boolean;
                    export { inverse_1799 as inverse };
                }
                namespace OffsetDistances {
                    const type_1800: string;
                    export { type_1800 as type };
                    const reference_1800: boolean;
                    export { reference_1800 as reference };
                    const many_1800: boolean;
                    export { many_1800 as many };
                    const inverse_1800: boolean;
                    export { inverse_1800 as inverse };
                }
                namespace OffsetDistancesAsString {
                    const type_1801: string;
                    export { type_1801 as type };
                    const reference_1801: boolean;
                    export { reference_1801 as reference };
                    const many_1801: boolean;
                    export { many_1801 as many };
                    const inverse_1801: boolean;
                    export { inverse_1801 as inverse };
                }
            }
            export { fields_638 as fields };
        }
        namespace IfcWall {
            const domain_639: string;
            export { domain_639 as domain };
            const superclasses_639: string[];
            export { superclasses_639 as superclasses };
            const fields_639: {};
            export { fields_639 as fields };
        }
        namespace IfcWallStandardCase {
            const domain_640: string;
            export { domain_640 as domain };
            const superclasses_640: string[];
            export { superclasses_640 as superclasses };
            const fields_640: {};
            export { fields_640 as fields };
        }
        namespace IfcWallType {
            const domain_641: string;
            export { domain_641 as domain };
            const superclasses_641: string[];
            export { superclasses_641 as superclasses };
            export namespace fields_641 {
                export namespace PredefinedType_86 {
                    const type_1802: string;
                    export { type_1802 as type };
                    const reference_1802: boolean;
                    export { reference_1802 as reference };
                    const many_1802: boolean;
                    export { many_1802 as many };
                    const inverse_1802: boolean;
                    export { inverse_1802 as inverse };
                }
                export { PredefinedType_86 as PredefinedType };
            }
            export { fields_641 as fields };
        }
        namespace IfcWasteTerminalType {
            const domain_642: string;
            export { domain_642 as domain };
            const superclasses_642: string[];
            export { superclasses_642 as superclasses };
            export namespace fields_642 {
                export namespace PredefinedType_87 {
                    const type_1803: string;
                    export { type_1803 as type };
                    const reference_1803: boolean;
                    export { reference_1803 as reference };
                    const many_1803: boolean;
                    export { many_1803 as many };
                    const inverse_1803: boolean;
                    export { inverse_1803 as inverse };
                }
                export { PredefinedType_87 as PredefinedType };
            }
            export { fields_642 as fields };
        }
        namespace IfcWaterProperties {
            const domain_643: string;
            export { domain_643 as domain };
            const superclasses_643: string[];
            export { superclasses_643 as superclasses };
            export namespace fields_643 {
                namespace IsPotable {
                    const type_1804: string;
                    export { type_1804 as type };
                    const reference_1804: boolean;
                    export { reference_1804 as reference };
                    const many_1804: boolean;
                    export { many_1804 as many };
                    const inverse_1804: boolean;
                    export { inverse_1804 as inverse };
                }
                namespace Hardness {
                    const type_1805: string;
                    export { type_1805 as type };
                    const reference_1805: boolean;
                    export { reference_1805 as reference };
                    const many_1805: boolean;
                    export { many_1805 as many };
                    const inverse_1805: boolean;
                    export { inverse_1805 as inverse };
                }
                namespace HardnessAsString {
                    const type_1806: string;
                    export { type_1806 as type };
                    const reference_1806: boolean;
                    export { reference_1806 as reference };
                    const many_1806: boolean;
                    export { many_1806 as many };
                    const inverse_1806: boolean;
                    export { inverse_1806 as inverse };
                }
                namespace AlkalinityConcentration {
                    const type_1807: string;
                    export { type_1807 as type };
                    const reference_1807: boolean;
                    export { reference_1807 as reference };
                    const many_1807: boolean;
                    export { many_1807 as many };
                    const inverse_1807: boolean;
                    export { inverse_1807 as inverse };
                }
                namespace AlkalinityConcentrationAsString {
                    const type_1808: string;
                    export { type_1808 as type };
                    const reference_1808: boolean;
                    export { reference_1808 as reference };
                    const many_1808: boolean;
                    export { many_1808 as many };
                    const inverse_1808: boolean;
                    export { inverse_1808 as inverse };
                }
                namespace AcidityConcentration {
                    const type_1809: string;
                    export { type_1809 as type };
                    const reference_1809: boolean;
                    export { reference_1809 as reference };
                    const many_1809: boolean;
                    export { many_1809 as many };
                    const inverse_1809: boolean;
                    export { inverse_1809 as inverse };
                }
                namespace AcidityConcentrationAsString {
                    const type_1810: string;
                    export { type_1810 as type };
                    const reference_1810: boolean;
                    export { reference_1810 as reference };
                    const many_1810: boolean;
                    export { many_1810 as many };
                    const inverse_1810: boolean;
                    export { inverse_1810 as inverse };
                }
                namespace ImpuritiesContent {
                    const type_1811: string;
                    export { type_1811 as type };
                    const reference_1811: boolean;
                    export { reference_1811 as reference };
                    const many_1811: boolean;
                    export { many_1811 as many };
                    const inverse_1811: boolean;
                    export { inverse_1811 as inverse };
                }
                namespace ImpuritiesContentAsString {
                    const type_1812: string;
                    export { type_1812 as type };
                    const reference_1812: boolean;
                    export { reference_1812 as reference };
                    const many_1812: boolean;
                    export { many_1812 as many };
                    const inverse_1812: boolean;
                    export { inverse_1812 as inverse };
                }
                namespace PHLevel {
                    const type_1813: string;
                    export { type_1813 as type };
                    const reference_1813: boolean;
                    export { reference_1813 as reference };
                    const many_1813: boolean;
                    export { many_1813 as many };
                    const inverse_1813: boolean;
                    export { inverse_1813 as inverse };
                }
                namespace PHLevelAsString {
                    const type_1814: string;
                    export { type_1814 as type };
                    const reference_1814: boolean;
                    export { reference_1814 as reference };
                    const many_1814: boolean;
                    export { many_1814 as many };
                    const inverse_1814: boolean;
                    export { inverse_1814 as inverse };
                }
                namespace DissolvedSolidsContent {
                    const type_1815: string;
                    export { type_1815 as type };
                    const reference_1815: boolean;
                    export { reference_1815 as reference };
                    const many_1815: boolean;
                    export { many_1815 as many };
                    const inverse_1815: boolean;
                    export { inverse_1815 as inverse };
                }
                namespace DissolvedSolidsContentAsString {
                    const type_1816: string;
                    export { type_1816 as type };
                    const reference_1816: boolean;
                    export { reference_1816 as reference };
                    const many_1816: boolean;
                    export { many_1816 as many };
                    const inverse_1816: boolean;
                    export { inverse_1816 as inverse };
                }
            }
            export { fields_643 as fields };
        }
        namespace IfcWindow {
            const domain_644: string;
            export { domain_644 as domain };
            const superclasses_644: string[];
            export { superclasses_644 as superclasses };
            export namespace fields_644 {
                export namespace OverallHeight_3 {
                    const type_1817: string;
                    export { type_1817 as type };
                    const reference_1817: boolean;
                    export { reference_1817 as reference };
                    const many_1817: boolean;
                    export { many_1817 as many };
                    const inverse_1817: boolean;
                    export { inverse_1817 as inverse };
                }
                export { OverallHeight_3 as OverallHeight };
                export namespace OverallHeightAsString_3 {
                    const type_1818: string;
                    export { type_1818 as type };
                    const reference_1818: boolean;
                    export { reference_1818 as reference };
                    const many_1818: boolean;
                    export { many_1818 as many };
                    const inverse_1818: boolean;
                    export { inverse_1818 as inverse };
                }
                export { OverallHeightAsString_3 as OverallHeightAsString };
                export namespace OverallWidth_2 {
                    const type_1819: string;
                    export { type_1819 as type };
                    const reference_1819: boolean;
                    export { reference_1819 as reference };
                    const many_1819: boolean;
                    export { many_1819 as many };
                    const inverse_1819: boolean;
                    export { inverse_1819 as inverse };
                }
                export { OverallWidth_2 as OverallWidth };
                export namespace OverallWidthAsString_2 {
                    const type_1820: string;
                    export { type_1820 as type };
                    const reference_1820: boolean;
                    export { reference_1820 as reference };
                    const many_1820: boolean;
                    export { many_1820 as many };
                    const inverse_1820: boolean;
                    export { inverse_1820 as inverse };
                }
                export { OverallWidthAsString_2 as OverallWidthAsString };
            }
            export { fields_644 as fields };
        }
        namespace IfcWindowLiningProperties {
            const domain_645: string;
            export { domain_645 as domain };
            const superclasses_645: string[];
            export { superclasses_645 as superclasses };
            export namespace fields_645 {
                export namespace LiningDepth_1 {
                    const type_1821: string;
                    export { type_1821 as type };
                    const reference_1821: boolean;
                    export { reference_1821 as reference };
                    const many_1821: boolean;
                    export { many_1821 as many };
                    const inverse_1821: boolean;
                    export { inverse_1821 as inverse };
                }
                export { LiningDepth_1 as LiningDepth };
                export namespace LiningDepthAsString_1 {
                    const type_1822: string;
                    export { type_1822 as type };
                    const reference_1822: boolean;
                    export { reference_1822 as reference };
                    const many_1822: boolean;
                    export { many_1822 as many };
                    const inverse_1822: boolean;
                    export { inverse_1822 as inverse };
                }
                export { LiningDepthAsString_1 as LiningDepthAsString };
                export namespace LiningThickness_1 {
                    const type_1823: string;
                    export { type_1823 as type };
                    const reference_1823: boolean;
                    export { reference_1823 as reference };
                    const many_1823: boolean;
                    export { many_1823 as many };
                    const inverse_1823: boolean;
                    export { inverse_1823 as inverse };
                }
                export { LiningThickness_1 as LiningThickness };
                export namespace LiningThicknessAsString_1 {
                    const type_1824: string;
                    export { type_1824 as type };
                    const reference_1824: boolean;
                    export { reference_1824 as reference };
                    const many_1824: boolean;
                    export { many_1824 as many };
                    const inverse_1824: boolean;
                    export { inverse_1824 as inverse };
                }
                export { LiningThicknessAsString_1 as LiningThicknessAsString };
                export namespace TransomThickness_1 {
                    const type_1825: string;
                    export { type_1825 as type };
                    const reference_1825: boolean;
                    export { reference_1825 as reference };
                    const many_1825: boolean;
                    export { many_1825 as many };
                    const inverse_1825: boolean;
                    export { inverse_1825 as inverse };
                }
                export { TransomThickness_1 as TransomThickness };
                export namespace TransomThicknessAsString_1 {
                    const type_1826: string;
                    export { type_1826 as type };
                    const reference_1826: boolean;
                    export { reference_1826 as reference };
                    const many_1826: boolean;
                    export { many_1826 as many };
                    const inverse_1826: boolean;
                    export { inverse_1826 as inverse };
                }
                export { TransomThicknessAsString_1 as TransomThicknessAsString };
                export namespace MullionThickness {
                    const type_1827: string;
                    export { type_1827 as type };
                    const reference_1827: boolean;
                    export { reference_1827 as reference };
                    const many_1827: boolean;
                    export { many_1827 as many };
                    const inverse_1827: boolean;
                    export { inverse_1827 as inverse };
                }
                export namespace MullionThicknessAsString {
                    const type_1828: string;
                    export { type_1828 as type };
                    const reference_1828: boolean;
                    export { reference_1828 as reference };
                    const many_1828: boolean;
                    export { many_1828 as many };
                    const inverse_1828: boolean;
                    export { inverse_1828 as inverse };
                }
                export namespace FirstTransomOffset {
                    const type_1829: string;
                    export { type_1829 as type };
                    const reference_1829: boolean;
                    export { reference_1829 as reference };
                    const many_1829: boolean;
                    export { many_1829 as many };
                    const inverse_1829: boolean;
                    export { inverse_1829 as inverse };
                }
                export namespace FirstTransomOffsetAsString {
                    const type_1830: string;
                    export { type_1830 as type };
                    const reference_1830: boolean;
                    export { reference_1830 as reference };
                    const many_1830: boolean;
                    export { many_1830 as many };
                    const inverse_1830: boolean;
                    export { inverse_1830 as inverse };
                }
                export namespace SecondTransomOffset {
                    const type_1831: string;
                    export { type_1831 as type };
                    const reference_1831: boolean;
                    export { reference_1831 as reference };
                    const many_1831: boolean;
                    export { many_1831 as many };
                    const inverse_1831: boolean;
                    export { inverse_1831 as inverse };
                }
                export namespace SecondTransomOffsetAsString {
                    const type_1832: string;
                    export { type_1832 as type };
                    const reference_1832: boolean;
                    export { reference_1832 as reference };
                    const many_1832: boolean;
                    export { many_1832 as many };
                    const inverse_1832: boolean;
                    export { inverse_1832 as inverse };
                }
                export namespace FirstMullionOffset {
                    const type_1833: string;
                    export { type_1833 as type };
                    const reference_1833: boolean;
                    export { reference_1833 as reference };
                    const many_1833: boolean;
                    export { many_1833 as many };
                    const inverse_1833: boolean;
                    export { inverse_1833 as inverse };
                }
                export namespace FirstMullionOffsetAsString {
                    const type_1834: string;
                    export { type_1834 as type };
                    const reference_1834: boolean;
                    export { reference_1834 as reference };
                    const many_1834: boolean;
                    export { many_1834 as many };
                    const inverse_1834: boolean;
                    export { inverse_1834 as inverse };
                }
                export namespace SecondMullionOffset {
                    const type_1835: string;
                    export { type_1835 as type };
                    const reference_1835: boolean;
                    export { reference_1835 as reference };
                    const many_1835: boolean;
                    export { many_1835 as many };
                    const inverse_1835: boolean;
                    export { inverse_1835 as inverse };
                }
                export namespace SecondMullionOffsetAsString {
                    const type_1836: string;
                    export { type_1836 as type };
                    const reference_1836: boolean;
                    export { reference_1836 as reference };
                    const many_1836: boolean;
                    export { many_1836 as many };
                    const inverse_1836: boolean;
                    export { inverse_1836 as inverse };
                }
                export namespace ShapeAspectStyle_3 {
                    const type_1837: string;
                    export { type_1837 as type };
                    const reference_1837: boolean;
                    export { reference_1837 as reference };
                    const many_1837: boolean;
                    export { many_1837 as many };
                    const inverse_1837: boolean;
                    export { inverse_1837 as inverse };
                }
                export { ShapeAspectStyle_3 as ShapeAspectStyle };
            }
            export { fields_645 as fields };
        }
        namespace IfcWindowPanelProperties {
            const domain_646: string;
            export { domain_646 as domain };
            const superclasses_646: string[];
            export { superclasses_646 as superclasses };
            export namespace fields_646 {
                export namespace OperationType_3 {
                    const type_1838: string;
                    export { type_1838 as type };
                    const reference_1838: boolean;
                    export { reference_1838 as reference };
                    const many_1838: boolean;
                    export { many_1838 as many };
                    const inverse_1838: boolean;
                    export { inverse_1838 as inverse };
                }
                export { OperationType_3 as OperationType };
                export namespace PanelPosition_2 {
                    const type_1839: string;
                    export { type_1839 as type };
                    const reference_1839: boolean;
                    export { reference_1839 as reference };
                    const many_1839: boolean;
                    export { many_1839 as many };
                    const inverse_1839: boolean;
                    export { inverse_1839 as inverse };
                }
                export { PanelPosition_2 as PanelPosition };
                export namespace FrameDepth_1 {
                    const type_1840: string;
                    export { type_1840 as type };
                    const reference_1840: boolean;
                    export { reference_1840 as reference };
                    const many_1840: boolean;
                    export { many_1840 as many };
                    const inverse_1840: boolean;
                    export { inverse_1840 as inverse };
                }
                export { FrameDepth_1 as FrameDepth };
                export namespace FrameDepthAsString_1 {
                    const type_1841: string;
                    export { type_1841 as type };
                    const reference_1841: boolean;
                    export { reference_1841 as reference };
                    const many_1841: boolean;
                    export { many_1841 as many };
                    const inverse_1841: boolean;
                    export { inverse_1841 as inverse };
                }
                export { FrameDepthAsString_1 as FrameDepthAsString };
                export namespace FrameThickness_1 {
                    const type_1842: string;
                    export { type_1842 as type };
                    const reference_1842: boolean;
                    export { reference_1842 as reference };
                    const many_1842: boolean;
                    export { many_1842 as many };
                    const inverse_1842: boolean;
                    export { inverse_1842 as inverse };
                }
                export { FrameThickness_1 as FrameThickness };
                export namespace FrameThicknessAsString_1 {
                    const type_1843: string;
                    export { type_1843 as type };
                    const reference_1843: boolean;
                    export { reference_1843 as reference };
                    const many_1843: boolean;
                    export { many_1843 as many };
                    const inverse_1843: boolean;
                    export { inverse_1843 as inverse };
                }
                export { FrameThicknessAsString_1 as FrameThicknessAsString };
                export namespace ShapeAspectStyle_4 {
                    const type_1844: string;
                    export { type_1844 as type };
                    const reference_1844: boolean;
                    export { reference_1844 as reference };
                    const many_1844: boolean;
                    export { many_1844 as many };
                    const inverse_1844: boolean;
                    export { inverse_1844 as inverse };
                }
                export { ShapeAspectStyle_4 as ShapeAspectStyle };
            }
            export { fields_646 as fields };
        }
        namespace IfcWindowStyle {
            const domain_647: string;
            export { domain_647 as domain };
            const superclasses_647: string[];
            export { superclasses_647 as superclasses };
            export namespace fields_647 {
                export namespace ConstructionType_2 {
                    const type_1845: string;
                    export { type_1845 as type };
                    const reference_1845: boolean;
                    export { reference_1845 as reference };
                    const many_1845: boolean;
                    export { many_1845 as many };
                    const inverse_1845: boolean;
                    export { inverse_1845 as inverse };
                }
                export { ConstructionType_2 as ConstructionType };
                export namespace OperationType_4 {
                    const type_1846: string;
                    export { type_1846 as type };
                    const reference_1846: boolean;
                    export { reference_1846 as reference };
                    const many_1846: boolean;
                    export { many_1846 as many };
                    const inverse_1846: boolean;
                    export { inverse_1846 as inverse };
                }
                export { OperationType_4 as OperationType };
                export namespace ParameterTakesPrecedence_1 {
                    const type_1847: string;
                    export { type_1847 as type };
                    const reference_1847: boolean;
                    export { reference_1847 as reference };
                    const many_1847: boolean;
                    export { many_1847 as many };
                    const inverse_1847: boolean;
                    export { inverse_1847 as inverse };
                }
                export { ParameterTakesPrecedence_1 as ParameterTakesPrecedence };
                export namespace Sizeable_1 {
                    const type_1848: string;
                    export { type_1848 as type };
                    const reference_1848: boolean;
                    export { reference_1848 as reference };
                    const many_1848: boolean;
                    export { many_1848 as many };
                    const inverse_1848: boolean;
                    export { inverse_1848 as inverse };
                }
                export { Sizeable_1 as Sizeable };
            }
            export { fields_647 as fields };
        }
        namespace IfcWorkControl {
            const domain_648: string;
            export { domain_648 as domain };
            const superclasses_648: string[];
            export { superclasses_648 as superclasses };
            export namespace fields_648 {
                export namespace Identifier_2 {
                    const type_1849: string;
                    export { type_1849 as type };
                    const reference_1849: boolean;
                    export { reference_1849 as reference };
                    const many_1849: boolean;
                    export { many_1849 as many };
                    const inverse_1849: boolean;
                    export { inverse_1849 as inverse };
                }
                export { Identifier_2 as Identifier };
                export namespace CreationDate_1 {
                    const type_1850: string;
                    export { type_1850 as type };
                    const reference_1850: boolean;
                    export { reference_1850 as reference };
                    const many_1850: boolean;
                    export { many_1850 as many };
                    const inverse_1850: boolean;
                    export { inverse_1850 as inverse };
                }
                export { CreationDate_1 as CreationDate };
                export namespace Creators {
                    const type_1851: string;
                    export { type_1851 as type };
                    const reference_1851: boolean;
                    export { reference_1851 as reference };
                    const many_1851: boolean;
                    export { many_1851 as many };
                    const inverse_1851: boolean;
                    export { inverse_1851 as inverse };
                }
                export namespace Purpose_3 {
                    const type_1852: string;
                    export { type_1852 as type };
                    const reference_1852: boolean;
                    export { reference_1852 as reference };
                    const many_1852: boolean;
                    export { many_1852 as many };
                    const inverse_1852: boolean;
                    export { inverse_1852 as inverse };
                }
                export { Purpose_3 as Purpose };
                export namespace Duration {
                    const type_1853: string;
                    export { type_1853 as type };
                    const reference_1853: boolean;
                    export { reference_1853 as reference };
                    const many_1853: boolean;
                    export { many_1853 as many };
                    const inverse_1853: boolean;
                    export { inverse_1853 as inverse };
                }
                export namespace DurationAsString {
                    const type_1854: string;
                    export { type_1854 as type };
                    const reference_1854: boolean;
                    export { reference_1854 as reference };
                    const many_1854: boolean;
                    export { many_1854 as many };
                    const inverse_1854: boolean;
                    export { inverse_1854 as inverse };
                }
                export namespace TotalFloat_1 {
                    const type_1855: string;
                    export { type_1855 as type };
                    const reference_1855: boolean;
                    export { reference_1855 as reference };
                    const many_1855: boolean;
                    export { many_1855 as many };
                    const inverse_1855: boolean;
                    export { inverse_1855 as inverse };
                }
                export { TotalFloat_1 as TotalFloat };
                export namespace TotalFloatAsString_1 {
                    const type_1856: string;
                    export { type_1856 as type };
                    const reference_1856: boolean;
                    export { reference_1856 as reference };
                    const many_1856: boolean;
                    export { many_1856 as many };
                    const inverse_1856: boolean;
                    export { inverse_1856 as inverse };
                }
                export { TotalFloatAsString_1 as TotalFloatAsString };
                export namespace StartTime_1 {
                    const type_1857: string;
                    export { type_1857 as type };
                    const reference_1857: boolean;
                    export { reference_1857 as reference };
                    const many_1857: boolean;
                    export { many_1857 as many };
                    const inverse_1857: boolean;
                    export { inverse_1857 as inverse };
                }
                export { StartTime_1 as StartTime };
                export namespace FinishTime {
                    const type_1858: string;
                    export { type_1858 as type };
                    const reference_1858: boolean;
                    export { reference_1858 as reference };
                    const many_1858: boolean;
                    export { many_1858 as many };
                    const inverse_1858: boolean;
                    export { inverse_1858 as inverse };
                }
                export namespace WorkControlType {
                    const type_1859: string;
                    export { type_1859 as type };
                    const reference_1859: boolean;
                    export { reference_1859 as reference };
                    const many_1859: boolean;
                    export { many_1859 as many };
                    const inverse_1859: boolean;
                    export { inverse_1859 as inverse };
                }
                export namespace UserDefinedControlType {
                    const type_1860: string;
                    export { type_1860 as type };
                    const reference_1860: boolean;
                    export { reference_1860 as reference };
                    const many_1860: boolean;
                    export { many_1860 as many };
                    const inverse_1860: boolean;
                    export { inverse_1860 as inverse };
                }
            }
            export { fields_648 as fields };
        }
        namespace IfcWorkPlan {
            const domain_649: string;
            export { domain_649 as domain };
            const superclasses_649: string[];
            export { superclasses_649 as superclasses };
            const fields_649: {};
            export { fields_649 as fields };
        }
        namespace IfcWorkSchedule {
            const domain_650: string;
            export { domain_650 as domain };
            const superclasses_650: string[];
            export { superclasses_650 as superclasses };
            const fields_650: {};
            export { fields_650 as fields };
        }
        namespace IfcZShapeProfileDef {
            const domain_651: string;
            export { domain_651 as domain };
            const superclasses_651: string[];
            export { superclasses_651 as superclasses };
            export namespace fields_651 {
                export namespace Depth_6 {
                    const type_1861: string;
                    export { type_1861 as type };
                    const reference_1861: boolean;
                    export { reference_1861 as reference };
                    const many_1861: boolean;
                    export { many_1861 as many };
                    const inverse_1861: boolean;
                    export { inverse_1861 as inverse };
                }
                export { Depth_6 as Depth };
                export namespace DepthAsString_6 {
                    const type_1862: string;
                    export { type_1862 as type };
                    const reference_1862: boolean;
                    export { reference_1862 as reference };
                    const many_1862: boolean;
                    export { many_1862 as many };
                    const inverse_1862: boolean;
                    export { inverse_1862 as inverse };
                }
                export { DepthAsString_6 as DepthAsString };
                export namespace FlangeWidth_2 {
                    const type_1863: string;
                    export { type_1863 as type };
                    const reference_1863: boolean;
                    export { reference_1863 as reference };
                    const many_1863: boolean;
                    export { many_1863 as many };
                    const inverse_1863: boolean;
                    export { inverse_1863 as inverse };
                }
                export { FlangeWidth_2 as FlangeWidth };
                export namespace FlangeWidthAsString_2 {
                    const type_1864: string;
                    export { type_1864 as type };
                    const reference_1864: boolean;
                    export { reference_1864 as reference };
                    const many_1864: boolean;
                    export { many_1864 as many };
                    const inverse_1864: boolean;
                    export { inverse_1864 as inverse };
                }
                export { FlangeWidthAsString_2 as FlangeWidthAsString };
                export namespace WebThickness_5 {
                    const type_1865: string;
                    export { type_1865 as type };
                    const reference_1865: boolean;
                    export { reference_1865 as reference };
                    const many_1865: boolean;
                    export { many_1865 as many };
                    const inverse_1865: boolean;
                    export { inverse_1865 as inverse };
                }
                export { WebThickness_5 as WebThickness };
                export namespace WebThicknessAsString_5 {
                    const type_1866: string;
                    export { type_1866 as type };
                    const reference_1866: boolean;
                    export { reference_1866 as reference };
                    const many_1866: boolean;
                    export { many_1866 as many };
                    const inverse_1866: boolean;
                    export { inverse_1866 as inverse };
                }
                export { WebThicknessAsString_5 as WebThicknessAsString };
                export namespace FlangeThickness_3 {
                    const type_1867: string;
                    export { type_1867 as type };
                    const reference_1867: boolean;
                    export { reference_1867 as reference };
                    const many_1867: boolean;
                    export { many_1867 as many };
                    const inverse_1867: boolean;
                    export { inverse_1867 as inverse };
                }
                export { FlangeThickness_3 as FlangeThickness };
                export namespace FlangeThicknessAsString_3 {
                    const type_1868: string;
                    export { type_1868 as type };
                    const reference_1868: boolean;
                    export { reference_1868 as reference };
                    const many_1868: boolean;
                    export { many_1868 as many };
                    const inverse_1868: boolean;
                    export { inverse_1868 as inverse };
                }
                export { FlangeThicknessAsString_3 as FlangeThicknessAsString };
                export namespace FilletRadius_4 {
                    const type_1869: string;
                    export { type_1869 as type };
                    const reference_1869: boolean;
                    export { reference_1869 as reference };
                    const many_1869: boolean;
                    export { many_1869 as many };
                    const inverse_1869: boolean;
                    export { inverse_1869 as inverse };
                }
                export { FilletRadius_4 as FilletRadius };
                export namespace FilletRadiusAsString_4 {
                    const type_1870: string;
                    export { type_1870 as type };
                    const reference_1870: boolean;
                    export { reference_1870 as reference };
                    const many_1870: boolean;
                    export { many_1870 as many };
                    const inverse_1870: boolean;
                    export { inverse_1870 as inverse };
                }
                export { FilletRadiusAsString_4 as FilletRadiusAsString };
                export namespace EdgeRadius_2 {
                    const type_1871: string;
                    export { type_1871 as type };
                    const reference_1871: boolean;
                    export { reference_1871 as reference };
                    const many_1871: boolean;
                    export { many_1871 as many };
                    const inverse_1871: boolean;
                    export { inverse_1871 as inverse };
                }
                export { EdgeRadius_2 as EdgeRadius };
                export namespace EdgeRadiusAsString_2 {
                    const type_1872: string;
                    export { type_1872 as type };
                    const reference_1872: boolean;
                    export { reference_1872 as reference };
                    const many_1872: boolean;
                    export { many_1872 as many };
                    const inverse_1872: boolean;
                    export { inverse_1872 as inverse };
                }
                export { EdgeRadiusAsString_2 as EdgeRadiusAsString };
            }
            export { fields_651 as fields };
        }
        namespace IfcZone {
            const domain_652: string;
            export { domain_652 as domain };
            const superclasses_652: string[];
            export { superclasses_652 as superclasses };
            const fields_652: {};
            export { fields_652 as fields };
        }
        namespace IfcAbsorbedDoseMeasure {
            const domain_653: string;
            export { domain_653 as domain };
            const superclasses_653: string[];
            export { superclasses_653 as superclasses };
            export namespace fields_653 {
                namespace wrappedValue {
                    const type_1873: string;
                    export { type_1873 as type };
                    const reference_1873: boolean;
                    export { reference_1873 as reference };
                    const many_1873: boolean;
                    export { many_1873 as many };
                    const inverse_1873: boolean;
                    export { inverse_1873 as inverse };
                }
                namespace wrappedValueAsString {
                    const type_1874: string;
                    export { type_1874 as type };
                    const reference_1874: boolean;
                    export { reference_1874 as reference };
                    const many_1874: boolean;
                    export { many_1874 as many };
                    const inverse_1874: boolean;
                    export { inverse_1874 as inverse };
                }
            }
            export { fields_653 as fields };
        }
        namespace IfcAccelerationMeasure {
            const domain_654: string;
            export { domain_654 as domain };
            const superclasses_654: string[];
            export { superclasses_654 as superclasses };
            export namespace fields_654 {
                export namespace wrappedValue_1 {
                    const type_1875: string;
                    export { type_1875 as type };
                    const reference_1875: boolean;
                    export { reference_1875 as reference };
                    const many_1875: boolean;
                    export { many_1875 as many };
                    const inverse_1875: boolean;
                    export { inverse_1875 as inverse };
                }
                export { wrappedValue_1 as wrappedValue };
                export namespace wrappedValueAsString_1 {
                    const type_1876: string;
                    export { type_1876 as type };
                    const reference_1876: boolean;
                    export { reference_1876 as reference };
                    const many_1876: boolean;
                    export { many_1876 as many };
                    const inverse_1876: boolean;
                    export { inverse_1876 as inverse };
                }
                export { wrappedValueAsString_1 as wrappedValueAsString };
            }
            export { fields_654 as fields };
        }
        namespace IfcAmountOfSubstanceMeasure {
            const domain_655: string;
            export { domain_655 as domain };
            const superclasses_655: string[];
            export { superclasses_655 as superclasses };
            export namespace fields_655 {
                export namespace wrappedValue_2 {
                    const type_1877: string;
                    export { type_1877 as type };
                    const reference_1877: boolean;
                    export { reference_1877 as reference };
                    const many_1877: boolean;
                    export { many_1877 as many };
                    const inverse_1877: boolean;
                    export { inverse_1877 as inverse };
                }
                export { wrappedValue_2 as wrappedValue };
                export namespace wrappedValueAsString_2 {
                    const type_1878: string;
                    export { type_1878 as type };
                    const reference_1878: boolean;
                    export { reference_1878 as reference };
                    const many_1878: boolean;
                    export { many_1878 as many };
                    const inverse_1878: boolean;
                    export { inverse_1878 as inverse };
                }
                export { wrappedValueAsString_2 as wrappedValueAsString };
            }
            export { fields_655 as fields };
        }
        namespace IfcAngularVelocityMeasure {
            const domain_656: string;
            export { domain_656 as domain };
            const superclasses_656: string[];
            export { superclasses_656 as superclasses };
            export namespace fields_656 {
                export namespace wrappedValue_3 {
                    const type_1879: string;
                    export { type_1879 as type };
                    const reference_1879: boolean;
                    export { reference_1879 as reference };
                    const many_1879: boolean;
                    export { many_1879 as many };
                    const inverse_1879: boolean;
                    export { inverse_1879 as inverse };
                }
                export { wrappedValue_3 as wrappedValue };
                export namespace wrappedValueAsString_3 {
                    const type_1880: string;
                    export { type_1880 as type };
                    const reference_1880: boolean;
                    export { reference_1880 as reference };
                    const many_1880: boolean;
                    export { many_1880 as many };
                    const inverse_1880: boolean;
                    export { inverse_1880 as inverse };
                }
                export { wrappedValueAsString_3 as wrappedValueAsString };
            }
            export { fields_656 as fields };
        }
        namespace IfcAreaMeasure {
            const domain_657: string;
            export { domain_657 as domain };
            const superclasses_657: string[];
            export { superclasses_657 as superclasses };
            export namespace fields_657 {
                export namespace wrappedValue_4 {
                    const type_1881: string;
                    export { type_1881 as type };
                    const reference_1881: boolean;
                    export { reference_1881 as reference };
                    const many_1881: boolean;
                    export { many_1881 as many };
                    const inverse_1881: boolean;
                    export { inverse_1881 as inverse };
                }
                export { wrappedValue_4 as wrappedValue };
                export namespace wrappedValueAsString_4 {
                    const type_1882: string;
                    export { type_1882 as type };
                    const reference_1882: boolean;
                    export { reference_1882 as reference };
                    const many_1882: boolean;
                    export { many_1882 as many };
                    const inverse_1882: boolean;
                    export { inverse_1882 as inverse };
                }
                export { wrappedValueAsString_4 as wrappedValueAsString };
            }
            export { fields_657 as fields };
        }
        namespace IfcBoolean {
            const domain_658: string;
            export { domain_658 as domain };
            const superclasses_658: string[];
            export { superclasses_658 as superclasses };
            export namespace fields_658 {
                export namespace wrappedValue_5 {
                    const type_1883: string;
                    export { type_1883 as type };
                    const reference_1883: boolean;
                    export { reference_1883 as reference };
                    const many_1883: boolean;
                    export { many_1883 as many };
                    const inverse_1883: boolean;
                    export { inverse_1883 as inverse };
                }
                export { wrappedValue_5 as wrappedValue };
            }
            export { fields_658 as fields };
        }
        namespace IfcContextDependentMeasure {
            const domain_659: string;
            export { domain_659 as domain };
            const superclasses_659: string[];
            export { superclasses_659 as superclasses };
            export namespace fields_659 {
                export namespace wrappedValue_6 {
                    const type_1884: string;
                    export { type_1884 as type };
                    const reference_1884: boolean;
                    export { reference_1884 as reference };
                    const many_1884: boolean;
                    export { many_1884 as many };
                    const inverse_1884: boolean;
                    export { inverse_1884 as inverse };
                }
                export { wrappedValue_6 as wrappedValue };
                export namespace wrappedValueAsString_5 {
                    const type_1885: string;
                    export { type_1885 as type };
                    const reference_1885: boolean;
                    export { reference_1885 as reference };
                    const many_1885: boolean;
                    export { many_1885 as many };
                    const inverse_1885: boolean;
                    export { inverse_1885 as inverse };
                }
                export { wrappedValueAsString_5 as wrappedValueAsString };
            }
            export { fields_659 as fields };
        }
        namespace IfcCountMeasure {
            const domain_660: string;
            export { domain_660 as domain };
            const superclasses_660: string[];
            export { superclasses_660 as superclasses };
            export namespace fields_660 {
                export namespace wrappedValue_7 {
                    const type_1886: string;
                    export { type_1886 as type };
                    const reference_1886: boolean;
                    export { reference_1886 as reference };
                    const many_1886: boolean;
                    export { many_1886 as many };
                    const inverse_1886: boolean;
                    export { inverse_1886 as inverse };
                }
                export { wrappedValue_7 as wrappedValue };
                export namespace wrappedValueAsString_6 {
                    const type_1887: string;
                    export { type_1887 as type };
                    const reference_1887: boolean;
                    export { reference_1887 as reference };
                    const many_1887: boolean;
                    export { many_1887 as many };
                    const inverse_1887: boolean;
                    export { inverse_1887 as inverse };
                }
                export { wrappedValueAsString_6 as wrappedValueAsString };
            }
            export { fields_660 as fields };
        }
        namespace IfcCurvatureMeasure {
            const domain_661: string;
            export { domain_661 as domain };
            const superclasses_661: string[];
            export { superclasses_661 as superclasses };
            export namespace fields_661 {
                export namespace wrappedValue_8 {
                    const type_1888: string;
                    export { type_1888 as type };
                    const reference_1888: boolean;
                    export { reference_1888 as reference };
                    const many_1888: boolean;
                    export { many_1888 as many };
                    const inverse_1888: boolean;
                    export { inverse_1888 as inverse };
                }
                export { wrappedValue_8 as wrappedValue };
                export namespace wrappedValueAsString_7 {
                    const type_1889: string;
                    export { type_1889 as type };
                    const reference_1889: boolean;
                    export { reference_1889 as reference };
                    const many_1889: boolean;
                    export { many_1889 as many };
                    const inverse_1889: boolean;
                    export { inverse_1889 as inverse };
                }
                export { wrappedValueAsString_7 as wrappedValueAsString };
            }
            export { fields_661 as fields };
        }
        namespace IfcDayInMonthNumber {
            const domain_662: string;
            export { domain_662 as domain };
            const superclasses_662: any[];
            export { superclasses_662 as superclasses };
            export namespace fields_662 {
                export namespace wrappedValue_9 {
                    const type_1890: string;
                    export { type_1890 as type };
                    const reference_1890: boolean;
                    export { reference_1890 as reference };
                    const many_1890: boolean;
                    export { many_1890 as many };
                    const inverse_1890: boolean;
                    export { inverse_1890 as inverse };
                }
                export { wrappedValue_9 as wrappedValue };
            }
            export { fields_662 as fields };
        }
        namespace IfcDaylightSavingHour {
            const domain_663: string;
            export { domain_663 as domain };
            const superclasses_663: any[];
            export { superclasses_663 as superclasses };
            export namespace fields_663 {
                export namespace wrappedValue_10 {
                    const type_1891: string;
                    export { type_1891 as type };
                    const reference_1891: boolean;
                    export { reference_1891 as reference };
                    const many_1891: boolean;
                    export { many_1891 as many };
                    const inverse_1891: boolean;
                    export { inverse_1891 as inverse };
                }
                export { wrappedValue_10 as wrappedValue };
            }
            export { fields_663 as fields };
        }
        namespace IfcDescriptiveMeasure {
            const domain_664: string;
            export { domain_664 as domain };
            const superclasses_664: string[];
            export { superclasses_664 as superclasses };
            export namespace fields_664 {
                export namespace wrappedValue_11 {
                    const type_1892: string;
                    export { type_1892 as type };
                    const reference_1892: boolean;
                    export { reference_1892 as reference };
                    const many_1892: boolean;
                    export { many_1892 as many };
                    const inverse_1892: boolean;
                    export { inverse_1892 as inverse };
                }
                export { wrappedValue_11 as wrappedValue };
            }
            export { fields_664 as fields };
        }
        namespace IfcDimensionCount {
            const domain_665: string;
            export { domain_665 as domain };
            const superclasses_665: any[];
            export { superclasses_665 as superclasses };
            export namespace fields_665 {
                export namespace wrappedValue_12 {
                    const type_1893: string;
                    export { type_1893 as type };
                    const reference_1893: boolean;
                    export { reference_1893 as reference };
                    const many_1893: boolean;
                    export { many_1893 as many };
                    const inverse_1893: boolean;
                    export { inverse_1893 as inverse };
                }
                export { wrappedValue_12 as wrappedValue };
            }
            export { fields_665 as fields };
        }
        namespace IfcDoseEquivalentMeasure {
            const domain_666: string;
            export { domain_666 as domain };
            const superclasses_666: string[];
            export { superclasses_666 as superclasses };
            export namespace fields_666 {
                export namespace wrappedValue_13 {
                    const type_1894: string;
                    export { type_1894 as type };
                    const reference_1894: boolean;
                    export { reference_1894 as reference };
                    const many_1894: boolean;
                    export { many_1894 as many };
                    const inverse_1894: boolean;
                    export { inverse_1894 as inverse };
                }
                export { wrappedValue_13 as wrappedValue };
                export namespace wrappedValueAsString_8 {
                    const type_1895: string;
                    export { type_1895 as type };
                    const reference_1895: boolean;
                    export { reference_1895 as reference };
                    const many_1895: boolean;
                    export { many_1895 as many };
                    const inverse_1895: boolean;
                    export { inverse_1895 as inverse };
                }
                export { wrappedValueAsString_8 as wrappedValueAsString };
            }
            export { fields_666 as fields };
        }
        namespace IfcDynamicViscosityMeasure {
            const domain_667: string;
            export { domain_667 as domain };
            const superclasses_667: string[];
            export { superclasses_667 as superclasses };
            export namespace fields_667 {
                export namespace wrappedValue_14 {
                    const type_1896: string;
                    export { type_1896 as type };
                    const reference_1896: boolean;
                    export { reference_1896 as reference };
                    const many_1896: boolean;
                    export { many_1896 as many };
                    const inverse_1896: boolean;
                    export { inverse_1896 as inverse };
                }
                export { wrappedValue_14 as wrappedValue };
                export namespace wrappedValueAsString_9 {
                    const type_1897: string;
                    export { type_1897 as type };
                    const reference_1897: boolean;
                    export { reference_1897 as reference };
                    const many_1897: boolean;
                    export { many_1897 as many };
                    const inverse_1897: boolean;
                    export { inverse_1897 as inverse };
                }
                export { wrappedValueAsString_9 as wrappedValueAsString };
            }
            export { fields_667 as fields };
        }
        namespace IfcElectricCapacitanceMeasure {
            const domain_668: string;
            export { domain_668 as domain };
            const superclasses_668: string[];
            export { superclasses_668 as superclasses };
            export namespace fields_668 {
                export namespace wrappedValue_15 {
                    const type_1898: string;
                    export { type_1898 as type };
                    const reference_1898: boolean;
                    export { reference_1898 as reference };
                    const many_1898: boolean;
                    export { many_1898 as many };
                    const inverse_1898: boolean;
                    export { inverse_1898 as inverse };
                }
                export { wrappedValue_15 as wrappedValue };
                export namespace wrappedValueAsString_10 {
                    const type_1899: string;
                    export { type_1899 as type };
                    const reference_1899: boolean;
                    export { reference_1899 as reference };
                    const many_1899: boolean;
                    export { many_1899 as many };
                    const inverse_1899: boolean;
                    export { inverse_1899 as inverse };
                }
                export { wrappedValueAsString_10 as wrappedValueAsString };
            }
            export { fields_668 as fields };
        }
        namespace IfcElectricChargeMeasure {
            const domain_669: string;
            export { domain_669 as domain };
            const superclasses_669: string[];
            export { superclasses_669 as superclasses };
            export namespace fields_669 {
                export namespace wrappedValue_16 {
                    const type_1900: string;
                    export { type_1900 as type };
                    const reference_1900: boolean;
                    export { reference_1900 as reference };
                    const many_1900: boolean;
                    export { many_1900 as many };
                    const inverse_1900: boolean;
                    export { inverse_1900 as inverse };
                }
                export { wrappedValue_16 as wrappedValue };
                export namespace wrappedValueAsString_11 {
                    const type_1901: string;
                    export { type_1901 as type };
                    const reference_1901: boolean;
                    export { reference_1901 as reference };
                    const many_1901: boolean;
                    export { many_1901 as many };
                    const inverse_1901: boolean;
                    export { inverse_1901 as inverse };
                }
                export { wrappedValueAsString_11 as wrappedValueAsString };
            }
            export { fields_669 as fields };
        }
        namespace IfcElectricConductanceMeasure {
            const domain_670: string;
            export { domain_670 as domain };
            const superclasses_670: string[];
            export { superclasses_670 as superclasses };
            export namespace fields_670 {
                export namespace wrappedValue_17 {
                    const type_1902: string;
                    export { type_1902 as type };
                    const reference_1902: boolean;
                    export { reference_1902 as reference };
                    const many_1902: boolean;
                    export { many_1902 as many };
                    const inverse_1902: boolean;
                    export { inverse_1902 as inverse };
                }
                export { wrappedValue_17 as wrappedValue };
                export namespace wrappedValueAsString_12 {
                    const type_1903: string;
                    export { type_1903 as type };
                    const reference_1903: boolean;
                    export { reference_1903 as reference };
                    const many_1903: boolean;
                    export { many_1903 as many };
                    const inverse_1903: boolean;
                    export { inverse_1903 as inverse };
                }
                export { wrappedValueAsString_12 as wrappedValueAsString };
            }
            export { fields_670 as fields };
        }
        namespace IfcElectricCurrentMeasure {
            const domain_671: string;
            export { domain_671 as domain };
            const superclasses_671: string[];
            export { superclasses_671 as superclasses };
            export namespace fields_671 {
                export namespace wrappedValue_18 {
                    const type_1904: string;
                    export { type_1904 as type };
                    const reference_1904: boolean;
                    export { reference_1904 as reference };
                    const many_1904: boolean;
                    export { many_1904 as many };
                    const inverse_1904: boolean;
                    export { inverse_1904 as inverse };
                }
                export { wrappedValue_18 as wrappedValue };
                export namespace wrappedValueAsString_13 {
                    const type_1905: string;
                    export { type_1905 as type };
                    const reference_1905: boolean;
                    export { reference_1905 as reference };
                    const many_1905: boolean;
                    export { many_1905 as many };
                    const inverse_1905: boolean;
                    export { inverse_1905 as inverse };
                }
                export { wrappedValueAsString_13 as wrappedValueAsString };
            }
            export { fields_671 as fields };
        }
        namespace IfcElectricResistanceMeasure {
            const domain_672: string;
            export { domain_672 as domain };
            const superclasses_672: string[];
            export { superclasses_672 as superclasses };
            export namespace fields_672 {
                export namespace wrappedValue_19 {
                    const type_1906: string;
                    export { type_1906 as type };
                    const reference_1906: boolean;
                    export { reference_1906 as reference };
                    const many_1906: boolean;
                    export { many_1906 as many };
                    const inverse_1906: boolean;
                    export { inverse_1906 as inverse };
                }
                export { wrappedValue_19 as wrappedValue };
                export namespace wrappedValueAsString_14 {
                    const type_1907: string;
                    export { type_1907 as type };
                    const reference_1907: boolean;
                    export { reference_1907 as reference };
                    const many_1907: boolean;
                    export { many_1907 as many };
                    const inverse_1907: boolean;
                    export { inverse_1907 as inverse };
                }
                export { wrappedValueAsString_14 as wrappedValueAsString };
            }
            export { fields_672 as fields };
        }
        namespace IfcElectricVoltageMeasure {
            const domain_673: string;
            export { domain_673 as domain };
            const superclasses_673: string[];
            export { superclasses_673 as superclasses };
            export namespace fields_673 {
                export namespace wrappedValue_20 {
                    const type_1908: string;
                    export { type_1908 as type };
                    const reference_1908: boolean;
                    export { reference_1908 as reference };
                    const many_1908: boolean;
                    export { many_1908 as many };
                    const inverse_1908: boolean;
                    export { inverse_1908 as inverse };
                }
                export { wrappedValue_20 as wrappedValue };
                export namespace wrappedValueAsString_15 {
                    const type_1909: string;
                    export { type_1909 as type };
                    const reference_1909: boolean;
                    export { reference_1909 as reference };
                    const many_1909: boolean;
                    export { many_1909 as many };
                    const inverse_1909: boolean;
                    export { inverse_1909 as inverse };
                }
                export { wrappedValueAsString_15 as wrappedValueAsString };
            }
            export { fields_673 as fields };
        }
        namespace IfcEnergyMeasure {
            const domain_674: string;
            export { domain_674 as domain };
            const superclasses_674: string[];
            export { superclasses_674 as superclasses };
            export namespace fields_674 {
                export namespace wrappedValue_21 {
                    const type_1910: string;
                    export { type_1910 as type };
                    const reference_1910: boolean;
                    export { reference_1910 as reference };
                    const many_1910: boolean;
                    export { many_1910 as many };
                    const inverse_1910: boolean;
                    export { inverse_1910 as inverse };
                }
                export { wrappedValue_21 as wrappedValue };
                export namespace wrappedValueAsString_16 {
                    const type_1911: string;
                    export { type_1911 as type };
                    const reference_1911: boolean;
                    export { reference_1911 as reference };
                    const many_1911: boolean;
                    export { many_1911 as many };
                    const inverse_1911: boolean;
                    export { inverse_1911 as inverse };
                }
                export { wrappedValueAsString_16 as wrappedValueAsString };
            }
            export { fields_674 as fields };
        }
        namespace IfcFontStyle {
            const domain_675: string;
            export { domain_675 as domain };
            const superclasses_675: any[];
            export { superclasses_675 as superclasses };
            export namespace fields_675 {
                export namespace wrappedValue_22 {
                    const type_1912: string;
                    export { type_1912 as type };
                    const reference_1912: boolean;
                    export { reference_1912 as reference };
                    const many_1912: boolean;
                    export { many_1912 as many };
                    const inverse_1912: boolean;
                    export { inverse_1912 as inverse };
                }
                export { wrappedValue_22 as wrappedValue };
            }
            export { fields_675 as fields };
        }
        namespace IfcFontVariant {
            const domain_676: string;
            export { domain_676 as domain };
            const superclasses_676: any[];
            export { superclasses_676 as superclasses };
            export namespace fields_676 {
                export namespace wrappedValue_23 {
                    const type_1913: string;
                    export { type_1913 as type };
                    const reference_1913: boolean;
                    export { reference_1913 as reference };
                    const many_1913: boolean;
                    export { many_1913 as many };
                    const inverse_1913: boolean;
                    export { inverse_1913 as inverse };
                }
                export { wrappedValue_23 as wrappedValue };
            }
            export { fields_676 as fields };
        }
        namespace IfcFontWeight {
            const domain_677: string;
            export { domain_677 as domain };
            const superclasses_677: any[];
            export { superclasses_677 as superclasses };
            export namespace fields_677 {
                export namespace wrappedValue_24 {
                    const type_1914: string;
                    export { type_1914 as type };
                    const reference_1914: boolean;
                    export { reference_1914 as reference };
                    const many_1914: boolean;
                    export { many_1914 as many };
                    const inverse_1914: boolean;
                    export { inverse_1914 as inverse };
                }
                export { wrappedValue_24 as wrappedValue };
            }
            export { fields_677 as fields };
        }
        namespace IfcForceMeasure {
            const domain_678: string;
            export { domain_678 as domain };
            const superclasses_678: string[];
            export { superclasses_678 as superclasses };
            export namespace fields_678 {
                export namespace wrappedValue_25 {
                    const type_1915: string;
                    export { type_1915 as type };
                    const reference_1915: boolean;
                    export { reference_1915 as reference };
                    const many_1915: boolean;
                    export { many_1915 as many };
                    const inverse_1915: boolean;
                    export { inverse_1915 as inverse };
                }
                export { wrappedValue_25 as wrappedValue };
                export namespace wrappedValueAsString_17 {
                    const type_1916: string;
                    export { type_1916 as type };
                    const reference_1916: boolean;
                    export { reference_1916 as reference };
                    const many_1916: boolean;
                    export { many_1916 as many };
                    const inverse_1916: boolean;
                    export { inverse_1916 as inverse };
                }
                export { wrappedValueAsString_17 as wrappedValueAsString };
            }
            export { fields_678 as fields };
        }
        namespace IfcFrequencyMeasure {
            const domain_679: string;
            export { domain_679 as domain };
            const superclasses_679: string[];
            export { superclasses_679 as superclasses };
            export namespace fields_679 {
                export namespace wrappedValue_26 {
                    const type_1917: string;
                    export { type_1917 as type };
                    const reference_1917: boolean;
                    export { reference_1917 as reference };
                    const many_1917: boolean;
                    export { many_1917 as many };
                    const inverse_1917: boolean;
                    export { inverse_1917 as inverse };
                }
                export { wrappedValue_26 as wrappedValue };
                export namespace wrappedValueAsString_18 {
                    const type_1918: string;
                    export { type_1918 as type };
                    const reference_1918: boolean;
                    export { reference_1918 as reference };
                    const many_1918: boolean;
                    export { many_1918 as many };
                    const inverse_1918: boolean;
                    export { inverse_1918 as inverse };
                }
                export { wrappedValueAsString_18 as wrappedValueAsString };
            }
            export { fields_679 as fields };
        }
        namespace IfcGloballyUniqueId {
            const domain_680: string;
            export { domain_680 as domain };
            const superclasses_680: any[];
            export { superclasses_680 as superclasses };
            export namespace fields_680 {
                export namespace wrappedValue_27 {
                    const type_1919: string;
                    export { type_1919 as type };
                    const reference_1919: boolean;
                    export { reference_1919 as reference };
                    const many_1919: boolean;
                    export { many_1919 as many };
                    const inverse_1919: boolean;
                    export { inverse_1919 as inverse };
                }
                export { wrappedValue_27 as wrappedValue };
            }
            export { fields_680 as fields };
        }
        namespace IfcHeatFluxDensityMeasure {
            const domain_681: string;
            export { domain_681 as domain };
            const superclasses_681: string[];
            export { superclasses_681 as superclasses };
            export namespace fields_681 {
                export namespace wrappedValue_28 {
                    const type_1920: string;
                    export { type_1920 as type };
                    const reference_1920: boolean;
                    export { reference_1920 as reference };
                    const many_1920: boolean;
                    export { many_1920 as many };
                    const inverse_1920: boolean;
                    export { inverse_1920 as inverse };
                }
                export { wrappedValue_28 as wrappedValue };
                export namespace wrappedValueAsString_19 {
                    const type_1921: string;
                    export { type_1921 as type };
                    const reference_1921: boolean;
                    export { reference_1921 as reference };
                    const many_1921: boolean;
                    export { many_1921 as many };
                    const inverse_1921: boolean;
                    export { inverse_1921 as inverse };
                }
                export { wrappedValueAsString_19 as wrappedValueAsString };
            }
            export { fields_681 as fields };
        }
        namespace IfcHeatingValueMeasure {
            const domain_682: string;
            export { domain_682 as domain };
            const superclasses_682: string[];
            export { superclasses_682 as superclasses };
            export namespace fields_682 {
                export namespace wrappedValue_29 {
                    const type_1922: string;
                    export { type_1922 as type };
                    const reference_1922: boolean;
                    export { reference_1922 as reference };
                    const many_1922: boolean;
                    export { many_1922 as many };
                    const inverse_1922: boolean;
                    export { inverse_1922 as inverse };
                }
                export { wrappedValue_29 as wrappedValue };
                export namespace wrappedValueAsString_20 {
                    const type_1923: string;
                    export { type_1923 as type };
                    const reference_1923: boolean;
                    export { reference_1923 as reference };
                    const many_1923: boolean;
                    export { many_1923 as many };
                    const inverse_1923: boolean;
                    export { inverse_1923 as inverse };
                }
                export { wrappedValueAsString_20 as wrappedValueAsString };
            }
            export { fields_682 as fields };
        }
        namespace IfcHourInDay {
            const domain_683: string;
            export { domain_683 as domain };
            const superclasses_683: any[];
            export { superclasses_683 as superclasses };
            export namespace fields_683 {
                export namespace wrappedValue_30 {
                    const type_1924: string;
                    export { type_1924 as type };
                    const reference_1924: boolean;
                    export { reference_1924 as reference };
                    const many_1924: boolean;
                    export { many_1924 as many };
                    const inverse_1924: boolean;
                    export { inverse_1924 as inverse };
                }
                export { wrappedValue_30 as wrappedValue };
            }
            export { fields_683 as fields };
        }
        namespace IfcIdentifier {
            const domain_684: string;
            export { domain_684 as domain };
            const superclasses_684: string[];
            export { superclasses_684 as superclasses };
            export namespace fields_684 {
                export namespace wrappedValue_31 {
                    const type_1925: string;
                    export { type_1925 as type };
                    const reference_1925: boolean;
                    export { reference_1925 as reference };
                    const many_1925: boolean;
                    export { many_1925 as many };
                    const inverse_1925: boolean;
                    export { inverse_1925 as inverse };
                }
                export { wrappedValue_31 as wrappedValue };
            }
            export { fields_684 as fields };
        }
        namespace IfcIlluminanceMeasure {
            const domain_685: string;
            export { domain_685 as domain };
            const superclasses_685: string[];
            export { superclasses_685 as superclasses };
            export namespace fields_685 {
                export namespace wrappedValue_32 {
                    const type_1926: string;
                    export { type_1926 as type };
                    const reference_1926: boolean;
                    export { reference_1926 as reference };
                    const many_1926: boolean;
                    export { many_1926 as many };
                    const inverse_1926: boolean;
                    export { inverse_1926 as inverse };
                }
                export { wrappedValue_32 as wrappedValue };
                export namespace wrappedValueAsString_21 {
                    const type_1927: string;
                    export { type_1927 as type };
                    const reference_1927: boolean;
                    export { reference_1927 as reference };
                    const many_1927: boolean;
                    export { many_1927 as many };
                    const inverse_1927: boolean;
                    export { inverse_1927 as inverse };
                }
                export { wrappedValueAsString_21 as wrappedValueAsString };
            }
            export { fields_685 as fields };
        }
        namespace IfcInductanceMeasure {
            const domain_686: string;
            export { domain_686 as domain };
            const superclasses_686: string[];
            export { superclasses_686 as superclasses };
            export namespace fields_686 {
                export namespace wrappedValue_33 {
                    const type_1928: string;
                    export { type_1928 as type };
                    const reference_1928: boolean;
                    export { reference_1928 as reference };
                    const many_1928: boolean;
                    export { many_1928 as many };
                    const inverse_1928: boolean;
                    export { inverse_1928 as inverse };
                }
                export { wrappedValue_33 as wrappedValue };
                export namespace wrappedValueAsString_22 {
                    const type_1929: string;
                    export { type_1929 as type };
                    const reference_1929: boolean;
                    export { reference_1929 as reference };
                    const many_1929: boolean;
                    export { many_1929 as many };
                    const inverse_1929: boolean;
                    export { inverse_1929 as inverse };
                }
                export { wrappedValueAsString_22 as wrappedValueAsString };
            }
            export { fields_686 as fields };
        }
        namespace IfcInteger {
            const domain_687: string;
            export { domain_687 as domain };
            const superclasses_687: string[];
            export { superclasses_687 as superclasses };
            export namespace fields_687 {
                export namespace wrappedValue_34 {
                    const type_1930: string;
                    export { type_1930 as type };
                    const reference_1930: boolean;
                    export { reference_1930 as reference };
                    const many_1930: boolean;
                    export { many_1930 as many };
                    const inverse_1930: boolean;
                    export { inverse_1930 as inverse };
                }
                export { wrappedValue_34 as wrappedValue };
            }
            export { fields_687 as fields };
        }
        namespace IfcIntegerCountRateMeasure {
            const domain_688: string;
            export { domain_688 as domain };
            const superclasses_688: string[];
            export { superclasses_688 as superclasses };
            export namespace fields_688 {
                export namespace wrappedValue_35 {
                    const type_1931: string;
                    export { type_1931 as type };
                    const reference_1931: boolean;
                    export { reference_1931 as reference };
                    const many_1931: boolean;
                    export { many_1931 as many };
                    const inverse_1931: boolean;
                    export { inverse_1931 as inverse };
                }
                export { wrappedValue_35 as wrappedValue };
            }
            export { fields_688 as fields };
        }
        namespace IfcIonConcentrationMeasure {
            const domain_689: string;
            export { domain_689 as domain };
            const superclasses_689: string[];
            export { superclasses_689 as superclasses };
            export namespace fields_689 {
                export namespace wrappedValue_36 {
                    const type_1932: string;
                    export { type_1932 as type };
                    const reference_1932: boolean;
                    export { reference_1932 as reference };
                    const many_1932: boolean;
                    export { many_1932 as many };
                    const inverse_1932: boolean;
                    export { inverse_1932 as inverse };
                }
                export { wrappedValue_36 as wrappedValue };
                export namespace wrappedValueAsString_23 {
                    const type_1933: string;
                    export { type_1933 as type };
                    const reference_1933: boolean;
                    export { reference_1933 as reference };
                    const many_1933: boolean;
                    export { many_1933 as many };
                    const inverse_1933: boolean;
                    export { inverse_1933 as inverse };
                }
                export { wrappedValueAsString_23 as wrappedValueAsString };
            }
            export { fields_689 as fields };
        }
        namespace IfcIsothermalMoistureCapacityMeasure {
            const domain_690: string;
            export { domain_690 as domain };
            const superclasses_690: string[];
            export { superclasses_690 as superclasses };
            export namespace fields_690 {
                export namespace wrappedValue_37 {
                    const type_1934: string;
                    export { type_1934 as type };
                    const reference_1934: boolean;
                    export { reference_1934 as reference };
                    const many_1934: boolean;
                    export { many_1934 as many };
                    const inverse_1934: boolean;
                    export { inverse_1934 as inverse };
                }
                export { wrappedValue_37 as wrappedValue };
                export namespace wrappedValueAsString_24 {
                    const type_1935: string;
                    export { type_1935 as type };
                    const reference_1935: boolean;
                    export { reference_1935 as reference };
                    const many_1935: boolean;
                    export { many_1935 as many };
                    const inverse_1935: boolean;
                    export { inverse_1935 as inverse };
                }
                export { wrappedValueAsString_24 as wrappedValueAsString };
            }
            export { fields_690 as fields };
        }
        namespace IfcKinematicViscosityMeasure {
            const domain_691: string;
            export { domain_691 as domain };
            const superclasses_691: string[];
            export { superclasses_691 as superclasses };
            export namespace fields_691 {
                export namespace wrappedValue_38 {
                    const type_1936: string;
                    export { type_1936 as type };
                    const reference_1936: boolean;
                    export { reference_1936 as reference };
                    const many_1936: boolean;
                    export { many_1936 as many };
                    const inverse_1936: boolean;
                    export { inverse_1936 as inverse };
                }
                export { wrappedValue_38 as wrappedValue };
                export namespace wrappedValueAsString_25 {
                    const type_1937: string;
                    export { type_1937 as type };
                    const reference_1937: boolean;
                    export { reference_1937 as reference };
                    const many_1937: boolean;
                    export { many_1937 as many };
                    const inverse_1937: boolean;
                    export { inverse_1937 as inverse };
                }
                export { wrappedValueAsString_25 as wrappedValueAsString };
            }
            export { fields_691 as fields };
        }
        namespace IfcLabel {
            const domain_692: string;
            export { domain_692 as domain };
            const superclasses_692: string[];
            export { superclasses_692 as superclasses };
            export namespace fields_692 {
                export namespace wrappedValue_39 {
                    const type_1938: string;
                    export { type_1938 as type };
                    const reference_1938: boolean;
                    export { reference_1938 as reference };
                    const many_1938: boolean;
                    export { many_1938 as many };
                    const inverse_1938: boolean;
                    export { inverse_1938 as inverse };
                }
                export { wrappedValue_39 as wrappedValue };
            }
            export { fields_692 as fields };
        }
        namespace IfcLengthMeasure {
            const domain_693: string;
            export { domain_693 as domain };
            const superclasses_693: string[];
            export { superclasses_693 as superclasses };
            export namespace fields_693 {
                export namespace wrappedValue_40 {
                    const type_1939: string;
                    export { type_1939 as type };
                    const reference_1939: boolean;
                    export { reference_1939 as reference };
                    const many_1939: boolean;
                    export { many_1939 as many };
                    const inverse_1939: boolean;
                    export { inverse_1939 as inverse };
                }
                export { wrappedValue_40 as wrappedValue };
                export namespace wrappedValueAsString_26 {
                    const type_1940: string;
                    export { type_1940 as type };
                    const reference_1940: boolean;
                    export { reference_1940 as reference };
                    const many_1940: boolean;
                    export { many_1940 as many };
                    const inverse_1940: boolean;
                    export { inverse_1940 as inverse };
                }
                export { wrappedValueAsString_26 as wrappedValueAsString };
            }
            export { fields_693 as fields };
        }
        namespace IfcLinearForceMeasure {
            const domain_694: string;
            export { domain_694 as domain };
            const superclasses_694: string[];
            export { superclasses_694 as superclasses };
            export namespace fields_694 {
                export namespace wrappedValue_41 {
                    const type_1941: string;
                    export { type_1941 as type };
                    const reference_1941: boolean;
                    export { reference_1941 as reference };
                    const many_1941: boolean;
                    export { many_1941 as many };
                    const inverse_1941: boolean;
                    export { inverse_1941 as inverse };
                }
                export { wrappedValue_41 as wrappedValue };
                export namespace wrappedValueAsString_27 {
                    const type_1942: string;
                    export { type_1942 as type };
                    const reference_1942: boolean;
                    export { reference_1942 as reference };
                    const many_1942: boolean;
                    export { many_1942 as many };
                    const inverse_1942: boolean;
                    export { inverse_1942 as inverse };
                }
                export { wrappedValueAsString_27 as wrappedValueAsString };
            }
            export { fields_694 as fields };
        }
        namespace IfcLinearMomentMeasure {
            const domain_695: string;
            export { domain_695 as domain };
            const superclasses_695: string[];
            export { superclasses_695 as superclasses };
            export namespace fields_695 {
                export namespace wrappedValue_42 {
                    const type_1943: string;
                    export { type_1943 as type };
                    const reference_1943: boolean;
                    export { reference_1943 as reference };
                    const many_1943: boolean;
                    export { many_1943 as many };
                    const inverse_1943: boolean;
                    export { inverse_1943 as inverse };
                }
                export { wrappedValue_42 as wrappedValue };
                export namespace wrappedValueAsString_28 {
                    const type_1944: string;
                    export { type_1944 as type };
                    const reference_1944: boolean;
                    export { reference_1944 as reference };
                    const many_1944: boolean;
                    export { many_1944 as many };
                    const inverse_1944: boolean;
                    export { inverse_1944 as inverse };
                }
                export { wrappedValueAsString_28 as wrappedValueAsString };
            }
            export { fields_695 as fields };
        }
        namespace IfcLinearStiffnessMeasure {
            const domain_696: string;
            export { domain_696 as domain };
            const superclasses_696: string[];
            export { superclasses_696 as superclasses };
            export namespace fields_696 {
                export namespace wrappedValue_43 {
                    const type_1945: string;
                    export { type_1945 as type };
                    const reference_1945: boolean;
                    export { reference_1945 as reference };
                    const many_1945: boolean;
                    export { many_1945 as many };
                    const inverse_1945: boolean;
                    export { inverse_1945 as inverse };
                }
                export { wrappedValue_43 as wrappedValue };
                export namespace wrappedValueAsString_29 {
                    const type_1946: string;
                    export { type_1946 as type };
                    const reference_1946: boolean;
                    export { reference_1946 as reference };
                    const many_1946: boolean;
                    export { many_1946 as many };
                    const inverse_1946: boolean;
                    export { inverse_1946 as inverse };
                }
                export { wrappedValueAsString_29 as wrappedValueAsString };
            }
            export { fields_696 as fields };
        }
        namespace IfcLinearVelocityMeasure {
            const domain_697: string;
            export { domain_697 as domain };
            const superclasses_697: string[];
            export { superclasses_697 as superclasses };
            export namespace fields_697 {
                export namespace wrappedValue_44 {
                    const type_1947: string;
                    export { type_1947 as type };
                    const reference_1947: boolean;
                    export { reference_1947 as reference };
                    const many_1947: boolean;
                    export { many_1947 as many };
                    const inverse_1947: boolean;
                    export { inverse_1947 as inverse };
                }
                export { wrappedValue_44 as wrappedValue };
                export namespace wrappedValueAsString_30 {
                    const type_1948: string;
                    export { type_1948 as type };
                    const reference_1948: boolean;
                    export { reference_1948 as reference };
                    const many_1948: boolean;
                    export { many_1948 as many };
                    const inverse_1948: boolean;
                    export { inverse_1948 as inverse };
                }
                export { wrappedValueAsString_30 as wrappedValueAsString };
            }
            export { fields_697 as fields };
        }
        namespace IfcLogical {
            const domain_698: string;
            export { domain_698 as domain };
            const superclasses_698: string[];
            export { superclasses_698 as superclasses };
            export namespace fields_698 {
                export namespace wrappedValue_45 {
                    const type_1949: string;
                    export { type_1949 as type };
                    const reference_1949: boolean;
                    export { reference_1949 as reference };
                    const many_1949: boolean;
                    export { many_1949 as many };
                    const inverse_1949: boolean;
                    export { inverse_1949 as inverse };
                }
                export { wrappedValue_45 as wrappedValue };
            }
            export { fields_698 as fields };
        }
        namespace IfcLuminousFluxMeasure {
            const domain_699: string;
            export { domain_699 as domain };
            const superclasses_699: string[];
            export { superclasses_699 as superclasses };
            export namespace fields_699 {
                export namespace wrappedValue_46 {
                    const type_1950: string;
                    export { type_1950 as type };
                    const reference_1950: boolean;
                    export { reference_1950 as reference };
                    const many_1950: boolean;
                    export { many_1950 as many };
                    const inverse_1950: boolean;
                    export { inverse_1950 as inverse };
                }
                export { wrappedValue_46 as wrappedValue };
                export namespace wrappedValueAsString_31 {
                    const type_1951: string;
                    export { type_1951 as type };
                    const reference_1951: boolean;
                    export { reference_1951 as reference };
                    const many_1951: boolean;
                    export { many_1951 as many };
                    const inverse_1951: boolean;
                    export { inverse_1951 as inverse };
                }
                export { wrappedValueAsString_31 as wrappedValueAsString };
            }
            export { fields_699 as fields };
        }
        namespace IfcLuminousIntensityDistributionMeasure {
            const domain_700: string;
            export { domain_700 as domain };
            const superclasses_700: string[];
            export { superclasses_700 as superclasses };
            export namespace fields_700 {
                export namespace wrappedValue_47 {
                    const type_1952: string;
                    export { type_1952 as type };
                    const reference_1952: boolean;
                    export { reference_1952 as reference };
                    const many_1952: boolean;
                    export { many_1952 as many };
                    const inverse_1952: boolean;
                    export { inverse_1952 as inverse };
                }
                export { wrappedValue_47 as wrappedValue };
                export namespace wrappedValueAsString_32 {
                    const type_1953: string;
                    export { type_1953 as type };
                    const reference_1953: boolean;
                    export { reference_1953 as reference };
                    const many_1953: boolean;
                    export { many_1953 as many };
                    const inverse_1953: boolean;
                    export { inverse_1953 as inverse };
                }
                export { wrappedValueAsString_32 as wrappedValueAsString };
            }
            export { fields_700 as fields };
        }
        namespace IfcLuminousIntensityMeasure {
            const domain_701: string;
            export { domain_701 as domain };
            const superclasses_701: string[];
            export { superclasses_701 as superclasses };
            export namespace fields_701 {
                export namespace wrappedValue_48 {
                    const type_1954: string;
                    export { type_1954 as type };
                    const reference_1954: boolean;
                    export { reference_1954 as reference };
                    const many_1954: boolean;
                    export { many_1954 as many };
                    const inverse_1954: boolean;
                    export { inverse_1954 as inverse };
                }
                export { wrappedValue_48 as wrappedValue };
                export namespace wrappedValueAsString_33 {
                    const type_1955: string;
                    export { type_1955 as type };
                    const reference_1955: boolean;
                    export { reference_1955 as reference };
                    const many_1955: boolean;
                    export { many_1955 as many };
                    const inverse_1955: boolean;
                    export { inverse_1955 as inverse };
                }
                export { wrappedValueAsString_33 as wrappedValueAsString };
            }
            export { fields_701 as fields };
        }
        namespace IfcMagneticFluxDensityMeasure {
            const domain_702: string;
            export { domain_702 as domain };
            const superclasses_702: string[];
            export { superclasses_702 as superclasses };
            export namespace fields_702 {
                export namespace wrappedValue_49 {
                    const type_1956: string;
                    export { type_1956 as type };
                    const reference_1956: boolean;
                    export { reference_1956 as reference };
                    const many_1956: boolean;
                    export { many_1956 as many };
                    const inverse_1956: boolean;
                    export { inverse_1956 as inverse };
                }
                export { wrappedValue_49 as wrappedValue };
                export namespace wrappedValueAsString_34 {
                    const type_1957: string;
                    export { type_1957 as type };
                    const reference_1957: boolean;
                    export { reference_1957 as reference };
                    const many_1957: boolean;
                    export { many_1957 as many };
                    const inverse_1957: boolean;
                    export { inverse_1957 as inverse };
                }
                export { wrappedValueAsString_34 as wrappedValueAsString };
            }
            export { fields_702 as fields };
        }
        namespace IfcMagneticFluxMeasure {
            const domain_703: string;
            export { domain_703 as domain };
            const superclasses_703: string[];
            export { superclasses_703 as superclasses };
            export namespace fields_703 {
                export namespace wrappedValue_50 {
                    const type_1958: string;
                    export { type_1958 as type };
                    const reference_1958: boolean;
                    export { reference_1958 as reference };
                    const many_1958: boolean;
                    export { many_1958 as many };
                    const inverse_1958: boolean;
                    export { inverse_1958 as inverse };
                }
                export { wrappedValue_50 as wrappedValue };
                export namespace wrappedValueAsString_35 {
                    const type_1959: string;
                    export { type_1959 as type };
                    const reference_1959: boolean;
                    export { reference_1959 as reference };
                    const many_1959: boolean;
                    export { many_1959 as many };
                    const inverse_1959: boolean;
                    export { inverse_1959 as inverse };
                }
                export { wrappedValueAsString_35 as wrappedValueAsString };
            }
            export { fields_703 as fields };
        }
        namespace IfcMassDensityMeasure {
            const domain_704: string;
            export { domain_704 as domain };
            const superclasses_704: string[];
            export { superclasses_704 as superclasses };
            export namespace fields_704 {
                export namespace wrappedValue_51 {
                    const type_1960: string;
                    export { type_1960 as type };
                    const reference_1960: boolean;
                    export { reference_1960 as reference };
                    const many_1960: boolean;
                    export { many_1960 as many };
                    const inverse_1960: boolean;
                    export { inverse_1960 as inverse };
                }
                export { wrappedValue_51 as wrappedValue };
                export namespace wrappedValueAsString_36 {
                    const type_1961: string;
                    export { type_1961 as type };
                    const reference_1961: boolean;
                    export { reference_1961 as reference };
                    const many_1961: boolean;
                    export { many_1961 as many };
                    const inverse_1961: boolean;
                    export { inverse_1961 as inverse };
                }
                export { wrappedValueAsString_36 as wrappedValueAsString };
            }
            export { fields_704 as fields };
        }
        namespace IfcMassFlowRateMeasure {
            const domain_705: string;
            export { domain_705 as domain };
            const superclasses_705: string[];
            export { superclasses_705 as superclasses };
            export namespace fields_705 {
                export namespace wrappedValue_52 {
                    const type_1962: string;
                    export { type_1962 as type };
                    const reference_1962: boolean;
                    export { reference_1962 as reference };
                    const many_1962: boolean;
                    export { many_1962 as many };
                    const inverse_1962: boolean;
                    export { inverse_1962 as inverse };
                }
                export { wrappedValue_52 as wrappedValue };
                export namespace wrappedValueAsString_37 {
                    const type_1963: string;
                    export { type_1963 as type };
                    const reference_1963: boolean;
                    export { reference_1963 as reference };
                    const many_1963: boolean;
                    export { many_1963 as many };
                    const inverse_1963: boolean;
                    export { inverse_1963 as inverse };
                }
                export { wrappedValueAsString_37 as wrappedValueAsString };
            }
            export { fields_705 as fields };
        }
        namespace IfcMassMeasure {
            const domain_706: string;
            export { domain_706 as domain };
            const superclasses_706: string[];
            export { superclasses_706 as superclasses };
            export namespace fields_706 {
                export namespace wrappedValue_53 {
                    const type_1964: string;
                    export { type_1964 as type };
                    const reference_1964: boolean;
                    export { reference_1964 as reference };
                    const many_1964: boolean;
                    export { many_1964 as many };
                    const inverse_1964: boolean;
                    export { inverse_1964 as inverse };
                }
                export { wrappedValue_53 as wrappedValue };
                export namespace wrappedValueAsString_38 {
                    const type_1965: string;
                    export { type_1965 as type };
                    const reference_1965: boolean;
                    export { reference_1965 as reference };
                    const many_1965: boolean;
                    export { many_1965 as many };
                    const inverse_1965: boolean;
                    export { inverse_1965 as inverse };
                }
                export { wrappedValueAsString_38 as wrappedValueAsString };
            }
            export { fields_706 as fields };
        }
        namespace IfcMassPerLengthMeasure {
            const domain_707: string;
            export { domain_707 as domain };
            const superclasses_707: string[];
            export { superclasses_707 as superclasses };
            export namespace fields_707 {
                export namespace wrappedValue_54 {
                    const type_1966: string;
                    export { type_1966 as type };
                    const reference_1966: boolean;
                    export { reference_1966 as reference };
                    const many_1966: boolean;
                    export { many_1966 as many };
                    const inverse_1966: boolean;
                    export { inverse_1966 as inverse };
                }
                export { wrappedValue_54 as wrappedValue };
                export namespace wrappedValueAsString_39 {
                    const type_1967: string;
                    export { type_1967 as type };
                    const reference_1967: boolean;
                    export { reference_1967 as reference };
                    const many_1967: boolean;
                    export { many_1967 as many };
                    const inverse_1967: boolean;
                    export { inverse_1967 as inverse };
                }
                export { wrappedValueAsString_39 as wrappedValueAsString };
            }
            export { fields_707 as fields };
        }
        namespace IfcMinuteInHour {
            const domain_708: string;
            export { domain_708 as domain };
            const superclasses_708: any[];
            export { superclasses_708 as superclasses };
            export namespace fields_708 {
                export namespace wrappedValue_55 {
                    const type_1968: string;
                    export { type_1968 as type };
                    const reference_1968: boolean;
                    export { reference_1968 as reference };
                    const many_1968: boolean;
                    export { many_1968 as many };
                    const inverse_1968: boolean;
                    export { inverse_1968 as inverse };
                }
                export { wrappedValue_55 as wrappedValue };
            }
            export { fields_708 as fields };
        }
        namespace IfcModulusOfElasticityMeasure {
            const domain_709: string;
            export { domain_709 as domain };
            const superclasses_709: string[];
            export { superclasses_709 as superclasses };
            export namespace fields_709 {
                export namespace wrappedValue_56 {
                    const type_1969: string;
                    export { type_1969 as type };
                    const reference_1969: boolean;
                    export { reference_1969 as reference };
                    const many_1969: boolean;
                    export { many_1969 as many };
                    const inverse_1969: boolean;
                    export { inverse_1969 as inverse };
                }
                export { wrappedValue_56 as wrappedValue };
                export namespace wrappedValueAsString_40 {
                    const type_1970: string;
                    export { type_1970 as type };
                    const reference_1970: boolean;
                    export { reference_1970 as reference };
                    const many_1970: boolean;
                    export { many_1970 as many };
                    const inverse_1970: boolean;
                    export { inverse_1970 as inverse };
                }
                export { wrappedValueAsString_40 as wrappedValueAsString };
            }
            export { fields_709 as fields };
        }
        namespace IfcModulusOfLinearSubgradeReactionMeasure {
            const domain_710: string;
            export { domain_710 as domain };
            const superclasses_710: string[];
            export { superclasses_710 as superclasses };
            export namespace fields_710 {
                export namespace wrappedValue_57 {
                    const type_1971: string;
                    export { type_1971 as type };
                    const reference_1971: boolean;
                    export { reference_1971 as reference };
                    const many_1971: boolean;
                    export { many_1971 as many };
                    const inverse_1971: boolean;
                    export { inverse_1971 as inverse };
                }
                export { wrappedValue_57 as wrappedValue };
                export namespace wrappedValueAsString_41 {
                    const type_1972: string;
                    export { type_1972 as type };
                    const reference_1972: boolean;
                    export { reference_1972 as reference };
                    const many_1972: boolean;
                    export { many_1972 as many };
                    const inverse_1972: boolean;
                    export { inverse_1972 as inverse };
                }
                export { wrappedValueAsString_41 as wrappedValueAsString };
            }
            export { fields_710 as fields };
        }
        namespace IfcModulusOfRotationalSubgradeReactionMeasure {
            const domain_711: string;
            export { domain_711 as domain };
            const superclasses_711: string[];
            export { superclasses_711 as superclasses };
            export namespace fields_711 {
                export namespace wrappedValue_58 {
                    const type_1973: string;
                    export { type_1973 as type };
                    const reference_1973: boolean;
                    export { reference_1973 as reference };
                    const many_1973: boolean;
                    export { many_1973 as many };
                    const inverse_1973: boolean;
                    export { inverse_1973 as inverse };
                }
                export { wrappedValue_58 as wrappedValue };
                export namespace wrappedValueAsString_42 {
                    const type_1974: string;
                    export { type_1974 as type };
                    const reference_1974: boolean;
                    export { reference_1974 as reference };
                    const many_1974: boolean;
                    export { many_1974 as many };
                    const inverse_1974: boolean;
                    export { inverse_1974 as inverse };
                }
                export { wrappedValueAsString_42 as wrappedValueAsString };
            }
            export { fields_711 as fields };
        }
        namespace IfcModulusOfSubgradeReactionMeasure {
            const domain_712: string;
            export { domain_712 as domain };
            const superclasses_712: string[];
            export { superclasses_712 as superclasses };
            export namespace fields_712 {
                export namespace wrappedValue_59 {
                    const type_1975: string;
                    export { type_1975 as type };
                    const reference_1975: boolean;
                    export { reference_1975 as reference };
                    const many_1975: boolean;
                    export { many_1975 as many };
                    const inverse_1975: boolean;
                    export { inverse_1975 as inverse };
                }
                export { wrappedValue_59 as wrappedValue };
                export namespace wrappedValueAsString_43 {
                    const type_1976: string;
                    export { type_1976 as type };
                    const reference_1976: boolean;
                    export { reference_1976 as reference };
                    const many_1976: boolean;
                    export { many_1976 as many };
                    const inverse_1976: boolean;
                    export { inverse_1976 as inverse };
                }
                export { wrappedValueAsString_43 as wrappedValueAsString };
            }
            export { fields_712 as fields };
        }
        namespace IfcMoistureDiffusivityMeasure {
            const domain_713: string;
            export { domain_713 as domain };
            const superclasses_713: string[];
            export { superclasses_713 as superclasses };
            export namespace fields_713 {
                export namespace wrappedValue_60 {
                    const type_1977: string;
                    export { type_1977 as type };
                    const reference_1977: boolean;
                    export { reference_1977 as reference };
                    const many_1977: boolean;
                    export { many_1977 as many };
                    const inverse_1977: boolean;
                    export { inverse_1977 as inverse };
                }
                export { wrappedValue_60 as wrappedValue };
                export namespace wrappedValueAsString_44 {
                    const type_1978: string;
                    export { type_1978 as type };
                    const reference_1978: boolean;
                    export { reference_1978 as reference };
                    const many_1978: boolean;
                    export { many_1978 as many };
                    const inverse_1978: boolean;
                    export { inverse_1978 as inverse };
                }
                export { wrappedValueAsString_44 as wrappedValueAsString };
            }
            export { fields_713 as fields };
        }
        namespace IfcMolecularWeightMeasure {
            const domain_714: string;
            export { domain_714 as domain };
            const superclasses_714: string[];
            export { superclasses_714 as superclasses };
            export namespace fields_714 {
                export namespace wrappedValue_61 {
                    const type_1979: string;
                    export { type_1979 as type };
                    const reference_1979: boolean;
                    export { reference_1979 as reference };
                    const many_1979: boolean;
                    export { many_1979 as many };
                    const inverse_1979: boolean;
                    export { inverse_1979 as inverse };
                }
                export { wrappedValue_61 as wrappedValue };
                export namespace wrappedValueAsString_45 {
                    const type_1980: string;
                    export { type_1980 as type };
                    const reference_1980: boolean;
                    export { reference_1980 as reference };
                    const many_1980: boolean;
                    export { many_1980 as many };
                    const inverse_1980: boolean;
                    export { inverse_1980 as inverse };
                }
                export { wrappedValueAsString_45 as wrappedValueAsString };
            }
            export { fields_714 as fields };
        }
        namespace IfcMomentOfInertiaMeasure {
            const domain_715: string;
            export { domain_715 as domain };
            const superclasses_715: string[];
            export { superclasses_715 as superclasses };
            export namespace fields_715 {
                export namespace wrappedValue_62 {
                    const type_1981: string;
                    export { type_1981 as type };
                    const reference_1981: boolean;
                    export { reference_1981 as reference };
                    const many_1981: boolean;
                    export { many_1981 as many };
                    const inverse_1981: boolean;
                    export { inverse_1981 as inverse };
                }
                export { wrappedValue_62 as wrappedValue };
                export namespace wrappedValueAsString_46 {
                    const type_1982: string;
                    export { type_1982 as type };
                    const reference_1982: boolean;
                    export { reference_1982 as reference };
                    const many_1982: boolean;
                    export { many_1982 as many };
                    const inverse_1982: boolean;
                    export { inverse_1982 as inverse };
                }
                export { wrappedValueAsString_46 as wrappedValueAsString };
            }
            export { fields_715 as fields };
        }
        namespace IfcMonetaryMeasure {
            const domain_716: string;
            export { domain_716 as domain };
            const superclasses_716: string[];
            export { superclasses_716 as superclasses };
            export namespace fields_716 {
                export namespace wrappedValue_63 {
                    const type_1983: string;
                    export { type_1983 as type };
                    const reference_1983: boolean;
                    export { reference_1983 as reference };
                    const many_1983: boolean;
                    export { many_1983 as many };
                    const inverse_1983: boolean;
                    export { inverse_1983 as inverse };
                }
                export { wrappedValue_63 as wrappedValue };
                export namespace wrappedValueAsString_47 {
                    const type_1984: string;
                    export { type_1984 as type };
                    const reference_1984: boolean;
                    export { reference_1984 as reference };
                    const many_1984: boolean;
                    export { many_1984 as many };
                    const inverse_1984: boolean;
                    export { inverse_1984 as inverse };
                }
                export { wrappedValueAsString_47 as wrappedValueAsString };
            }
            export { fields_716 as fields };
        }
        namespace IfcMonthInYearNumber {
            const domain_717: string;
            export { domain_717 as domain };
            const superclasses_717: any[];
            export { superclasses_717 as superclasses };
            export namespace fields_717 {
                export namespace wrappedValue_64 {
                    const type_1985: string;
                    export { type_1985 as type };
                    const reference_1985: boolean;
                    export { reference_1985 as reference };
                    const many_1985: boolean;
                    export { many_1985 as many };
                    const inverse_1985: boolean;
                    export { inverse_1985 as inverse };
                }
                export { wrappedValue_64 as wrappedValue };
            }
            export { fields_717 as fields };
        }
        namespace IfcNumericMeasure {
            const domain_718: string;
            export { domain_718 as domain };
            const superclasses_718: string[];
            export { superclasses_718 as superclasses };
            export namespace fields_718 {
                export namespace wrappedValue_65 {
                    const type_1986: string;
                    export { type_1986 as type };
                    const reference_1986: boolean;
                    export { reference_1986 as reference };
                    const many_1986: boolean;
                    export { many_1986 as many };
                    const inverse_1986: boolean;
                    export { inverse_1986 as inverse };
                }
                export { wrappedValue_65 as wrappedValue };
                export namespace wrappedValueAsString_48 {
                    const type_1987: string;
                    export { type_1987 as type };
                    const reference_1987: boolean;
                    export { reference_1987 as reference };
                    const many_1987: boolean;
                    export { many_1987 as many };
                    const inverse_1987: boolean;
                    export { inverse_1987 as inverse };
                }
                export { wrappedValueAsString_48 as wrappedValueAsString };
            }
            export { fields_718 as fields };
        }
        namespace IfcPHMeasure {
            const domain_719: string;
            export { domain_719 as domain };
            const superclasses_719: string[];
            export { superclasses_719 as superclasses };
            export namespace fields_719 {
                export namespace wrappedValue_66 {
                    const type_1988: string;
                    export { type_1988 as type };
                    const reference_1988: boolean;
                    export { reference_1988 as reference };
                    const many_1988: boolean;
                    export { many_1988 as many };
                    const inverse_1988: boolean;
                    export { inverse_1988 as inverse };
                }
                export { wrappedValue_66 as wrappedValue };
                export namespace wrappedValueAsString_49 {
                    const type_1989: string;
                    export { type_1989 as type };
                    const reference_1989: boolean;
                    export { reference_1989 as reference };
                    const many_1989: boolean;
                    export { many_1989 as many };
                    const inverse_1989: boolean;
                    export { inverse_1989 as inverse };
                }
                export { wrappedValueAsString_49 as wrappedValueAsString };
            }
            export { fields_719 as fields };
        }
        namespace IfcParameterValue {
            const domain_720: string;
            export { domain_720 as domain };
            const superclasses_720: string[];
            export { superclasses_720 as superclasses };
            export namespace fields_720 {
                export namespace wrappedValue_67 {
                    const type_1990: string;
                    export { type_1990 as type };
                    const reference_1990: boolean;
                    export { reference_1990 as reference };
                    const many_1990: boolean;
                    export { many_1990 as many };
                    const inverse_1990: boolean;
                    export { inverse_1990 as inverse };
                }
                export { wrappedValue_67 as wrappedValue };
                export namespace wrappedValueAsString_50 {
                    const type_1991: string;
                    export { type_1991 as type };
                    const reference_1991: boolean;
                    export { reference_1991 as reference };
                    const many_1991: boolean;
                    export { many_1991 as many };
                    const inverse_1991: boolean;
                    export { inverse_1991 as inverse };
                }
                export { wrappedValueAsString_50 as wrappedValueAsString };
            }
            export { fields_720 as fields };
        }
        namespace IfcPlanarForceMeasure {
            const domain_721: string;
            export { domain_721 as domain };
            const superclasses_721: string[];
            export { superclasses_721 as superclasses };
            export namespace fields_721 {
                export namespace wrappedValue_68 {
                    const type_1992: string;
                    export { type_1992 as type };
                    const reference_1992: boolean;
                    export { reference_1992 as reference };
                    const many_1992: boolean;
                    export { many_1992 as many };
                    const inverse_1992: boolean;
                    export { inverse_1992 as inverse };
                }
                export { wrappedValue_68 as wrappedValue };
                export namespace wrappedValueAsString_51 {
                    const type_1993: string;
                    export { type_1993 as type };
                    const reference_1993: boolean;
                    export { reference_1993 as reference };
                    const many_1993: boolean;
                    export { many_1993 as many };
                    const inverse_1993: boolean;
                    export { inverse_1993 as inverse };
                }
                export { wrappedValueAsString_51 as wrappedValueAsString };
            }
            export { fields_721 as fields };
        }
        namespace IfcPlaneAngleMeasure {
            const domain_722: string;
            export { domain_722 as domain };
            const superclasses_722: string[];
            export { superclasses_722 as superclasses };
            export namespace fields_722 {
                export namespace wrappedValue_69 {
                    const type_1994: string;
                    export { type_1994 as type };
                    const reference_1994: boolean;
                    export { reference_1994 as reference };
                    const many_1994: boolean;
                    export { many_1994 as many };
                    const inverse_1994: boolean;
                    export { inverse_1994 as inverse };
                }
                export { wrappedValue_69 as wrappedValue };
                export namespace wrappedValueAsString_52 {
                    const type_1995: string;
                    export { type_1995 as type };
                    const reference_1995: boolean;
                    export { reference_1995 as reference };
                    const many_1995: boolean;
                    export { many_1995 as many };
                    const inverse_1995: boolean;
                    export { inverse_1995 as inverse };
                }
                export { wrappedValueAsString_52 as wrappedValueAsString };
            }
            export { fields_722 as fields };
        }
        namespace IfcPowerMeasure {
            const domain_723: string;
            export { domain_723 as domain };
            const superclasses_723: string[];
            export { superclasses_723 as superclasses };
            export namespace fields_723 {
                export namespace wrappedValue_70 {
                    const type_1996: string;
                    export { type_1996 as type };
                    const reference_1996: boolean;
                    export { reference_1996 as reference };
                    const many_1996: boolean;
                    export { many_1996 as many };
                    const inverse_1996: boolean;
                    export { inverse_1996 as inverse };
                }
                export { wrappedValue_70 as wrappedValue };
                export namespace wrappedValueAsString_53 {
                    const type_1997: string;
                    export { type_1997 as type };
                    const reference_1997: boolean;
                    export { reference_1997 as reference };
                    const many_1997: boolean;
                    export { many_1997 as many };
                    const inverse_1997: boolean;
                    export { inverse_1997 as inverse };
                }
                export { wrappedValueAsString_53 as wrappedValueAsString };
            }
            export { fields_723 as fields };
        }
        namespace IfcPresentableText {
            const domain_724: string;
            export { domain_724 as domain };
            const superclasses_724: any[];
            export { superclasses_724 as superclasses };
            export namespace fields_724 {
                export namespace wrappedValue_71 {
                    const type_1998: string;
                    export { type_1998 as type };
                    const reference_1998: boolean;
                    export { reference_1998 as reference };
                    const many_1998: boolean;
                    export { many_1998 as many };
                    const inverse_1998: boolean;
                    export { inverse_1998 as inverse };
                }
                export { wrappedValue_71 as wrappedValue };
            }
            export { fields_724 as fields };
        }
        namespace IfcPressureMeasure {
            const domain_725: string;
            export { domain_725 as domain };
            const superclasses_725: string[];
            export { superclasses_725 as superclasses };
            export namespace fields_725 {
                export namespace wrappedValue_72 {
                    const type_1999: string;
                    export { type_1999 as type };
                    const reference_1999: boolean;
                    export { reference_1999 as reference };
                    const many_1999: boolean;
                    export { many_1999 as many };
                    const inverse_1999: boolean;
                    export { inverse_1999 as inverse };
                }
                export { wrappedValue_72 as wrappedValue };
                export namespace wrappedValueAsString_54 {
                    const type_2000: string;
                    export { type_2000 as type };
                    const reference_2000: boolean;
                    export { reference_2000 as reference };
                    const many_2000: boolean;
                    export { many_2000 as many };
                    const inverse_2000: boolean;
                    export { inverse_2000 as inverse };
                }
                export { wrappedValueAsString_54 as wrappedValueAsString };
            }
            export { fields_725 as fields };
        }
        namespace IfcRadioActivityMeasure {
            const domain_726: string;
            export { domain_726 as domain };
            const superclasses_726: string[];
            export { superclasses_726 as superclasses };
            export namespace fields_726 {
                export namespace wrappedValue_73 {
                    const type_2001: string;
                    export { type_2001 as type };
                    const reference_2001: boolean;
                    export { reference_2001 as reference };
                    const many_2001: boolean;
                    export { many_2001 as many };
                    const inverse_2001: boolean;
                    export { inverse_2001 as inverse };
                }
                export { wrappedValue_73 as wrappedValue };
                export namespace wrappedValueAsString_55 {
                    const type_2002: string;
                    export { type_2002 as type };
                    const reference_2002: boolean;
                    export { reference_2002 as reference };
                    const many_2002: boolean;
                    export { many_2002 as many };
                    const inverse_2002: boolean;
                    export { inverse_2002 as inverse };
                }
                export { wrappedValueAsString_55 as wrappedValueAsString };
            }
            export { fields_726 as fields };
        }
        namespace IfcRatioMeasure {
            const domain_727: string;
            export { domain_727 as domain };
            const superclasses_727: string[];
            export { superclasses_727 as superclasses };
            export namespace fields_727 {
                export namespace wrappedValue_74 {
                    const type_2003: string;
                    export { type_2003 as type };
                    const reference_2003: boolean;
                    export { reference_2003 as reference };
                    const many_2003: boolean;
                    export { many_2003 as many };
                    const inverse_2003: boolean;
                    export { inverse_2003 as inverse };
                }
                export { wrappedValue_74 as wrappedValue };
                export namespace wrappedValueAsString_56 {
                    const type_2004: string;
                    export { type_2004 as type };
                    const reference_2004: boolean;
                    export { reference_2004 as reference };
                    const many_2004: boolean;
                    export { many_2004 as many };
                    const inverse_2004: boolean;
                    export { inverse_2004 as inverse };
                }
                export { wrappedValueAsString_56 as wrappedValueAsString };
            }
            export { fields_727 as fields };
        }
        namespace IfcReal {
            const domain_728: string;
            export { domain_728 as domain };
            const superclasses_728: string[];
            export { superclasses_728 as superclasses };
            export namespace fields_728 {
                export namespace wrappedValue_75 {
                    const type_2005: string;
                    export { type_2005 as type };
                    const reference_2005: boolean;
                    export { reference_2005 as reference };
                    const many_2005: boolean;
                    export { many_2005 as many };
                    const inverse_2005: boolean;
                    export { inverse_2005 as inverse };
                }
                export { wrappedValue_75 as wrappedValue };
                export namespace wrappedValueAsString_57 {
                    const type_2006: string;
                    export { type_2006 as type };
                    const reference_2006: boolean;
                    export { reference_2006 as reference };
                    const many_2006: boolean;
                    export { many_2006 as many };
                    const inverse_2006: boolean;
                    export { inverse_2006 as inverse };
                }
                export { wrappedValueAsString_57 as wrappedValueAsString };
            }
            export { fields_728 as fields };
        }
        namespace IfcRotationalFrequencyMeasure {
            const domain_729: string;
            export { domain_729 as domain };
            const superclasses_729: string[];
            export { superclasses_729 as superclasses };
            export namespace fields_729 {
                export namespace wrappedValue_76 {
                    const type_2007: string;
                    export { type_2007 as type };
                    const reference_2007: boolean;
                    export { reference_2007 as reference };
                    const many_2007: boolean;
                    export { many_2007 as many };
                    const inverse_2007: boolean;
                    export { inverse_2007 as inverse };
                }
                export { wrappedValue_76 as wrappedValue };
                export namespace wrappedValueAsString_58 {
                    const type_2008: string;
                    export { type_2008 as type };
                    const reference_2008: boolean;
                    export { reference_2008 as reference };
                    const many_2008: boolean;
                    export { many_2008 as many };
                    const inverse_2008: boolean;
                    export { inverse_2008 as inverse };
                }
                export { wrappedValueAsString_58 as wrappedValueAsString };
            }
            export { fields_729 as fields };
        }
        namespace IfcRotationalMassMeasure {
            const domain_730: string;
            export { domain_730 as domain };
            const superclasses_730: string[];
            export { superclasses_730 as superclasses };
            export namespace fields_730 {
                export namespace wrappedValue_77 {
                    const type_2009: string;
                    export { type_2009 as type };
                    const reference_2009: boolean;
                    export { reference_2009 as reference };
                    const many_2009: boolean;
                    export { many_2009 as many };
                    const inverse_2009: boolean;
                    export { inverse_2009 as inverse };
                }
                export { wrappedValue_77 as wrappedValue };
                export namespace wrappedValueAsString_59 {
                    const type_2010: string;
                    export { type_2010 as type };
                    const reference_2010: boolean;
                    export { reference_2010 as reference };
                    const many_2010: boolean;
                    export { many_2010 as many };
                    const inverse_2010: boolean;
                    export { inverse_2010 as inverse };
                }
                export { wrappedValueAsString_59 as wrappedValueAsString };
            }
            export { fields_730 as fields };
        }
        namespace IfcRotationalStiffnessMeasure {
            const domain_731: string;
            export { domain_731 as domain };
            const superclasses_731: string[];
            export { superclasses_731 as superclasses };
            export namespace fields_731 {
                export namespace wrappedValue_78 {
                    const type_2011: string;
                    export { type_2011 as type };
                    const reference_2011: boolean;
                    export { reference_2011 as reference };
                    const many_2011: boolean;
                    export { many_2011 as many };
                    const inverse_2011: boolean;
                    export { inverse_2011 as inverse };
                }
                export { wrappedValue_78 as wrappedValue };
                export namespace wrappedValueAsString_60 {
                    const type_2012: string;
                    export { type_2012 as type };
                    const reference_2012: boolean;
                    export { reference_2012 as reference };
                    const many_2012: boolean;
                    export { many_2012 as many };
                    const inverse_2012: boolean;
                    export { inverse_2012 as inverse };
                }
                export { wrappedValueAsString_60 as wrappedValueAsString };
            }
            export { fields_731 as fields };
        }
        namespace IfcSecondInMinute {
            const domain_732: string;
            export { domain_732 as domain };
            const superclasses_732: any[];
            export { superclasses_732 as superclasses };
            export namespace fields_732 {
                export namespace wrappedValue_79 {
                    const type_2013: string;
                    export { type_2013 as type };
                    const reference_2013: boolean;
                    export { reference_2013 as reference };
                    const many_2013: boolean;
                    export { many_2013 as many };
                    const inverse_2013: boolean;
                    export { inverse_2013 as inverse };
                }
                export { wrappedValue_79 as wrappedValue };
                export namespace wrappedValueAsString_61 {
                    const type_2014: string;
                    export { type_2014 as type };
                    const reference_2014: boolean;
                    export { reference_2014 as reference };
                    const many_2014: boolean;
                    export { many_2014 as many };
                    const inverse_2014: boolean;
                    export { inverse_2014 as inverse };
                }
                export { wrappedValueAsString_61 as wrappedValueAsString };
            }
            export { fields_732 as fields };
        }
        namespace IfcSectionModulusMeasure {
            const domain_733: string;
            export { domain_733 as domain };
            const superclasses_733: string[];
            export { superclasses_733 as superclasses };
            export namespace fields_733 {
                export namespace wrappedValue_80 {
                    const type_2015: string;
                    export { type_2015 as type };
                    const reference_2015: boolean;
                    export { reference_2015 as reference };
                    const many_2015: boolean;
                    export { many_2015 as many };
                    const inverse_2015: boolean;
                    export { inverse_2015 as inverse };
                }
                export { wrappedValue_80 as wrappedValue };
                export namespace wrappedValueAsString_62 {
                    const type_2016: string;
                    export { type_2016 as type };
                    const reference_2016: boolean;
                    export { reference_2016 as reference };
                    const many_2016: boolean;
                    export { many_2016 as many };
                    const inverse_2016: boolean;
                    export { inverse_2016 as inverse };
                }
                export { wrappedValueAsString_62 as wrappedValueAsString };
            }
            export { fields_733 as fields };
        }
        namespace IfcSectionalAreaIntegralMeasure {
            const domain_734: string;
            export { domain_734 as domain };
            const superclasses_734: string[];
            export { superclasses_734 as superclasses };
            export namespace fields_734 {
                export namespace wrappedValue_81 {
                    const type_2017: string;
                    export { type_2017 as type };
                    const reference_2017: boolean;
                    export { reference_2017 as reference };
                    const many_2017: boolean;
                    export { many_2017 as many };
                    const inverse_2017: boolean;
                    export { inverse_2017 as inverse };
                }
                export { wrappedValue_81 as wrappedValue };
                export namespace wrappedValueAsString_63 {
                    const type_2018: string;
                    export { type_2018 as type };
                    const reference_2018: boolean;
                    export { reference_2018 as reference };
                    const many_2018: boolean;
                    export { many_2018 as many };
                    const inverse_2018: boolean;
                    export { inverse_2018 as inverse };
                }
                export { wrappedValueAsString_63 as wrappedValueAsString };
            }
            export { fields_734 as fields };
        }
        namespace IfcShearModulusMeasure {
            const domain_735: string;
            export { domain_735 as domain };
            const superclasses_735: string[];
            export { superclasses_735 as superclasses };
            export namespace fields_735 {
                export namespace wrappedValue_82 {
                    const type_2019: string;
                    export { type_2019 as type };
                    const reference_2019: boolean;
                    export { reference_2019 as reference };
                    const many_2019: boolean;
                    export { many_2019 as many };
                    const inverse_2019: boolean;
                    export { inverse_2019 as inverse };
                }
                export { wrappedValue_82 as wrappedValue };
                export namespace wrappedValueAsString_64 {
                    const type_2020: string;
                    export { type_2020 as type };
                    const reference_2020: boolean;
                    export { reference_2020 as reference };
                    const many_2020: boolean;
                    export { many_2020 as many };
                    const inverse_2020: boolean;
                    export { inverse_2020 as inverse };
                }
                export { wrappedValueAsString_64 as wrappedValueAsString };
            }
            export { fields_735 as fields };
        }
        namespace IfcSolidAngleMeasure {
            const domain_736: string;
            export { domain_736 as domain };
            const superclasses_736: string[];
            export { superclasses_736 as superclasses };
            export namespace fields_736 {
                export namespace wrappedValue_83 {
                    const type_2021: string;
                    export { type_2021 as type };
                    const reference_2021: boolean;
                    export { reference_2021 as reference };
                    const many_2021: boolean;
                    export { many_2021 as many };
                    const inverse_2021: boolean;
                    export { inverse_2021 as inverse };
                }
                export { wrappedValue_83 as wrappedValue };
                export namespace wrappedValueAsString_65 {
                    const type_2022: string;
                    export { type_2022 as type };
                    const reference_2022: boolean;
                    export { reference_2022 as reference };
                    const many_2022: boolean;
                    export { many_2022 as many };
                    const inverse_2022: boolean;
                    export { inverse_2022 as inverse };
                }
                export { wrappedValueAsString_65 as wrappedValueAsString };
            }
            export { fields_736 as fields };
        }
        namespace IfcSoundPowerMeasure {
            const domain_737: string;
            export { domain_737 as domain };
            const superclasses_737: string[];
            export { superclasses_737 as superclasses };
            export namespace fields_737 {
                export namespace wrappedValue_84 {
                    const type_2023: string;
                    export { type_2023 as type };
                    const reference_2023: boolean;
                    export { reference_2023 as reference };
                    const many_2023: boolean;
                    export { many_2023 as many };
                    const inverse_2023: boolean;
                    export { inverse_2023 as inverse };
                }
                export { wrappedValue_84 as wrappedValue };
                export namespace wrappedValueAsString_66 {
                    const type_2024: string;
                    export { type_2024 as type };
                    const reference_2024: boolean;
                    export { reference_2024 as reference };
                    const many_2024: boolean;
                    export { many_2024 as many };
                    const inverse_2024: boolean;
                    export { inverse_2024 as inverse };
                }
                export { wrappedValueAsString_66 as wrappedValueAsString };
            }
            export { fields_737 as fields };
        }
        namespace IfcSoundPressureMeasure {
            const domain_738: string;
            export { domain_738 as domain };
            const superclasses_738: string[];
            export { superclasses_738 as superclasses };
            export namespace fields_738 {
                export namespace wrappedValue_85 {
                    const type_2025: string;
                    export { type_2025 as type };
                    const reference_2025: boolean;
                    export { reference_2025 as reference };
                    const many_2025: boolean;
                    export { many_2025 as many };
                    const inverse_2025: boolean;
                    export { inverse_2025 as inverse };
                }
                export { wrappedValue_85 as wrappedValue };
                export namespace wrappedValueAsString_67 {
                    const type_2026: string;
                    export { type_2026 as type };
                    const reference_2026: boolean;
                    export { reference_2026 as reference };
                    const many_2026: boolean;
                    export { many_2026 as many };
                    const inverse_2026: boolean;
                    export { inverse_2026 as inverse };
                }
                export { wrappedValueAsString_67 as wrappedValueAsString };
            }
            export { fields_738 as fields };
        }
        namespace IfcSpecificHeatCapacityMeasure {
            const domain_739: string;
            export { domain_739 as domain };
            const superclasses_739: string[];
            export { superclasses_739 as superclasses };
            export namespace fields_739 {
                export namespace wrappedValue_86 {
                    const type_2027: string;
                    export { type_2027 as type };
                    const reference_2027: boolean;
                    export { reference_2027 as reference };
                    const many_2027: boolean;
                    export { many_2027 as many };
                    const inverse_2027: boolean;
                    export { inverse_2027 as inverse };
                }
                export { wrappedValue_86 as wrappedValue };
                export namespace wrappedValueAsString_68 {
                    const type_2028: string;
                    export { type_2028 as type };
                    const reference_2028: boolean;
                    export { reference_2028 as reference };
                    const many_2028: boolean;
                    export { many_2028 as many };
                    const inverse_2028: boolean;
                    export { inverse_2028 as inverse };
                }
                export { wrappedValueAsString_68 as wrappedValueAsString };
            }
            export { fields_739 as fields };
        }
        namespace IfcSpecularExponent {
            const domain_740: string;
            export { domain_740 as domain };
            const superclasses_740: string[];
            export { superclasses_740 as superclasses };
            export namespace fields_740 {
                export namespace wrappedValue_87 {
                    const type_2029: string;
                    export { type_2029 as type };
                    const reference_2029: boolean;
                    export { reference_2029 as reference };
                    const many_2029: boolean;
                    export { many_2029 as many };
                    const inverse_2029: boolean;
                    export { inverse_2029 as inverse };
                }
                export { wrappedValue_87 as wrappedValue };
                export namespace wrappedValueAsString_69 {
                    const type_2030: string;
                    export { type_2030 as type };
                    const reference_2030: boolean;
                    export { reference_2030 as reference };
                    const many_2030: boolean;
                    export { many_2030 as many };
                    const inverse_2030: boolean;
                    export { inverse_2030 as inverse };
                }
                export { wrappedValueAsString_69 as wrappedValueAsString };
            }
            export { fields_740 as fields };
        }
        namespace IfcSpecularRoughness {
            const domain_741: string;
            export { domain_741 as domain };
            const superclasses_741: string[];
            export { superclasses_741 as superclasses };
            export namespace fields_741 {
                export namespace wrappedValue_88 {
                    const type_2031: string;
                    export { type_2031 as type };
                    const reference_2031: boolean;
                    export { reference_2031 as reference };
                    const many_2031: boolean;
                    export { many_2031 as many };
                    const inverse_2031: boolean;
                    export { inverse_2031 as inverse };
                }
                export { wrappedValue_88 as wrappedValue };
                export namespace wrappedValueAsString_70 {
                    const type_2032: string;
                    export { type_2032 as type };
                    const reference_2032: boolean;
                    export { reference_2032 as reference };
                    const many_2032: boolean;
                    export { many_2032 as many };
                    const inverse_2032: boolean;
                    export { inverse_2032 as inverse };
                }
                export { wrappedValueAsString_70 as wrappedValueAsString };
            }
            export { fields_741 as fields };
        }
        namespace IfcTemperatureGradientMeasure {
            const domain_742: string;
            export { domain_742 as domain };
            const superclasses_742: string[];
            export { superclasses_742 as superclasses };
            export namespace fields_742 {
                export namespace wrappedValue_89 {
                    const type_2033: string;
                    export { type_2033 as type };
                    const reference_2033: boolean;
                    export { reference_2033 as reference };
                    const many_2033: boolean;
                    export { many_2033 as many };
                    const inverse_2033: boolean;
                    export { inverse_2033 as inverse };
                }
                export { wrappedValue_89 as wrappedValue };
                export namespace wrappedValueAsString_71 {
                    const type_2034: string;
                    export { type_2034 as type };
                    const reference_2034: boolean;
                    export { reference_2034 as reference };
                    const many_2034: boolean;
                    export { many_2034 as many };
                    const inverse_2034: boolean;
                    export { inverse_2034 as inverse };
                }
                export { wrappedValueAsString_71 as wrappedValueAsString };
            }
            export { fields_742 as fields };
        }
        namespace IfcText {
            const domain_743: string;
            export { domain_743 as domain };
            const superclasses_743: string[];
            export { superclasses_743 as superclasses };
            export namespace fields_743 {
                export namespace wrappedValue_90 {
                    const type_2035: string;
                    export { type_2035 as type };
                    const reference_2035: boolean;
                    export { reference_2035 as reference };
                    const many_2035: boolean;
                    export { many_2035 as many };
                    const inverse_2035: boolean;
                    export { inverse_2035 as inverse };
                }
                export { wrappedValue_90 as wrappedValue };
            }
            export { fields_743 as fields };
        }
        namespace IfcTextAlignment {
            const domain_744: string;
            export { domain_744 as domain };
            const superclasses_744: any[];
            export { superclasses_744 as superclasses };
            export namespace fields_744 {
                export namespace wrappedValue_91 {
                    const type_2036: string;
                    export { type_2036 as type };
                    const reference_2036: boolean;
                    export { reference_2036 as reference };
                    const many_2036: boolean;
                    export { many_2036 as many };
                    const inverse_2036: boolean;
                    export { inverse_2036 as inverse };
                }
                export { wrappedValue_91 as wrappedValue };
            }
            export { fields_744 as fields };
        }
        namespace IfcTextDecoration {
            const domain_745: string;
            export { domain_745 as domain };
            const superclasses_745: any[];
            export { superclasses_745 as superclasses };
            export namespace fields_745 {
                export namespace wrappedValue_92 {
                    const type_2037: string;
                    export { type_2037 as type };
                    const reference_2037: boolean;
                    export { reference_2037 as reference };
                    const many_2037: boolean;
                    export { many_2037 as many };
                    const inverse_2037: boolean;
                    export { inverse_2037 as inverse };
                }
                export { wrappedValue_92 as wrappedValue };
            }
            export { fields_745 as fields };
        }
        namespace IfcTextFontName {
            const domain_746: string;
            export { domain_746 as domain };
            const superclasses_746: any[];
            export { superclasses_746 as superclasses };
            export namespace fields_746 {
                export namespace wrappedValue_93 {
                    const type_2038: string;
                    export { type_2038 as type };
                    const reference_2038: boolean;
                    export { reference_2038 as reference };
                    const many_2038: boolean;
                    export { many_2038 as many };
                    const inverse_2038: boolean;
                    export { inverse_2038 as inverse };
                }
                export { wrappedValue_93 as wrappedValue };
            }
            export { fields_746 as fields };
        }
        namespace IfcTextTransformation {
            const domain_747: string;
            export { domain_747 as domain };
            const superclasses_747: any[];
            export { superclasses_747 as superclasses };
            export namespace fields_747 {
                export namespace wrappedValue_94 {
                    const type_2039: string;
                    export { type_2039 as type };
                    const reference_2039: boolean;
                    export { reference_2039 as reference };
                    const many_2039: boolean;
                    export { many_2039 as many };
                    const inverse_2039: boolean;
                    export { inverse_2039 as inverse };
                }
                export { wrappedValue_94 as wrappedValue };
            }
            export { fields_747 as fields };
        }
        namespace IfcThermalAdmittanceMeasure {
            const domain_748: string;
            export { domain_748 as domain };
            const superclasses_748: string[];
            export { superclasses_748 as superclasses };
            export namespace fields_748 {
                export namespace wrappedValue_95 {
                    const type_2040: string;
                    export { type_2040 as type };
                    const reference_2040: boolean;
                    export { reference_2040 as reference };
                    const many_2040: boolean;
                    export { many_2040 as many };
                    const inverse_2040: boolean;
                    export { inverse_2040 as inverse };
                }
                export { wrappedValue_95 as wrappedValue };
                export namespace wrappedValueAsString_72 {
                    const type_2041: string;
                    export { type_2041 as type };
                    const reference_2041: boolean;
                    export { reference_2041 as reference };
                    const many_2041: boolean;
                    export { many_2041 as many };
                    const inverse_2041: boolean;
                    export { inverse_2041 as inverse };
                }
                export { wrappedValueAsString_72 as wrappedValueAsString };
            }
            export { fields_748 as fields };
        }
        namespace IfcThermalConductivityMeasure {
            const domain_749: string;
            export { domain_749 as domain };
            const superclasses_749: string[];
            export { superclasses_749 as superclasses };
            export namespace fields_749 {
                export namespace wrappedValue_96 {
                    const type_2042: string;
                    export { type_2042 as type };
                    const reference_2042: boolean;
                    export { reference_2042 as reference };
                    const many_2042: boolean;
                    export { many_2042 as many };
                    const inverse_2042: boolean;
                    export { inverse_2042 as inverse };
                }
                export { wrappedValue_96 as wrappedValue };
                export namespace wrappedValueAsString_73 {
                    const type_2043: string;
                    export { type_2043 as type };
                    const reference_2043: boolean;
                    export { reference_2043 as reference };
                    const many_2043: boolean;
                    export { many_2043 as many };
                    const inverse_2043: boolean;
                    export { inverse_2043 as inverse };
                }
                export { wrappedValueAsString_73 as wrappedValueAsString };
            }
            export { fields_749 as fields };
        }
        namespace IfcThermalExpansionCoefficientMeasure {
            const domain_750: string;
            export { domain_750 as domain };
            const superclasses_750: string[];
            export { superclasses_750 as superclasses };
            export namespace fields_750 {
                export namespace wrappedValue_97 {
                    const type_2044: string;
                    export { type_2044 as type };
                    const reference_2044: boolean;
                    export { reference_2044 as reference };
                    const many_2044: boolean;
                    export { many_2044 as many };
                    const inverse_2044: boolean;
                    export { inverse_2044 as inverse };
                }
                export { wrappedValue_97 as wrappedValue };
                export namespace wrappedValueAsString_74 {
                    const type_2045: string;
                    export { type_2045 as type };
                    const reference_2045: boolean;
                    export { reference_2045 as reference };
                    const many_2045: boolean;
                    export { many_2045 as many };
                    const inverse_2045: boolean;
                    export { inverse_2045 as inverse };
                }
                export { wrappedValueAsString_74 as wrappedValueAsString };
            }
            export { fields_750 as fields };
        }
        namespace IfcThermalResistanceMeasure {
            const domain_751: string;
            export { domain_751 as domain };
            const superclasses_751: string[];
            export { superclasses_751 as superclasses };
            export namespace fields_751 {
                export namespace wrappedValue_98 {
                    const type_2046: string;
                    export { type_2046 as type };
                    const reference_2046: boolean;
                    export { reference_2046 as reference };
                    const many_2046: boolean;
                    export { many_2046 as many };
                    const inverse_2046: boolean;
                    export { inverse_2046 as inverse };
                }
                export { wrappedValue_98 as wrappedValue };
                export namespace wrappedValueAsString_75 {
                    const type_2047: string;
                    export { type_2047 as type };
                    const reference_2047: boolean;
                    export { reference_2047 as reference };
                    const many_2047: boolean;
                    export { many_2047 as many };
                    const inverse_2047: boolean;
                    export { inverse_2047 as inverse };
                }
                export { wrappedValueAsString_75 as wrappedValueAsString };
            }
            export { fields_751 as fields };
        }
        namespace IfcThermalTransmittanceMeasure {
            const domain_752: string;
            export { domain_752 as domain };
            const superclasses_752: string[];
            export { superclasses_752 as superclasses };
            export namespace fields_752 {
                export namespace wrappedValue_99 {
                    const type_2048: string;
                    export { type_2048 as type };
                    const reference_2048: boolean;
                    export { reference_2048 as reference };
                    const many_2048: boolean;
                    export { many_2048 as many };
                    const inverse_2048: boolean;
                    export { inverse_2048 as inverse };
                }
                export { wrappedValue_99 as wrappedValue };
                export namespace wrappedValueAsString_76 {
                    const type_2049: string;
                    export { type_2049 as type };
                    const reference_2049: boolean;
                    export { reference_2049 as reference };
                    const many_2049: boolean;
                    export { many_2049 as many };
                    const inverse_2049: boolean;
                    export { inverse_2049 as inverse };
                }
                export { wrappedValueAsString_76 as wrappedValueAsString };
            }
            export { fields_752 as fields };
        }
        namespace IfcThermodynamicTemperatureMeasure {
            const domain_753: string;
            export { domain_753 as domain };
            const superclasses_753: string[];
            export { superclasses_753 as superclasses };
            export namespace fields_753 {
                export namespace wrappedValue_100 {
                    const type_2050: string;
                    export { type_2050 as type };
                    const reference_2050: boolean;
                    export { reference_2050 as reference };
                    const many_2050: boolean;
                    export { many_2050 as many };
                    const inverse_2050: boolean;
                    export { inverse_2050 as inverse };
                }
                export { wrappedValue_100 as wrappedValue };
                export namespace wrappedValueAsString_77 {
                    const type_2051: string;
                    export { type_2051 as type };
                    const reference_2051: boolean;
                    export { reference_2051 as reference };
                    const many_2051: boolean;
                    export { many_2051 as many };
                    const inverse_2051: boolean;
                    export { inverse_2051 as inverse };
                }
                export { wrappedValueAsString_77 as wrappedValueAsString };
            }
            export { fields_753 as fields };
        }
        namespace IfcTimeMeasure {
            const domain_754: string;
            export { domain_754 as domain };
            const superclasses_754: string[];
            export { superclasses_754 as superclasses };
            export namespace fields_754 {
                export namespace wrappedValue_101 {
                    const type_2052: string;
                    export { type_2052 as type };
                    const reference_2052: boolean;
                    export { reference_2052 as reference };
                    const many_2052: boolean;
                    export { many_2052 as many };
                    const inverse_2052: boolean;
                    export { inverse_2052 as inverse };
                }
                export { wrappedValue_101 as wrappedValue };
                export namespace wrappedValueAsString_78 {
                    const type_2053: string;
                    export { type_2053 as type };
                    const reference_2053: boolean;
                    export { reference_2053 as reference };
                    const many_2053: boolean;
                    export { many_2053 as many };
                    const inverse_2053: boolean;
                    export { inverse_2053 as inverse };
                }
                export { wrappedValueAsString_78 as wrappedValueAsString };
            }
            export { fields_754 as fields };
        }
        namespace IfcTimeStamp {
            const domain_755: string;
            export { domain_755 as domain };
            const superclasses_755: string[];
            export { superclasses_755 as superclasses };
            export namespace fields_755 {
                export namespace wrappedValue_102 {
                    const type_2054: string;
                    export { type_2054 as type };
                    const reference_2054: boolean;
                    export { reference_2054 as reference };
                    const many_2054: boolean;
                    export { many_2054 as many };
                    const inverse_2054: boolean;
                    export { inverse_2054 as inverse };
                }
                export { wrappedValue_102 as wrappedValue };
            }
            export { fields_755 as fields };
        }
        namespace IfcTorqueMeasure {
            const domain_756: string;
            export { domain_756 as domain };
            const superclasses_756: string[];
            export { superclasses_756 as superclasses };
            export namespace fields_756 {
                export namespace wrappedValue_103 {
                    const type_2055: string;
                    export { type_2055 as type };
                    const reference_2055: boolean;
                    export { reference_2055 as reference };
                    const many_2055: boolean;
                    export { many_2055 as many };
                    const inverse_2055: boolean;
                    export { inverse_2055 as inverse };
                }
                export { wrappedValue_103 as wrappedValue };
                export namespace wrappedValueAsString_79 {
                    const type_2056: string;
                    export { type_2056 as type };
                    const reference_2056: boolean;
                    export { reference_2056 as reference };
                    const many_2056: boolean;
                    export { many_2056 as many };
                    const inverse_2056: boolean;
                    export { inverse_2056 as inverse };
                }
                export { wrappedValueAsString_79 as wrappedValueAsString };
            }
            export { fields_756 as fields };
        }
        namespace IfcVaporPermeabilityMeasure {
            const domain_757: string;
            export { domain_757 as domain };
            const superclasses_757: string[];
            export { superclasses_757 as superclasses };
            export namespace fields_757 {
                export namespace wrappedValue_104 {
                    const type_2057: string;
                    export { type_2057 as type };
                    const reference_2057: boolean;
                    export { reference_2057 as reference };
                    const many_2057: boolean;
                    export { many_2057 as many };
                    const inverse_2057: boolean;
                    export { inverse_2057 as inverse };
                }
                export { wrappedValue_104 as wrappedValue };
                export namespace wrappedValueAsString_80 {
                    const type_2058: string;
                    export { type_2058 as type };
                    const reference_2058: boolean;
                    export { reference_2058 as reference };
                    const many_2058: boolean;
                    export { many_2058 as many };
                    const inverse_2058: boolean;
                    export { inverse_2058 as inverse };
                }
                export { wrappedValueAsString_80 as wrappedValueAsString };
            }
            export { fields_757 as fields };
        }
        namespace IfcVolumeMeasure {
            const domain_758: string;
            export { domain_758 as domain };
            const superclasses_758: string[];
            export { superclasses_758 as superclasses };
            export namespace fields_758 {
                export namespace wrappedValue_105 {
                    const type_2059: string;
                    export { type_2059 as type };
                    const reference_2059: boolean;
                    export { reference_2059 as reference };
                    const many_2059: boolean;
                    export { many_2059 as many };
                    const inverse_2059: boolean;
                    export { inverse_2059 as inverse };
                }
                export { wrappedValue_105 as wrappedValue };
                export namespace wrappedValueAsString_81 {
                    const type_2060: string;
                    export { type_2060 as type };
                    const reference_2060: boolean;
                    export { reference_2060 as reference };
                    const many_2060: boolean;
                    export { many_2060 as many };
                    const inverse_2060: boolean;
                    export { inverse_2060 as inverse };
                }
                export { wrappedValueAsString_81 as wrappedValueAsString };
            }
            export { fields_758 as fields };
        }
        namespace IfcVolumetricFlowRateMeasure {
            const domain_759: string;
            export { domain_759 as domain };
            const superclasses_759: string[];
            export { superclasses_759 as superclasses };
            export namespace fields_759 {
                export namespace wrappedValue_106 {
                    const type_2061: string;
                    export { type_2061 as type };
                    const reference_2061: boolean;
                    export { reference_2061 as reference };
                    const many_2061: boolean;
                    export { many_2061 as many };
                    const inverse_2061: boolean;
                    export { inverse_2061 as inverse };
                }
                export { wrappedValue_106 as wrappedValue };
                export namespace wrappedValueAsString_82 {
                    const type_2062: string;
                    export { type_2062 as type };
                    const reference_2062: boolean;
                    export { reference_2062 as reference };
                    const many_2062: boolean;
                    export { many_2062 as many };
                    const inverse_2062: boolean;
                    export { inverse_2062 as inverse };
                }
                export { wrappedValueAsString_82 as wrappedValueAsString };
            }
            export { fields_759 as fields };
        }
        namespace IfcWarpingConstantMeasure {
            const domain_760: string;
            export { domain_760 as domain };
            const superclasses_760: string[];
            export { superclasses_760 as superclasses };
            export namespace fields_760 {
                export namespace wrappedValue_107 {
                    const type_2063: string;
                    export { type_2063 as type };
                    const reference_2063: boolean;
                    export { reference_2063 as reference };
                    const many_2063: boolean;
                    export { many_2063 as many };
                    const inverse_2063: boolean;
                    export { inverse_2063 as inverse };
                }
                export { wrappedValue_107 as wrappedValue };
                export namespace wrappedValueAsString_83 {
                    const type_2064: string;
                    export { type_2064 as type };
                    const reference_2064: boolean;
                    export { reference_2064 as reference };
                    const many_2064: boolean;
                    export { many_2064 as many };
                    const inverse_2064: boolean;
                    export { inverse_2064 as inverse };
                }
                export { wrappedValueAsString_83 as wrappedValueAsString };
            }
            export { fields_760 as fields };
        }
        namespace IfcWarpingMomentMeasure {
            const domain_761: string;
            export { domain_761 as domain };
            const superclasses_761: string[];
            export { superclasses_761 as superclasses };
            export namespace fields_761 {
                export namespace wrappedValue_108 {
                    const type_2065: string;
                    export { type_2065 as type };
                    const reference_2065: boolean;
                    export { reference_2065 as reference };
                    const many_2065: boolean;
                    export { many_2065 as many };
                    const inverse_2065: boolean;
                    export { inverse_2065 as inverse };
                }
                export { wrappedValue_108 as wrappedValue };
                export namespace wrappedValueAsString_84 {
                    const type_2066: string;
                    export { type_2066 as type };
                    const reference_2066: boolean;
                    export { reference_2066 as reference };
                    const many_2066: boolean;
                    export { many_2066 as many };
                    const inverse_2066: boolean;
                    export { inverse_2066 as inverse };
                }
                export { wrappedValueAsString_84 as wrappedValueAsString };
            }
            export { fields_761 as fields };
        }
        namespace IfcYearNumber {
            const domain_762: string;
            export { domain_762 as domain };
            const superclasses_762: any[];
            export { superclasses_762 as superclasses };
            export namespace fields_762 {
                export namespace wrappedValue_109 {
                    const type_2067: string;
                    export { type_2067 as type };
                    const reference_2067: boolean;
                    export { reference_2067 as reference };
                    const many_2067: boolean;
                    export { many_2067 as many };
                    const inverse_2067: boolean;
                    export { inverse_2067 as inverse };
                }
                export { wrappedValue_109 as wrappedValue };
            }
            export { fields_762 as fields };
        }
        namespace IfcBoxAlignment {
            const domain_763: string;
            export { domain_763 as domain };
            const superclasses_763: string[];
            export { superclasses_763 as superclasses };
            const fields_763: {};
            export { fields_763 as fields };
        }
        namespace IfcCompoundPlaneAngleMeasure {
            const domain_764: string;
            export { domain_764 as domain };
            const superclasses_764: string[];
            export { superclasses_764 as superclasses };
            export namespace fields_764 {
                export namespace wrappedValue_110 {
                    const type_2068: string;
                    export { type_2068 as type };
                    const reference_2068: boolean;
                    export { reference_2068 as reference };
                    const many_2068: boolean;
                    export { many_2068 as many };
                    const inverse_2068: boolean;
                    export { inverse_2068 as inverse };
                }
                export { wrappedValue_110 as wrappedValue };
            }
            export { fields_764 as fields };
        }
        namespace IfcNormalisedRatioMeasure {
            const domain_765: string;
            export { domain_765 as domain };
            const superclasses_765: string[];
            export { superclasses_765 as superclasses };
            const fields_765: {};
            export { fields_765 as fields };
        }
        namespace IfcPositiveLengthMeasure {
            const domain_766: string;
            export { domain_766 as domain };
            const superclasses_766: string[];
            export { superclasses_766 as superclasses };
            const fields_766: {};
            export { fields_766 as fields };
        }
        namespace IfcPositivePlaneAngleMeasure {
            const domain_767: string;
            export { domain_767 as domain };
            const superclasses_767: string[];
            export { superclasses_767 as superclasses };
            const fields_767: {};
            export { fields_767 as fields };
        }
        namespace IfcPositiveRatioMeasure {
            const domain_768: string;
            export { domain_768 as domain };
            const superclasses_768: string[];
            export { superclasses_768 as superclasses };
            const fields_768: {};
            export { fields_768 as fields };
        }
        const IfcActionSourceTypeEnum: {};
        const IfcActionTypeEnum: {};
        const IfcActuatorTypeEnum: {};
        const IfcAddressTypeEnum: {};
        const IfcAheadOrBehind: {};
        const IfcAirTerminalBoxTypeEnum: {};
        const IfcAirTerminalTypeEnum: {};
        const IfcAirToAirHeatRecoveryTypeEnum: {};
        const IfcAlarmTypeEnum: {};
        const IfcAnalysisModelTypeEnum: {};
        const IfcAnalysisTheoryTypeEnum: {};
        const IfcArithmeticOperatorEnum: {};
        const IfcAssemblyPlaceEnum: {};
        const IfcBSplineCurveForm: {};
        const IfcBeamTypeEnum: {};
        const IfcBenchmarkEnum: {};
        const IfcBoilerTypeEnum: {};
        const IfcBooleanOperator: {};
        const IfcBuildingElementProxyTypeEnum: {};
        const IfcCableCarrierFittingTypeEnum: {};
        const IfcCableCarrierSegmentTypeEnum: {};
        const IfcCableSegmentTypeEnum: {};
        const IfcChangeActionEnum: {};
        const IfcChillerTypeEnum: {};
        const IfcCoilTypeEnum: {};
        const IfcColumnTypeEnum: {};
        const IfcCompressorTypeEnum: {};
        const IfcCondenserTypeEnum: {};
        const IfcConnectionTypeEnum: {};
        const IfcConstraintEnum: {};
        const IfcControllerTypeEnum: {};
        const IfcCooledBeamTypeEnum: {};
        const IfcCoolingTowerTypeEnum: {};
        const IfcCostScheduleTypeEnum: {};
        const IfcCoveringTypeEnum: {};
        const IfcCurrencyEnum: {};
        const IfcCurtainWallTypeEnum: {};
        const IfcDamperTypeEnum: {};
        const IfcDataOriginEnum: {};
        const IfcDerivedUnitEnum: {};
        const IfcDimensionExtentUsage: {};
        const IfcDirectionSenseEnum: {};
        const IfcDistributionChamberElementTypeEnum: {};
        const IfcDocumentConfidentialityEnum: {};
        const IfcDocumentStatusEnum: {};
        const IfcDoorPanelOperationEnum: {};
        const IfcDoorPanelPositionEnum: {};
        const IfcDoorStyleConstructionEnum: {};
        const IfcDoorStyleOperationEnum: {};
        const IfcDuctFittingTypeEnum: {};
        const IfcDuctSegmentTypeEnum: {};
        const IfcDuctSilencerTypeEnum: {};
        const IfcElectricApplianceTypeEnum: {};
        const IfcElectricCurrentEnum: {};
        const IfcElectricDistributionPointFunctionEnum: {};
        const IfcElectricFlowStorageDeviceTypeEnum: {};
        const IfcElectricGeneratorTypeEnum: {};
        const IfcElectricHeaterTypeEnum: {};
        const IfcElectricMotorTypeEnum: {};
        const IfcElectricTimeControlTypeEnum: {};
        const IfcElementAssemblyTypeEnum: {};
        const IfcElementCompositionEnum: {};
        const IfcEnergySequenceEnum: {};
        const IfcEnvironmentalImpactCategoryEnum: {};
        const IfcEvaporativeCoolerTypeEnum: {};
        const IfcEvaporatorTypeEnum: {};
        const IfcFanTypeEnum: {};
        const IfcFilterTypeEnum: {};
        const IfcFireSuppressionTerminalTypeEnum: {};
        const IfcFlowDirectionEnum: {};
        const IfcFlowInstrumentTypeEnum: {};
        const IfcFlowMeterTypeEnum: {};
        const IfcFootingTypeEnum: {};
        const IfcGasTerminalTypeEnum: {};
        const IfcGeometricProjectionEnum: {};
        const IfcGlobalOrLocalEnum: {};
        const IfcHeatExchangerTypeEnum: {};
        const IfcHumidifierTypeEnum: {};
        const IfcInternalOrExternalEnum: {};
        const IfcInventoryTypeEnum: {};
        const IfcJunctionBoxTypeEnum: {};
        const IfcLampTypeEnum: {};
        const IfcLayerSetDirectionEnum: {};
        const IfcLightDistributionCurveEnum: {};
        const IfcLightEmissionSourceEnum: {};
        const IfcLightFixtureTypeEnum: {};
        const IfcLoadGroupTypeEnum: {};
        const IfcLogicalOperatorEnum: {};
        const IfcMemberTypeEnum: {};
        const IfcMotorConnectionTypeEnum: {};
        const IfcNullStyleEnum: {};
        const IfcObjectTypeEnum: {};
        const IfcObjectiveEnum: {};
        const IfcOccupantTypeEnum: {};
        const IfcOutletTypeEnum: {};
        const IfcPermeableCoveringOperationEnum: {};
        const IfcPhysicalOrVirtualEnum: {};
        const IfcPileConstructionEnum: {};
        const IfcPileTypeEnum: {};
        const IfcPipeFittingTypeEnum: {};
        const IfcPipeSegmentTypeEnum: {};
        const IfcPlateTypeEnum: {};
        const IfcProcedureTypeEnum: {};
        const IfcProfileTypeEnum: {};
        const IfcProjectOrderRecordTypeEnum: {};
        const IfcProjectOrderTypeEnum: {};
        const IfcProjectedOrTrueLengthEnum: {};
        const IfcPropertySourceEnum: {};
        const IfcProtectiveDeviceTypeEnum: {};
        const IfcPumpTypeEnum: {};
        const IfcRailingTypeEnum: {};
        const IfcRampFlightTypeEnum: {};
        const IfcRampTypeEnum: {};
        const IfcReflectanceMethodEnum: {};
        const IfcReinforcingBarRoleEnum: {};
        const IfcReinforcingBarSurfaceEnum: {};
        const IfcResourceConsumptionEnum: {};
        const IfcRibPlateDirectionEnum: {};
        const IfcRoleEnum: {};
        const IfcRoofTypeEnum: {};
        const IfcSIPrefix: {};
        const IfcSIUnitName: {};
        const IfcSanitaryTerminalTypeEnum: {};
        const IfcSectionTypeEnum: {};
        const IfcSensorTypeEnum: {};
        const IfcSequenceEnum: {};
        const IfcServiceLifeFactorTypeEnum: {};
        const IfcServiceLifeTypeEnum: {};
        const IfcSlabTypeEnum: {};
        const IfcSoundScaleEnum: {};
        const IfcSpaceHeaterTypeEnum: {};
        const IfcSpaceTypeEnum: {};
        const IfcStackTerminalTypeEnum: {};
        const IfcStairFlightTypeEnum: {};
        const IfcStairTypeEnum: {};
        const IfcStateEnum: {};
        const IfcStructuralCurveTypeEnum: {};
        const IfcStructuralSurfaceTypeEnum: {};
        const IfcSurfaceSide: {};
        const IfcSurfaceTextureEnum: {};
        const IfcSwitchingDeviceTypeEnum: {};
        const IfcTankTypeEnum: {};
        const IfcTendonTypeEnum: {};
        const IfcTextPath: {};
        const IfcThermalLoadSourceEnum: {};
        const IfcThermalLoadTypeEnum: {};
        const IfcTimeSeriesDataTypeEnum: {};
        const IfcTimeSeriesScheduleTypeEnum: {};
        const IfcTransformerTypeEnum: {};
        const IfcTransitionCode: {};
        const IfcTransportElementTypeEnum: {};
        const IfcTrimmingPreference: {};
        const IfcTubeBundleTypeEnum: {};
        const IfcUnitEnum: {};
        const IfcUnitaryEquipmentTypeEnum: {};
        const IfcValveTypeEnum: {};
        const IfcVibrationIsolatorTypeEnum: {};
        const IfcWallTypeEnum: {};
        const IfcWasteTerminalTypeEnum: {};
        const IfcWindowPanelOperationEnum: {};
        const IfcWindowPanelPositionEnum: {};
        const IfcWindowStyleConstructionEnum: {};
        const IfcWindowStyleOperationEnum: {};
        const IfcWorkControlTypeEnum: {};
        namespace IfcComplexNumber {
            const domain_769: string;
            export { domain_769 as domain };
            const superclasses_769: string[];
            export { superclasses_769 as superclasses };
            export namespace fields_769 {
                export namespace wrappedValue_111 {
                    const type_2069: string;
                    export { type_2069 as type };
                    const reference_2069: boolean;
                    export { reference_2069 as reference };
                    const many_2069: boolean;
                    export { many_2069 as many };
                    const inverse_2069: boolean;
                    export { inverse_2069 as inverse };
                }
                export { wrappedValue_111 as wrappedValue };
                export namespace wrappedValueAsString_85 {
                    const type_2070: string;
                    export { type_2070 as type };
                    const reference_2070: boolean;
                    export { reference_2070 as reference };
                    const many_2070: boolean;
                    export { many_2070 as many };
                    const inverse_2070: boolean;
                    export { inverse_2070 as inverse };
                }
                export { wrappedValueAsString_85 as wrappedValueAsString };
            }
            export { fields_769 as fields };
        }
        namespace IfcNullStyle {
            const domain_770: string;
            export { domain_770 as domain };
            const superclasses_770: string[];
            export { superclasses_770 as superclasses };
            export namespace fields_770 {
                export namespace wrappedValue_112 {
                    const type_2071: string;
                    export { type_2071 as type };
                    const reference_2071: boolean;
                    export { reference_2071 as reference };
                    const many_2071: boolean;
                    export { many_2071 as many };
                    const inverse_2071: boolean;
                    export { inverse_2071 as inverse };
                }
                export { wrappedValue_112 as wrappedValue };
            }
            export { fields_770 as fields };
        }
        namespace IfcActorSelect {
            const domain_771: string;
            export { domain_771 as domain };
            const superclasses_771: any[];
            export { superclasses_771 as superclasses };
            const fields_771: {};
            export { fields_771 as fields };
        }
        namespace IfcAppliedValueSelect {
            const domain_772: string;
            export { domain_772 as domain };
            const superclasses_772: any[];
            export { superclasses_772 as superclasses };
            const fields_772: {};
            export { fields_772 as fields };
        }
        namespace IfcAxis2Placement {
            const domain_773: string;
            export { domain_773 as domain };
            const superclasses_773: any[];
            export { superclasses_773 as superclasses };
            const fields_773: {};
            export { fields_773 as fields };
        }
        namespace IfcBooleanOperand {
            const domain_774: string;
            export { domain_774 as domain };
            const superclasses_774: any[];
            export { superclasses_774 as superclasses };
            const fields_774: {};
            export { fields_774 as fields };
        }
        namespace IfcCharacterStyleSelect {
            const domain_775: string;
            export { domain_775 as domain };
            const superclasses_775: any[];
            export { superclasses_775 as superclasses };
            const fields_775: {};
            export { fields_775 as fields };
        }
        namespace IfcClassificationNotationSelect {
            const domain_776: string;
            export { domain_776 as domain };
            const superclasses_776: any[];
            export { superclasses_776 as superclasses };
            const fields_776: {};
            export { fields_776 as fields };
        }
        namespace IfcColour {
            const domain_777: string;
            export { domain_777 as domain };
            const superclasses_777: string[];
            export { superclasses_777 as superclasses };
            const fields_777: {};
            export { fields_777 as fields };
        }
        namespace IfcColourOrFactor {
            const domain_778: string;
            export { domain_778 as domain };
            const superclasses_778: any[];
            export { superclasses_778 as superclasses };
            const fields_778: {};
            export { fields_778 as fields };
        }
        namespace IfcConditionCriterionSelect {
            const domain_779: string;
            export { domain_779 as domain };
            const superclasses_779: any[];
            export { superclasses_779 as superclasses };
            const fields_779: {};
            export { fields_779 as fields };
        }
        namespace IfcCsgSelect {
            const domain_780: string;
            export { domain_780 as domain };
            const superclasses_780: any[];
            export { superclasses_780 as superclasses };
            const fields_780: {};
            export { fields_780 as fields };
        }
        namespace IfcCurveFontOrScaledCurveFontSelect {
            const domain_781: string;
            export { domain_781 as domain };
            const superclasses_781: any[];
            export { superclasses_781 as superclasses };
            const fields_781: {};
            export { fields_781 as fields };
        }
        namespace IfcCurveOrEdgeCurve {
            const domain_782: string;
            export { domain_782 as domain };
            const superclasses_782: any[];
            export { superclasses_782 as superclasses };
            const fields_782: {};
            export { fields_782 as fields };
        }
        namespace IfcCurveStyleFontSelect {
            const domain_783: string;
            export { domain_783 as domain };
            const superclasses_783: string[];
            export { superclasses_783 as superclasses };
            const fields_783: {};
            export { fields_783 as fields };
        }
        namespace IfcDateTimeSelect {
            const domain_784: string;
            export { domain_784 as domain };
            const superclasses_784: string[];
            export { superclasses_784 as superclasses };
            const fields_784: {};
            export { fields_784 as fields };
        }
        namespace IfcDefinedSymbolSelect {
            const domain_785: string;
            export { domain_785 as domain };
            const superclasses_785: any[];
            export { superclasses_785 as superclasses };
            const fields_785: {};
            export { fields_785 as fields };
        }
        namespace IfcDerivedMeasureValue {
            const domain_786: string;
            export { domain_786 as domain };
            const superclasses_786: string[];
            export { superclasses_786 as superclasses };
            const fields_786: {};
            export { fields_786 as fields };
        }
        namespace IfcDocumentSelect {
            const domain_787: string;
            export { domain_787 as domain };
            const superclasses_787: any[];
            export { superclasses_787 as superclasses };
            const fields_787: {};
            export { fields_787 as fields };
        }
        namespace IfcDraughtingCalloutElement {
            const domain_788: string;
            export { domain_788 as domain };
            const superclasses_788: any[];
            export { superclasses_788 as superclasses };
            const fields_788: {};
            export { fields_788 as fields };
        }
        namespace IfcFillAreaStyleTileShapeSelect {
            const domain_789: string;
            export { domain_789 as domain };
            const superclasses_789: any[];
            export { superclasses_789 as superclasses };
            const fields_789: {};
            export { fields_789 as fields };
        }
        namespace IfcFillStyleSelect {
            const domain_790: string;
            export { domain_790 as domain };
            const superclasses_790: any[];
            export { superclasses_790 as superclasses };
            const fields_790: {};
            export { fields_790 as fields };
        }
        namespace IfcGeometricSetSelect {
            const domain_791: string;
            export { domain_791 as domain };
            const superclasses_791: any[];
            export { superclasses_791 as superclasses };
            const fields_791: {};
            export { fields_791 as fields };
        }
        namespace IfcHatchLineDistanceSelect {
            const domain_792: string;
            export { domain_792 as domain };
            const superclasses_792: any[];
            export { superclasses_792 as superclasses };
            const fields_792: {};
            export { fields_792 as fields };
        }
        namespace IfcLayeredItem {
            const domain_793: string;
            export { domain_793 as domain };
            const superclasses_793: any[];
            export { superclasses_793 as superclasses };
            const fields_793: {};
            export { fields_793 as fields };
        }
        namespace IfcLibrarySelect {
            const domain_794: string;
            export { domain_794 as domain };
            const superclasses_794: any[];
            export { superclasses_794 as superclasses };
            const fields_794: {};
            export { fields_794 as fields };
        }
        namespace IfcLightDistributionDataSourceSelect {
            const domain_795: string;
            export { domain_795 as domain };
            const superclasses_795: any[];
            export { superclasses_795 as superclasses };
            const fields_795: {};
            export { fields_795 as fields };
        }
        namespace IfcMaterialSelect {
            const domain_796: string;
            export { domain_796 as domain };
            const superclasses_796: any[];
            export { superclasses_796 as superclasses };
            const fields_796: {};
            export { fields_796 as fields };
        }
        namespace IfcMeasureValue {
            const domain_797: string;
            export { domain_797 as domain };
            const superclasses_797: string[];
            export { superclasses_797 as superclasses };
            const fields_797: {};
            export { fields_797 as fields };
        }
        namespace IfcMetricValueSelect {
            const domain_798: string;
            export { domain_798 as domain };
            const superclasses_798: any[];
            export { superclasses_798 as superclasses };
            const fields_798: {};
            export { fields_798 as fields };
        }
        namespace IfcObjectReferenceSelect {
            const domain_799: string;
            export { domain_799 as domain };
            const superclasses_799: any[];
            export { superclasses_799 as superclasses };
            const fields_799: {};
            export { fields_799 as fields };
        }
        namespace IfcOrientationSelect {
            const domain_800: string;
            export { domain_800 as domain };
            const superclasses_800: any[];
            export { superclasses_800 as superclasses };
            const fields_800: {};
            export { fields_800 as fields };
        }
        namespace IfcPointOrVertexPoint {
            const domain_801: string;
            export { domain_801 as domain };
            const superclasses_801: any[];
            export { superclasses_801 as superclasses };
            const fields_801: {};
            export { fields_801 as fields };
        }
        namespace IfcPresentationStyleSelect {
            const domain_802: string;
            export { domain_802 as domain };
            const superclasses_802: any[];
            export { superclasses_802 as superclasses };
            const fields_802: {};
            export { fields_802 as fields };
        }
        namespace IfcShell {
            const domain_803: string;
            export { domain_803 as domain };
            const superclasses_803: any[];
            export { superclasses_803 as superclasses };
            const fields_803: {};
            export { fields_803 as fields };
        }
        namespace IfcSimpleValue {
            const domain_804: string;
            export { domain_804 as domain };
            const superclasses_804: string[];
            export { superclasses_804 as superclasses };
            const fields_804: {};
            export { fields_804 as fields };
        }
        namespace IfcSizeSelect {
            const domain_805: string;
            export { domain_805 as domain };
            const superclasses_805: any[];
            export { superclasses_805 as superclasses };
            const fields_805: {};
            export { fields_805 as fields };
        }
        namespace IfcSpecularHighlightSelect {
            const domain_806: string;
            export { domain_806 as domain };
            const superclasses_806: any[];
            export { superclasses_806 as superclasses };
            const fields_806: {};
            export { fields_806 as fields };
        }
        namespace IfcStructuralActivityAssignmentSelect {
            const domain_807: string;
            export { domain_807 as domain };
            const superclasses_807: any[];
            export { superclasses_807 as superclasses };
            const fields_807: {};
            export { fields_807 as fields };
        }
        namespace IfcSurfaceOrFaceSurface {
            const domain_808: string;
            export { domain_808 as domain };
            const superclasses_808: any[];
            export { superclasses_808 as superclasses };
            const fields_808: {};
            export { fields_808 as fields };
        }
        namespace IfcSurfaceStyleElementSelect {
            const domain_809: string;
            export { domain_809 as domain };
            const superclasses_809: any[];
            export { superclasses_809 as superclasses };
            const fields_809: {};
            export { fields_809 as fields };
        }
        namespace IfcSymbolStyleSelect {
            const domain_810: string;
            export { domain_810 as domain };
            const superclasses_810: any[];
            export { superclasses_810 as superclasses };
            const fields_810: {};
            export { fields_810 as fields };
        }
        namespace IfcTextFontSelect {
            const domain_811: string;
            export { domain_811 as domain };
            const superclasses_811: any[];
            export { superclasses_811 as superclasses };
            const fields_811: {};
            export { fields_811 as fields };
        }
        namespace IfcTextStyleSelect {
            const domain_812: string;
            export { domain_812 as domain };
            const superclasses_812: any[];
            export { superclasses_812 as superclasses };
            const fields_812: {};
            export { fields_812 as fields };
        }
        namespace IfcTrimmingSelect {
            const domain_813: string;
            export { domain_813 as domain };
            const superclasses_813: any[];
            export { superclasses_813 as superclasses };
            const fields_813: {};
            export { fields_813 as fields };
        }
        namespace IfcUnit {
            const domain_814: string;
            export { domain_814 as domain };
            const superclasses_814: any[];
            export { superclasses_814 as superclasses };
            const fields_814: {};
            export { fields_814 as fields };
        }
        namespace IfcValue {
            const domain_815: string;
            export { domain_815 as domain };
            const superclasses_815: any[];
            export { superclasses_815 as superclasses };
            const fields_815: {};
            export { fields_815 as fields };
        }
        namespace IfcVectorOrDirection {
            const domain_816: string;
            export { domain_816 as domain };
            const superclasses_816: any[];
            export { superclasses_816 as superclasses };
            const fields_816: {};
            export { fields_816 as fields };
        }
    }
}
